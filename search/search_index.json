{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disciplina Reposit\u00f3rio com o conte\u00fado das disciplinas GPP e MDS do curso Engenharia de Software da Universidade de Bras\u00edlia No reposit\u00f3rio encontra todo o material did\u00e1tico disponibilizado para a disciplina. \u201cThe best way to find out if you can trust somebody is to trust them.\u201d Ernest Hemingway Trust is the bedrock of all effective teams. When it exists, team members speak freely, don\u2019t second guess each other and formal hierarchy fades into the distance. Motiva\u00e7\u00e3o Um pouco da Metodologia Estrutura da Disciplina Motiva\u00e7\u00e3o Para o projeto multidisciplinar foi necess\u00e1rio a integra\u00e7\u00e3o entre os estudantes da disciplina de GPP e MDS . Gest\u00e3o de Portf\u00f3lios e Projetos de Software \u00e9 uma disciplina que visa dar ao estudante uma gama de conhecimentos e t\u00e9cnicas, com o intuito de permitir a boa gest\u00e3o estrat\u00e9gica de projetos de software . Isso transpassa a gest\u00e3o de escopo, tempo, custos, qualidade e diversos outros contextos do projeto. M\u00e9todos de Desenvolvimento de Software , \u00e9 uma disciplina que trabalha no estudante conhecimentos relativos a diferentes modelos de ciclo de vida para um projeto de software . Faz com que o estudante seja estimulado a compreender os diferentes aspectos de cada modelo, identificando suas caracter\u00edsticas e quando usar um em detrimento de outro. Sendo assim, o projeto visa utilizar ambas as disciplinas com o intuito de produzir um software , onde os estudantes s\u00e3o estimulados a utilizar n\u00e3o apenas o conhecimento adquirido nas disciplinas, mas em toda a sua caminhada pela faculdade at\u00e9 o momento. Um Pouco da Metodologia Os estudantes se dividem em grupos, mesclando estudantes que estejam cursando ambas as disciplinas. Cada grupo seleciona um tema e deve chegar ao fim do semestre com um software . A produ\u00e7\u00e3o desse software \u00e9 acompanhada pelo professor e por uma equipe de monitores, afim de auxiliar os grupos. Outro ponto importante \u00e9 que durante o desenvolvimento dos projetos de cada grupo, em um dado momento, o modelo de produ\u00e7\u00e3o de software deve ser alterado. Os grupos iniciam a produ\u00e7\u00e3o utilizando metodologias tradicionais (PMBOK/RUP) e, na metade do semestre, os modelos metodol\u00f3gicos de desenvolvimento a serem adotados passam a ser os \u00e1geis (SCRUM/XP). Dessa forma, o estudante tem a possibilidade de vivenciar ambas as metodologias. Estrutura do Curso Etapas do curso","title":"Disciplina"},{"location":"#disciplina","text":"Reposit\u00f3rio com o conte\u00fado das disciplinas GPP e MDS do curso Engenharia de Software da Universidade de Bras\u00edlia No reposit\u00f3rio encontra todo o material did\u00e1tico disponibilizado para a disciplina.","title":"Disciplina"},{"location":"#the-best-way-to-find-out-if-you-can-trust-somebody-is-to-trust-them-ernest-hemingway","text":"Trust is the bedrock of all effective teams. When it exists, team members speak freely, don\u2019t second guess each other and formal hierarchy fades into the distance. Motiva\u00e7\u00e3o Um pouco da Metodologia Estrutura da Disciplina","title":"\u201cThe best way to find out if you can trust somebody is to trust them.\u201d Ernest Hemingway"},{"location":"#motivacao","text":"Para o projeto multidisciplinar foi necess\u00e1rio a integra\u00e7\u00e3o entre os estudantes da disciplina de GPP e MDS . Gest\u00e3o de Portf\u00f3lios e Projetos de Software \u00e9 uma disciplina que visa dar ao estudante uma gama de conhecimentos e t\u00e9cnicas, com o intuito de permitir a boa gest\u00e3o estrat\u00e9gica de projetos de software . Isso transpassa a gest\u00e3o de escopo, tempo, custos, qualidade e diversos outros contextos do projeto. M\u00e9todos de Desenvolvimento de Software , \u00e9 uma disciplina que trabalha no estudante conhecimentos relativos a diferentes modelos de ciclo de vida para um projeto de software . Faz com que o estudante seja estimulado a compreender os diferentes aspectos de cada modelo, identificando suas caracter\u00edsticas e quando usar um em detrimento de outro. Sendo assim, o projeto visa utilizar ambas as disciplinas com o intuito de produzir um software , onde os estudantes s\u00e3o estimulados a utilizar n\u00e3o apenas o conhecimento adquirido nas disciplinas, mas em toda a sua caminhada pela faculdade at\u00e9 o momento.","title":"Motiva\u00e7\u00e3o"},{"location":"#um-pouco-da-metodologia","text":"Os estudantes se dividem em grupos, mesclando estudantes que estejam cursando ambas as disciplinas. Cada grupo seleciona um tema e deve chegar ao fim do semestre com um software . A produ\u00e7\u00e3o desse software \u00e9 acompanhada pelo professor e por uma equipe de monitores, afim de auxiliar os grupos. Outro ponto importante \u00e9 que durante o desenvolvimento dos projetos de cada grupo, em um dado momento, o modelo de produ\u00e7\u00e3o de software deve ser alterado. Os grupos iniciam a produ\u00e7\u00e3o utilizando metodologias tradicionais (PMBOK/RUP) e, na metade do semestre, os modelos metodol\u00f3gicos de desenvolvimento a serem adotados passam a ser os \u00e1geis (SCRUM/XP). Dessa forma, o estudante tem a possibilidade de vivenciar ambas as metodologias.","title":"Um Pouco da Metodologia"},{"location":"#estrutura-do-curso","text":"Etapas do curso","title":"Estrutura do Curso"},{"location":"mds/","text":"MDS - Metodologia de Desenvolvimento de Software Bem vindo a MDS 1. O que \u00e9 Processo de Desenvolvimento de Software Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas. 2. O que \u00e9 modelo de processo de software \u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens. 3. Fases do ciclo de vida de software Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa. 3.1 Objetivos de cada fase do ciclo de vida de software Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores. 4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. 5. Refer\u00eancias Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/#mds-metodologia-de-desenvolvimento-de-software","text":"","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/#bem-vindo-a-mds","text":"","title":"Bem vindo a MDS"},{"location":"mds/#1-o-que-e-processo-de-desenvolvimento-de-software","text":"Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas.","title":"1. O que \u00e9 Processo de Desenvolvimento de Software"},{"location":"mds/#2-o-que-e-modelo-de-processo-de-software","text":"\u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens.","title":"2. O que \u00e9 modelo de processo de software"},{"location":"mds/#3-fases-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa.","title":"3. Fases do ciclo de vida de software"},{"location":"mds/#31-objetivos-de-cada-fase-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores.","title":"3.1 Objetivos de cada fase do ciclo de vida de software"},{"location":"mds/#4-estudo-de-caso-da-influencia-do-modelo-de-processo-no-sucesso-de-um-projeto","text":"Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto"},{"location":"mds/#5-referencias","text":"Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"5. Refer\u00eancias"},{"location":"agil/","text":"M\u00e9todos \u00c1geis Scrum Extreming Programing Indicadores \u00c1geis Como pontuar o backlog Como melhorar a comunica\u00e7\u00e3o","title":"Sobre"},{"location":"agil/#metodos-ageis","text":"","title":"M\u00e9todos \u00c1geis"},{"location":"agil/#scrum","text":"","title":"Scrum"},{"location":"agil/#extreming-programing","text":"","title":"Extreming Programing"},{"location":"agil/#indicadores-ageis","text":"","title":"Indicadores \u00c1geis"},{"location":"agil/#como-pontuar-o-backlog","text":"","title":"Como pontuar o backlog"},{"location":"agil/#como-melhorar-a-comunicacao","text":"","title":"Como melhorar a comunica\u00e7\u00e3o"},{"location":"agil/scrum/","text":"1. Scrum Durante muito tempo, empresas de desenvolvimento de software conviveram com problemas relacionados ao planejamento e gerenciamento de projetos. Mediante essa situa\u00e7\u00e3o, um grupo de profissionais da \u00e1rea de desenvolvimento de software se reuniram e criaram o que ficou conhecido com Manisfesto \u00c1gil , que foi gerado de acordo com as experi\u00eancias de cada um. Dentre os criadores do manifesto \u00e1gil estavam Ken Schwaber e Jeff Sutherland , que desenvolveram o Scrum . Segundo os criadores desse m\u00e9todo, o Scrum \"\u00e9 um framework para desenvolver e manter produtos complexos\". O Scrum consiste em um m\u00e9todo que trabalha com ciclos curtos de desenvolvimento. Deste modo, o feedback a respeito do resultado \u00e9 obtido rapidamente, o que garante a qualidade do produto desenvolvido e a satisfa\u00e7\u00e3o do cliente. 2. Principais Diferen\u00e7as: ( Scrum vs Tradicionais) Os m\u00e9todos \u00e1geis possuem uma maior liberdade no planejamento de a\u00e7\u00f5es, enquanto os tradicionais possuem um planejamento mais r\u00edgido. Outra diferen\u00e7a importante \u00e9 que as entregas de partes do projeto s\u00e3o feitas de forma cont\u00ednua e incremental (itera\u00e7\u00f5es), geralmente n\u00e3o muito longas, a fim de obter um r\u00e1pido feedback do cliente acerca do andamento do projeto. Na quest\u00e3o de comunica\u00e7\u00e3o entre os membros do projeto, os m\u00e9todos \u00e1geis utilizam reuni\u00f5es di\u00e1rias entre o time, ou seja, h\u00e1 uma intera\u00e7\u00e3o constante entre todos os membros da equipe, enquanto que em tradicionais, o contato n\u00e3o \u00e9 t\u00e3o frequente. O intuito disso est\u00e1 em discutir o que ser\u00e1 feito naquele momento, revendo o planejamento a m\u00e9dio e curto prazo, al\u00e9m de prov\u00e1veis impedimentos. As equipes s\u00e3o auto-organiz\u00e1veis e n\u00e3o necessitam de l\u00edderes indicando 'O que fazer' e 'Como fazer'. 3. Pap\u00e9is do Scrum 3.1 Product Owner O Product Owner , \"dono do produto\", \u00e9 o respons\u00e1vel por maximizar o valor do produto e do trabalho do Time de Desenvolvimento. Como isso \u00e9 feito pode variar por projeto ou time de desenvolvimento, sendo que o Product Owner \u00e9 a \u00fanica pessoa respons\u00e1vel por gerenciar o Backlog do Produto. O gerenciamento do Backlog do Produto inclui: Expressar claramente os itens do Backlog do Produto; Ordenar os itens do Backlog do Produto para alcan\u00e7ar melhor as metas e miss\u00f5es; Garantir o valor do trabalho realizado pelo Time de Desenvolvimento; Garantir que o Backlog do produto seja vis\u00edvel, transparente, claro para todos, e mostrar o que o Time Scrum vai trabalhar a seguir; Garantir que o Time de Desenvolvimento entenda os itens do Backlog do Produto no n\u00edvel necess\u00e1rio. O Product Owner pode fazer o trabalho citado acima, ou delegar para o Time de Desenvolvimento faz\u00ea-lo. No entanto n\u00e3o \u00e9 muito recomendado j\u00e1 que o Product Owner continuar\u00e1 sendo o respons\u00e1vel pelos trabalhos. O Product Owner \u00e9 uma pessoa e n\u00e3o um comit\u00ea, mas pode representar o desejo de um comit\u00ea no Backlog do Produto, sendo que aqueles que quiserem uma altera\u00e7\u00e3o nas prioridades dos itens de Backlog devem convencer o Product Owner das necessidades de tais mudan\u00e7as. Para que o Product Owner tenha sucesso, toda a organiza\u00e7\u00e3o deve respeitar as suas decis\u00f5es, estas devendo ser vis\u00edveis no conte\u00fado e na prioriza\u00e7\u00e3o do Backlog do Produto. 3.2 Scrum Master O Scrum Master \u00e9 respons\u00e1vel por garantir que o Scrum seja entendido e aplicado, ou seja, para garantir que o Time Scrum adira \u00e0 teoria, pr\u00e1ticas e regras do Scrum . O Scrum Master ajuda aqueles que est\u00e3o fora do Time Scrum a entender quais as suas intera\u00e7\u00f5es com o Time Scrum e se estas s\u00e3o \u00fateis, de modo que mostra, tamb\u00e9m, quais n\u00e3o s\u00e3o \u00fateis para o projeto. O Scrum Master ajuda todos a mudarem estas intera\u00e7\u00f5es para maximizar o valor criado pelo Time Scrum . 3.2.1 Pap\u00e9is do Scrum Master O Scrum Master serve o Product Owner de v\u00e1rias maneiras, incluindo: Encontrando t\u00e9cnicas para o gerenciamento efetivo do Backlog do Produto; Claramente comunicar a vis\u00e3o, objetivo e itens do Backlog do Produto para o Time de Desenvolvimento; Ensinar a Time Scrum a criar itens de Backlog do Produto de forma clara e concisa; Compreender a longo-prazo o planejamento do Produto no ambiente emp\u00edrico; Compreender e praticar a agilidade; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios. Treinar o Time de Desenvolvimento em autogerenciamento e interdisciplinaridade; Ensinar e liderar o Time de Desenvolvimento na cria\u00e7\u00e3o de produtos de alto valor; Remover impedimentos para o progresso do Time de Desenvolvimento; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios; Treinar o Time de Desenvolvimento em ambientes organizacionais nos quais o Scrum n\u00e3o \u00e9 totalmente adotado e compreendido; Liderando e treinando a organiza\u00e7\u00e3o na ado\u00e7\u00e3o do Scrum ; Planejando implementa\u00e7\u00f5es Scrum dentro da organiza\u00e7\u00e3o; Ajudando funcion\u00e1rios e partes interessadas a compreender e tornar aplic\u00e1vel o Scrum e o desenvolvimento de produto emp\u00edrico; Causando mudan\u00e7as que aumentam a produtividade do Time Scrum ; Trabalhando com outros Scrum Masters para aumentar a efic\u00e1cia da aplica\u00e7\u00e3o do Scrum nas organiza\u00e7\u00f5es. 3.3 Development Team O Time de Desenvolvimento consiste de profissionais que realizamo trabalho de entregar uma vers\u00e3o us\u00e1vel que potencialmente incrementa o produto \u201cPronto\u201d ao final de cada Sprint . Somente integrantes do Time de Desenvolvimento criam incrementos. Os Times de Desenvolvimento s\u00e3o estruturados e autorizados pela organiza\u00e7\u00e3o para organizar e gerenciar seu pr\u00f3prio trabalho. A sinergia resultante aperfei\u00e7oa a efici\u00eancia e a efic\u00e1cia do Time de Desenvolvimento como um todo. O Scrum Team \u00e9 a equipe de desenvolvimento. Nela n\u00e3o existe necessariamente uma divis\u00e3o funcional atrav\u00e9s de pap\u00e9is tradicionais, tais como programador, designer, analista de testes ou arquiteto. Todos no projeto trabalham juntos para completar o conjunto de trabalho com o qual se comprometeram conjuntamente para um Sprint . Um Scrum Team t\u00edpico tem de 6 a 10 pessoas, embora haja relatos de projetos Scrum com equipes maiores. A principal abordagem para trabalhar com equipes grandes no Scrum \u00e9 usando o conceito de \"Scrum of Scrums\" . Cada Scrum Team trabalha normalmente, mas cada equipe tamb\u00e9m contribui com uma pessoa que dever\u00e1 frequentar o Scrum of Scrums Meeting para coordenar o trabalho de m\u00faltiplas equipes Scrum . O tamanho ideal do Time de Desenvolvimento deve ser pequeno o suficiente para se manter \u00e1gil e grande o suficiente para completar uma parcela significativa do trabalho dentro dos limites de tempo da Sprint . Menos de 3 integrantes no Time de Desenvolvimento diminuem a intera\u00e7\u00e3o e resultam em um menor ganho de produtividade. Times de desenvolvimento menores podem encontrar restri\u00e7\u00f5es de habilidades durante a Sprint , gerando um Time de Desenvolvimento incapaz de entregar um incremento potencialmente utiliz\u00e1vel. Havendo mais de 9 integrantes \u00e9 exigida muita coordena\u00e7\u00e3o. De maneira que o Time n\u00e3o pode ser grande demais ou pequeno demais. 4. Artefatos 4.1 Product Backlog O Product Backlog \u00e9 uma lista contendo todas as funcionalidades desejadas para um produto. O conte\u00fado desta lista \u00e9 definido pelo Product Owner . N\u00e3o tem a necessidade dessa lista estar completo no in\u00edcio de um projeto. Pode-se come\u00e7ar com tudo aquilo que \u00e9 mais \u00f3bvio em um primeiro momento. Com o tempo, o Product Backlog cresce e muda \u00e0 medida que se aprende mais sobre o produto e seus usu\u00e1rios. 4.2 Charts 4.2.1 Velocity Chart O Velocity Chart pode ajudar a determinar quantos pontos de trabalho pode ser conclu\u00eddo por Sprint para uma determinada equipe, se a composi\u00e7\u00e3o da equipe e dura\u00e7\u00e3o da Sprint permanecerem os mesmos. A Estimativa dos pontos de hist\u00f3ria devem ser precisos para o c\u00e1lculo do Velocity ser significativo. Pode-se criar Velocity Chart para lan\u00e7amentos ou Sprints conclu\u00eddas. 4.2.2 Burndown Chart Burndown Chart compara o progresso esperado versus o progresso real para releases e Sprints . Este Chart pode ajudar a identificar problemas inesperados que podem estar afetando o progresso. Os usu\u00e1rios com as fun\u00e7\u00f5es Scrum admin ou Scrum user podem visualizar as informa\u00e7\u00f5es do Burndown Chart . 4.3 Sprints Sprint \u00e9 considerado como o cora\u00e7\u00e3o do Scrum , \u00e9 o tempo que dura geralmente de um m\u00eas ou menos. Ao final de uma Sprint \u00e9 esperado que tenha um vers\u00e3o est\u00e1vel do produto e incrementada em rela\u00e7\u00e3o a vers\u00e3o anterior. O tempo de dura\u00e7\u00e3o de uma Sprint \u00e9 coerente com o esfor\u00e7o demandado para o desenvolvimento. Para iniciar uma Sprint \u00e9 necess\u00e1rio realizar a reuni\u00e3o de planejamento, reuni\u00f5es di\u00e1rias, o trabalho desenvolvido durante o per\u00edodo da Sprint , a realiza\u00e7\u00e3o da revis\u00e3o de Sprint e a retrospectiva dela para poder encerr\u00e1-la. 5. Reuni\u00f5es 5.1 Daily Meetings As reuni\u00f5es di\u00e1rias s\u00e3o reuni\u00f5es r\u00e1pidas, de aproximadamente 10 a 15 minutos, dependendo do tamanho da equipe, onde os participantes a realizam de p\u00e9. O objetivo desta \u00e9 explanar para o restante do time o que foi feito no dia anterior e o que pretende-se fazer no dia atual, bem como a exist\u00eancia de quaisquer impedimentos no desenvolvimento. Deste modo, todo o time est\u00e1 sempre atualizado em rela\u00e7\u00e3o ao andamento do projeto como um todo, n\u00e3o somente em suas demandas/tarefas, o que permite a possibilidade de tomadas de decis\u00e3o r\u00e1pidas e forte adapta\u00e7\u00e3o a mudan\u00e7as. As reuni\u00f5es di\u00e1rias s\u00e3o realizadas sempre no mesmo hor\u00e1rio e local. 5.2 Retrospectiva A retrospectiva \u00e9 uma reuni\u00e3o realizada com o intuito de abordar os pontos positivos, negativos e de melhoria do per\u00edodo passado, com a finalidade de n\u00e3o repetir os erros e manter e/ou melhorar os acertos. Esta reuni\u00e3o pode ser realizada ao fim de cada Sprint ou em per\u00edodos pr\u00e9-determinados, como a cada m\u00eas, por exemplo. 5.3 Revis\u00e3o da Sprint Revis\u00e3o de Sprint \u00e9 uma reuni\u00e3o realizada ao final de toda Sprint , onde s\u00e3o mostrados ao restante do time tudo o que foi realizado durante o per\u00edodo da Sprint passada. Esta reuni\u00e3o pode incluir o(s) cliente(s). 6. Refer\u00eancias Manifesto Agil Guia do SCRUM Service Now Metodologia \u00c1gil Imagem: Ciclo do Scrum Imagem: Velocity Chart Imagem: Burndown Chart","title":"Scrum"},{"location":"agil/scrum/#1-scrum","text":"Durante muito tempo, empresas de desenvolvimento de software conviveram com problemas relacionados ao planejamento e gerenciamento de projetos. Mediante essa situa\u00e7\u00e3o, um grupo de profissionais da \u00e1rea de desenvolvimento de software se reuniram e criaram o que ficou conhecido com Manisfesto \u00c1gil , que foi gerado de acordo com as experi\u00eancias de cada um. Dentre os criadores do manifesto \u00e1gil estavam Ken Schwaber e Jeff Sutherland , que desenvolveram o Scrum . Segundo os criadores desse m\u00e9todo, o Scrum \"\u00e9 um framework para desenvolver e manter produtos complexos\". O Scrum consiste em um m\u00e9todo que trabalha com ciclos curtos de desenvolvimento. Deste modo, o feedback a respeito do resultado \u00e9 obtido rapidamente, o que garante a qualidade do produto desenvolvido e a satisfa\u00e7\u00e3o do cliente.","title":"1. Scrum"},{"location":"agil/scrum/#2-principais-diferencas-scrum-vs-tradicionais","text":"Os m\u00e9todos \u00e1geis possuem uma maior liberdade no planejamento de a\u00e7\u00f5es, enquanto os tradicionais possuem um planejamento mais r\u00edgido. Outra diferen\u00e7a importante \u00e9 que as entregas de partes do projeto s\u00e3o feitas de forma cont\u00ednua e incremental (itera\u00e7\u00f5es), geralmente n\u00e3o muito longas, a fim de obter um r\u00e1pido feedback do cliente acerca do andamento do projeto. Na quest\u00e3o de comunica\u00e7\u00e3o entre os membros do projeto, os m\u00e9todos \u00e1geis utilizam reuni\u00f5es di\u00e1rias entre o time, ou seja, h\u00e1 uma intera\u00e7\u00e3o constante entre todos os membros da equipe, enquanto que em tradicionais, o contato n\u00e3o \u00e9 t\u00e3o frequente. O intuito disso est\u00e1 em discutir o que ser\u00e1 feito naquele momento, revendo o planejamento a m\u00e9dio e curto prazo, al\u00e9m de prov\u00e1veis impedimentos. As equipes s\u00e3o auto-organiz\u00e1veis e n\u00e3o necessitam de l\u00edderes indicando 'O que fazer' e 'Como fazer'.","title":"2. Principais Diferen\u00e7as: (Scrum vs Tradicionais)"},{"location":"agil/scrum/#3-papeis-do-scrum","text":"","title":"3. Pap\u00e9is do Scrum"},{"location":"agil/scrum/#31-product-owner","text":"O Product Owner , \"dono do produto\", \u00e9 o respons\u00e1vel por maximizar o valor do produto e do trabalho do Time de Desenvolvimento. Como isso \u00e9 feito pode variar por projeto ou time de desenvolvimento, sendo que o Product Owner \u00e9 a \u00fanica pessoa respons\u00e1vel por gerenciar o Backlog do Produto. O gerenciamento do Backlog do Produto inclui: Expressar claramente os itens do Backlog do Produto; Ordenar os itens do Backlog do Produto para alcan\u00e7ar melhor as metas e miss\u00f5es; Garantir o valor do trabalho realizado pelo Time de Desenvolvimento; Garantir que o Backlog do produto seja vis\u00edvel, transparente, claro para todos, e mostrar o que o Time Scrum vai trabalhar a seguir; Garantir que o Time de Desenvolvimento entenda os itens do Backlog do Produto no n\u00edvel necess\u00e1rio. O Product Owner pode fazer o trabalho citado acima, ou delegar para o Time de Desenvolvimento faz\u00ea-lo. No entanto n\u00e3o \u00e9 muito recomendado j\u00e1 que o Product Owner continuar\u00e1 sendo o respons\u00e1vel pelos trabalhos. O Product Owner \u00e9 uma pessoa e n\u00e3o um comit\u00ea, mas pode representar o desejo de um comit\u00ea no Backlog do Produto, sendo que aqueles que quiserem uma altera\u00e7\u00e3o nas prioridades dos itens de Backlog devem convencer o Product Owner das necessidades de tais mudan\u00e7as. Para que o Product Owner tenha sucesso, toda a organiza\u00e7\u00e3o deve respeitar as suas decis\u00f5es, estas devendo ser vis\u00edveis no conte\u00fado e na prioriza\u00e7\u00e3o do Backlog do Produto.","title":"3.1 Product Owner"},{"location":"agil/scrum/#32-scrum-master","text":"O Scrum Master \u00e9 respons\u00e1vel por garantir que o Scrum seja entendido e aplicado, ou seja, para garantir que o Time Scrum adira \u00e0 teoria, pr\u00e1ticas e regras do Scrum . O Scrum Master ajuda aqueles que est\u00e3o fora do Time Scrum a entender quais as suas intera\u00e7\u00f5es com o Time Scrum e se estas s\u00e3o \u00fateis, de modo que mostra, tamb\u00e9m, quais n\u00e3o s\u00e3o \u00fateis para o projeto. O Scrum Master ajuda todos a mudarem estas intera\u00e7\u00f5es para maximizar o valor criado pelo Time Scrum .","title":"3.2 Scrum Master"},{"location":"agil/scrum/#321-papeis-do-scrum-master","text":"O Scrum Master serve o Product Owner de v\u00e1rias maneiras, incluindo: Encontrando t\u00e9cnicas para o gerenciamento efetivo do Backlog do Produto; Claramente comunicar a vis\u00e3o, objetivo e itens do Backlog do Produto para o Time de Desenvolvimento; Ensinar a Time Scrum a criar itens de Backlog do Produto de forma clara e concisa; Compreender a longo-prazo o planejamento do Produto no ambiente emp\u00edrico; Compreender e praticar a agilidade; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios. Treinar o Time de Desenvolvimento em autogerenciamento e interdisciplinaridade; Ensinar e liderar o Time de Desenvolvimento na cria\u00e7\u00e3o de produtos de alto valor; Remover impedimentos para o progresso do Time de Desenvolvimento; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios; Treinar o Time de Desenvolvimento em ambientes organizacionais nos quais o Scrum n\u00e3o \u00e9 totalmente adotado e compreendido; Liderando e treinando a organiza\u00e7\u00e3o na ado\u00e7\u00e3o do Scrum ; Planejando implementa\u00e7\u00f5es Scrum dentro da organiza\u00e7\u00e3o; Ajudando funcion\u00e1rios e partes interessadas a compreender e tornar aplic\u00e1vel o Scrum e o desenvolvimento de produto emp\u00edrico; Causando mudan\u00e7as que aumentam a produtividade do Time Scrum ; Trabalhando com outros Scrum Masters para aumentar a efic\u00e1cia da aplica\u00e7\u00e3o do Scrum nas organiza\u00e7\u00f5es.","title":"3.2.1 Pap\u00e9is do Scrum Master"},{"location":"agil/scrum/#33-development-team","text":"O Time de Desenvolvimento consiste de profissionais que realizamo trabalho de entregar uma vers\u00e3o us\u00e1vel que potencialmente incrementa o produto \u201cPronto\u201d ao final de cada Sprint . Somente integrantes do Time de Desenvolvimento criam incrementos. Os Times de Desenvolvimento s\u00e3o estruturados e autorizados pela organiza\u00e7\u00e3o para organizar e gerenciar seu pr\u00f3prio trabalho. A sinergia resultante aperfei\u00e7oa a efici\u00eancia e a efic\u00e1cia do Time de Desenvolvimento como um todo. O Scrum Team \u00e9 a equipe de desenvolvimento. Nela n\u00e3o existe necessariamente uma divis\u00e3o funcional atrav\u00e9s de pap\u00e9is tradicionais, tais como programador, designer, analista de testes ou arquiteto. Todos no projeto trabalham juntos para completar o conjunto de trabalho com o qual se comprometeram conjuntamente para um Sprint . Um Scrum Team t\u00edpico tem de 6 a 10 pessoas, embora haja relatos de projetos Scrum com equipes maiores. A principal abordagem para trabalhar com equipes grandes no Scrum \u00e9 usando o conceito de \"Scrum of Scrums\" . Cada Scrum Team trabalha normalmente, mas cada equipe tamb\u00e9m contribui com uma pessoa que dever\u00e1 frequentar o Scrum of Scrums Meeting para coordenar o trabalho de m\u00faltiplas equipes Scrum . O tamanho ideal do Time de Desenvolvimento deve ser pequeno o suficiente para se manter \u00e1gil e grande o suficiente para completar uma parcela significativa do trabalho dentro dos limites de tempo da Sprint . Menos de 3 integrantes no Time de Desenvolvimento diminuem a intera\u00e7\u00e3o e resultam em um menor ganho de produtividade. Times de desenvolvimento menores podem encontrar restri\u00e7\u00f5es de habilidades durante a Sprint , gerando um Time de Desenvolvimento incapaz de entregar um incremento potencialmente utiliz\u00e1vel. Havendo mais de 9 integrantes \u00e9 exigida muita coordena\u00e7\u00e3o. De maneira que o Time n\u00e3o pode ser grande demais ou pequeno demais.","title":"3.3 Development Team"},{"location":"agil/scrum/#4-artefatos","text":"","title":"4. Artefatos"},{"location":"agil/scrum/#41-product-backlog","text":"O Product Backlog \u00e9 uma lista contendo todas as funcionalidades desejadas para um produto. O conte\u00fado desta lista \u00e9 definido pelo Product Owner . N\u00e3o tem a necessidade dessa lista estar completo no in\u00edcio de um projeto. Pode-se come\u00e7ar com tudo aquilo que \u00e9 mais \u00f3bvio em um primeiro momento. Com o tempo, o Product Backlog cresce e muda \u00e0 medida que se aprende mais sobre o produto e seus usu\u00e1rios.","title":"4.1 Product Backlog"},{"location":"agil/scrum/#42-charts","text":"","title":"4.2 Charts"},{"location":"agil/scrum/#421-velocity-chart","text":"O Velocity Chart pode ajudar a determinar quantos pontos de trabalho pode ser conclu\u00eddo por Sprint para uma determinada equipe, se a composi\u00e7\u00e3o da equipe e dura\u00e7\u00e3o da Sprint permanecerem os mesmos. A Estimativa dos pontos de hist\u00f3ria devem ser precisos para o c\u00e1lculo do Velocity ser significativo. Pode-se criar Velocity Chart para lan\u00e7amentos ou Sprints conclu\u00eddas.","title":"4.2.1 Velocity Chart"},{"location":"agil/scrum/#422-burndown-chart","text":"Burndown Chart compara o progresso esperado versus o progresso real para releases e Sprints . Este Chart pode ajudar a identificar problemas inesperados que podem estar afetando o progresso. Os usu\u00e1rios com as fun\u00e7\u00f5es Scrum admin ou Scrum user podem visualizar as informa\u00e7\u00f5es do Burndown Chart .","title":"4.2.2 Burndown Chart"},{"location":"agil/scrum/#43-sprints","text":"Sprint \u00e9 considerado como o cora\u00e7\u00e3o do Scrum , \u00e9 o tempo que dura geralmente de um m\u00eas ou menos. Ao final de uma Sprint \u00e9 esperado que tenha um vers\u00e3o est\u00e1vel do produto e incrementada em rela\u00e7\u00e3o a vers\u00e3o anterior. O tempo de dura\u00e7\u00e3o de uma Sprint \u00e9 coerente com o esfor\u00e7o demandado para o desenvolvimento. Para iniciar uma Sprint \u00e9 necess\u00e1rio realizar a reuni\u00e3o de planejamento, reuni\u00f5es di\u00e1rias, o trabalho desenvolvido durante o per\u00edodo da Sprint , a realiza\u00e7\u00e3o da revis\u00e3o de Sprint e a retrospectiva dela para poder encerr\u00e1-la.","title":"4.3 Sprints"},{"location":"agil/scrum/#5-reunioes","text":"","title":"5. Reuni\u00f5es"},{"location":"agil/scrum/#51-daily-meetings","text":"As reuni\u00f5es di\u00e1rias s\u00e3o reuni\u00f5es r\u00e1pidas, de aproximadamente 10 a 15 minutos, dependendo do tamanho da equipe, onde os participantes a realizam de p\u00e9. O objetivo desta \u00e9 explanar para o restante do time o que foi feito no dia anterior e o que pretende-se fazer no dia atual, bem como a exist\u00eancia de quaisquer impedimentos no desenvolvimento. Deste modo, todo o time est\u00e1 sempre atualizado em rela\u00e7\u00e3o ao andamento do projeto como um todo, n\u00e3o somente em suas demandas/tarefas, o que permite a possibilidade de tomadas de decis\u00e3o r\u00e1pidas e forte adapta\u00e7\u00e3o a mudan\u00e7as. As reuni\u00f5es di\u00e1rias s\u00e3o realizadas sempre no mesmo hor\u00e1rio e local.","title":"5.1 Daily Meetings"},{"location":"agil/scrum/#52-retrospectiva","text":"A retrospectiva \u00e9 uma reuni\u00e3o realizada com o intuito de abordar os pontos positivos, negativos e de melhoria do per\u00edodo passado, com a finalidade de n\u00e3o repetir os erros e manter e/ou melhorar os acertos. Esta reuni\u00e3o pode ser realizada ao fim de cada Sprint ou em per\u00edodos pr\u00e9-determinados, como a cada m\u00eas, por exemplo.","title":"5.2 Retrospectiva"},{"location":"agil/scrum/#53-revisao-da-sprint","text":"Revis\u00e3o de Sprint \u00e9 uma reuni\u00e3o realizada ao final de toda Sprint , onde s\u00e3o mostrados ao restante do time tudo o que foi realizado durante o per\u00edodo da Sprint passada. Esta reuni\u00e3o pode incluir o(s) cliente(s).","title":"5.3 Revis\u00e3o da Sprint"},{"location":"agil/scrum/#6-referencias","text":"Manifesto Agil Guia do SCRUM Service Now Metodologia \u00c1gil Imagem: Ciclo do Scrum Imagem: Velocity Chart Imagem: Burndown Chart","title":"6. Refer\u00eancias"},{"location":"agil/xp/","text":"Extreming Programing - XP Framework XP O XP, ou Extreme Programming , \u00e9 uma metodologia de desenvolvimento de software que tem como objetivo principal levar ao extremo boas pr\u00e1ticas de programa\u00e7\u00e3o e boas pr\u00e1ticas para o desenvolvimento de software no geral. O XP \u00e9 uma metodologia baseada em valores, que definem uma maneira harmoniosa de trabalho na equipe de desenvolvimento. O foco desta metodologia \u00e9 no desenvolvimento incremental e iterativo de sistemas orientados \u00e0 objetos nos quais os requisitos s\u00e3o inst\u00e1veis e/ou incertos e que possua uma equipe pequena. O XP define uma s\u00e9rie de regras para que o desenvolvimento seja realizado da melhor maneira poss\u00edvel: Planejamento: As hist\u00f3rias de usu\u00e1rio s\u00e3o escritas S\u00e2o feitas releases pequenas e constantes. O projeto \u00e9 dividido em itera\u00e7\u00f5es. As itera\u00e7\u00f5es s\u00e3o planejadas no momento em que vai se come\u00e7ar o trabalho. Gerenciamento: O time deve ter um espa\u00e7o aberto de trabalho. O desenvolvimento deve ter uma velocidade sustent\u00e1vel. Stand-up meetings iniciam o dia de trabalho. O velocity \u00e9 sempre medido. O XP deve ser consertado caso n\u00e3o esteja funcionando. Design Simplicidade. Crie solu\u00e7\u00f5es simples para explorar todas as solu\u00e7\u00f5es poss\u00edveis. Funcionalidades n\u00e3o devem ser adicionadas antes da hora. Refatore sempre que poss\u00edvel C\u00f3difica\u00e7\u00e3o O cliente precisa estar sempre dispon\u00edvel. O c\u00f3digo precisa ser escrito utilizando padr\u00f5es. O c\u00f3digo \u00e9 feito utilizando pareamento ( pair programming ). Apenas um par integra o c\u00f3digo de cada vez. Toda a equipe deve participar da cria\u00e7\u00e3o de todas as partes do c\u00f3digo. Testes Todo o c\u00f3digo deve ter testes unit\u00e1rios. Todo o c\u00f3digo deve passar os testes unit\u00e1rios antes da release . Se um bug existe, testes s\u00e3o criados. Os testes de aceita\u00e7\u00e3o rodam com frequ\u00eancia. Como podemos notar, todas as boas pr\u00e1ticas s\u00e3o levadas ao extremo no XP. Pode-se se dizer que \u00e9 uma metodologia bastante vol\u00e1til. Portanto, para que seja poss\u00edvel a adapta\u00e7\u00e3o \u00e0s frequentes mudan\u00e7as, o XP preconiza ciclos curtos que nos d\u00e1 previsibilidade e redu\u00e7\u00e3o de incertezas/riscos, simplicidade e melhorias constantes de c\u00f3digo ( refactoring ) para facilitar a mudan\u00e7a e Testes Automatizados e Integra\u00e7\u00e3o Cont\u00ednua para aumentar a confian\u00e7a. O m\u00e9todo XP preconiza que Codifica\u00e7\u00e3o \u00e9 a atividade central do projeto, que os Testes (que tamb\u00e9m s\u00e3o c\u00f3digo) servem de especifica\u00e7\u00e3o de requisitos, e a Comunica\u00e7\u00e3o oral entre desenvolvedores \u00e9 fundamental, o que d\u00e1 proximidade a equipe. Isto n\u00e3o quer dizer que a equipe XP n\u00e3o constr\u00f3i documentos e n\u00e3o faz modelagem, ela s\u00f3 n\u00e3o considera que um modelo \u00e9 um documento. Modelos s\u00e3o feitos o tempo todo seja como quadro branco, sess\u00f5es de design, etc, mas servem como um suporte para o concreto que realmente importa. Valores XP Comunica\u00e7\u00e3o Todo o processo \u00e1gil \u00e9 baseado na comunica\u00e7\u00e3o. A comunica\u00e7\u00e3o \u00e9 essencial para o \u00eaxito da metodologia \u00e0gil e pode ser realizada de diversas formas, n\u00e3o somente por documenta\u00e7\u00e3o como nas metodologias tradicionais. A comunica\u00e7\u00e3o entre os desenvolvedores instiga a dissemina\u00e7\u00e3o do conhecimento dentro da equipe, evoluindo-a em aspectos t\u00e9cnicos. J\u00e1 a comunica\u00e7\u00e3o com o cliente garante que o produto entregue atenda \u00e0 suas expectativas. Coragem Consiste na coragem durante a implementa\u00e7\u00e3o de tomar decis\u00f5es que sejam melhores para a equipe e para o c\u00f3digo. Por exemplo, coragem para refatorar c\u00f3digos j\u00e1 implementadas para que a qualidade do c\u00f3digo melhore. Feedback O feedback consiste em uma frequente comunica\u00e7\u00e3o entre o cliente e a equipe que seja um retorno sobre o sistema. Por exemplo, o que est\u00e1 bom, o que est\u00e1 ruim, o que deve ser implementado, o que deve ser alterado, o que realmente \u00e9 necess\u00e1rio naquele momento e para aquele sistema. Dessa forma, a equipe que est\u00e1 desenvolvendo o sistema tem uma vis\u00e3o clara acerca dos requisitos e do que \u00e9 necess\u00e1rio que seja implementado. Respeito O respeito \u00e9 essencial para uma boa conviv\u00eancia da equipe. Todos os integrantes devem demonstrar respeito uns aos outros, n\u00e3o desmerecer as id\u00e9ias ou indaga\u00e7\u00f5es alheias. Simplicidade Sempre que foi iniciado a implementa\u00e7\u00e3o de algo, deve ser questionado qual a forma mais f\u00e1cil de implementar aquele escopo. Quanto mais simples, melhor a manutenibilidade e a qualidade do c\u00f3digo. Funcionalidade Pronta XP Teste Unit\u00e1rio Este teste \u00e9 utilizado para validar as classes b\u00e1sicas e os componentes do sistema que s\u00e3o considerados os menores elementos test\u00e1veis. Consiste em verificar se o fluxo de controle e dados est\u00e3o corretos. Deve ser realizado no in\u00edcio da itera\u00e7\u00e3o. S\u00e3o escritos pelos desenvolvedores enquanto codificam o sistema. Devem ser feitos de modo que sejam f\u00e1ceis de executar e e re-executar v\u00e1rias e v\u00e1rias vezes para validar o sistema. Devem ser criados para todas as classes do sistema. S\u00e3o implementados para todos os m\u00e9todos do sistema. S\u00e3o escritos antes e ao decorrer da produ\u00e7\u00e3o do sistema. Devem ser o mais simples poss\u00edvel. Programa\u00e7\u00e3o Pareada Sugere que todo e qualquer c\u00f3digo produzido no projeto seja sempre implementado por duas pessoas juntas, diante do mesmo computador, revezando-se no teclado. Al\u00e9m de parecer ter poucos benef\u00edcios, temos a impress\u00e3o de que ela ir\u00e1 consumir mais recursos ou ir\u00e1 elevar o tempo do desenvolvimento. Por que parear com o coleguinha? A programa\u00e7\u00e3o em par \u00e9 uma forma eficaz de reduzir a incid\u00eancia de bugs em um sistema. Quando dois desenvolvedores est\u00e3o programando em par, um deles est\u00e1 com as m\u00e3os no teclado e no mouse. O outro est\u00e1 sentado ao lado, olhando para a mesma tela e preocupado em resolver o mesmo problema. \u00c9 importante que eles conversem o tempo todo e troquem id\u00e9ias sobre a solu\u00e7\u00e3o. A programa\u00e7\u00e3o em par tamb\u00e9m ajuda os desenvolvedores a criarem solu\u00e7\u00f5es mais simples, mais r\u00e1pidas de implementar e mais f\u00e1ceis de manter. Isso ocorre em grande parte devido \u00e0 oportunidade de dialogar e trocar id\u00e9ias sobre programas que estejam sendo desenvolvidos. Quando nos deparamos com um problema, buscamos uma solu\u00e7\u00e3o usando todo e qualquer recurso que esteja a nossa disposi\u00e7\u00e3o. E, assim que encontramos uma solu\u00e7\u00e3o, encerramos a busca e a utilizamos. Al\u00e9m do mais, a programa\u00e7\u00e3o em par produz um efeito conhecido como \"press\u00e3o do par\" que faz com que os desenvolvedores tenham maior foco na atividade e faz com que isso se mantenha por mais tempo. Imagine que voc\u00ea esteja programando em par e, de repente, resolva olhar seus emails. Trata-se de uma situa\u00e7\u00e3o embara\u00e7osa, isso faz com que o foco seja mantido no desenvolvimento. Uma das caracter\u00edsticas mais marcantes da programa\u00e7\u00e3o em par \u00e9 a sua capacidade de dissemina\u00e7\u00e3o de conhecimento, especialmente em projetos XP, nos quais os desenvolvedores sempre trocam de pares, fazendo com que haja maior compartilhamento de informa\u00e7\u00f5es ao longo do projeto. A programa\u00e7\u00e3o em par tamb\u00e9m \u00e9 uma forma de fazer com que o desenvolvedor tenha mais confian\u00e7a no c\u00f3digo que produz. Afinal, o c\u00f3digo foi produzido por ele e mais outra pessoa que o ajudou a revis\u00e1-lo. Quando sabemos que mais uma pessoa, ou talvez v\u00e1rias, j\u00e1 olharam para o c\u00f3digo no qual trabalhamos e est\u00e3o de acordo sobre o mesmo, temos maior confian\u00e7a de que ele realmente ir\u00e1 funcionar. Isso significa que a programa\u00e7\u00e3o em par reduz o estresse do desenvolvedor. Consequentemente, as caracter\u00edsticas apresentadas acima fazem com que a programa\u00e7\u00e3o em par acelere o desenvolvimento significativamente, embora \u00e0 primeira vista pare\u00e7a o contr\u00e1rio. Em fun\u00e7\u00e3o dos benef\u00edcios acima, uma atividade feita em par normalmente \u00e9 encerrada mais rapidamente que outra feita por um programador solit\u00e1rio, aumentando a produtividade. Pair programming Varia\u00e7\u00f5es de Pares Especialista x Especialista Essa varia\u00e7\u00e3o pode gerar um aumento enorme de produtividade e grandes resultados, entretanto nela pode haver uma falta de resolver problemas de novas formas, visto que dificilmente algu\u00e9m da dupla questionar\u00e1 praticas j\u00e1 estabelecidas. Especialista x Principiante Essa varia\u00e7\u00e3o cria uma excelente oportunidade para o expert mentorear o aprendiz. Ela proporciona a cria\u00e7\u00e3o de novas ideias, visto que o aprendiz deve buscar questionar e aprender pr\u00e1ticas estabelecidas e o expert tem que usar os conhecimentos adquiridos com essas pr\u00e1ticas para explic\u00e1-las e question\u00e1-las tamb\u00e9m. \u00c9 muito importante que o aprendiz n\u00e3o haja passivamente no processo e n\u00e3o hesite em participar. Principiante x Principiante Pode gerar ganhos de produtividade maior do que dois aprendizes trabalhando sozinhos, entretanto n\u00e3o \u00e9 uma varia\u00e7\u00e3o muito encorajada. Teste de aceita\u00e7\u00e3o Os Testes de Aceita\u00e7\u00e3o consistem no teste de uma poss\u00edvel aceita\u00e7\u00e3o por parte do cliente. Testes de aceita\u00e7\u00e3o est\u00e3o intimamente ligados com as user stories . O teste de aceita\u00e7\u00e3o visa validar com o cliente o que foi definido nos requisitos do software , portanto, s\u00e3o usados para verificar se o produto desenvolvido est\u00e1 de acordo com o que foi estabelecido nos requisitos. Desse modo os testes de aceita\u00e7\u00e3o est\u00e3o ligadas as funcionalidades do sistema, onde entradas podem ser simuladas e o comportamento de sa\u00edda pode ser observada, esse comportamento deve ser compat\u00edvel com o temos previamente definidos (requisitos). Testes de aceita\u00e7\u00e3o visam testar o sistema do ponto de vista do usu\u00e1rio, de modo que s\u00e3o menos suscet\u00edveis a altera\u00e7\u00f5es. Como o sistema \u00e9 testado com todos os componentes interligados e configurados, inclusive bancos de dados e gerenciadores de filas, h\u00e1 garantias de que cada servi\u00e7o oferecido esteja funcionando. Integra\u00e7\u00e3o Cont\u00ednua Integra\u00e7\u00e3o cont\u00ednua consiste em integrar o trabalho diversas vezes ao dia, ao inv\u00e9s de uma \u00fanica vez, assegurando que a base de c\u00f3digo permane\u00e7a consistente ao final de cada integra\u00e7\u00e3o. O objetivo principal de utilizar a integra\u00e7\u00e3o cont\u00ednua \u00e9 verificar se as altera\u00e7\u00f5es ou novas funcionalidades n\u00e3o criaram novos defeitos no projeto j\u00e1 existente. Esse conceito de integra\u00e7\u00e3o cont\u00ednua est\u00e1 atrelado \u00e0 aplica\u00e7\u00e3o de controle de versionamento, geralmente feito com o uso de alguma ferramenta, como o github. O controle de versionamento permite restaurar vers\u00f5es anteriores do sistema, comparar c\u00f3digos, gerenciar altera\u00e7\u00f5es, entre outros, e \u00e9 utilizado por equipes de desenvolvimento que compartilham mesmo c\u00f3digo e projeto. O controle de vers\u00e3o funcionar\u00e1 de forma b\u00e1sica da seguinte forma: O desenvolvedor faz o seu c\u00f3digo, efetua um build (compilar, preparar o execut\u00e1vel, rodar os testes automatizados, etc) antes de integrar seu c\u00f3digo com a base principal; Ap\u00f3s realizar o build , o sistema deve ser integrado a base do sistema de controle de vers\u00e3o atrav\u00e9s de sincroniza\u00e7\u00e3o; Este processo deve ser feito frequentemente, evitando-se assim o ac\u00famulo de codifica\u00e7\u00e3o para a integra\u00e7\u00e3o ao reposit\u00f3rio. Algumas metodologias ditam que o desenvolvedor s\u00f3 pode considerar como pronto o trabalho quando o trabalho estiver sincronizado e ent\u00e3o o desenvolvedor realizar um build na m\u00e1quina de integra\u00e7\u00e3o e ap\u00f3s todos os testes serem executados com sucesso. Na integra\u00e7\u00e3o cont\u00ednua o processo de build integrado deve ser feito constantemente, sendo sincronizado sempre que poss\u00edvel, evitando o ac\u00famulo de c\u00f3digos e de testes. Isto porque \u00e9 mais f\u00e1cil encontrar erros em pequenas integra\u00e7\u00f5es do que em uma integra\u00e7\u00e3o grande. Nesse contexto de c\u00f3digo compartilhado e versionamento centralizado por uma ferramenta, a integra\u00e7\u00e3o cont\u00ednua, ou seja, a comunica\u00e7\u00e3o entre as partes que cada desenvolvedor construiu, permite que conflitos de vers\u00e3o sejam resolvidos mais r\u00e1pido, desde que a integra\u00e7\u00e3o ocorra continuamente. A chave para uma boa integra\u00e7\u00e3o, como visto anteriormente, \u00e9 um ambiente de controle de vers\u00e3o centralizado, builds e testes automatizados. Essa pr\u00e1tica reduz erros e riscos cometidos pela equipe, pois como o sistema \u00e9 integrado cont\u00ednua e rapidamente, os erros tamb\u00e9m s\u00e3o detectados na mesma velocidade. Refer\u00eancias Desenvolvimento \u00c1gil Desenvolvimento XP Integra\u00e7\u00e3o Cont\u00ednua Integra\u00e7\u00e3o Cont\u00ednua","title":"XP"},{"location":"agil/xp/#extreming-programing-xp","text":"","title":"Extreming Programing - XP"},{"location":"agil/xp/#framework-xp","text":"O XP, ou Extreme Programming , \u00e9 uma metodologia de desenvolvimento de software que tem como objetivo principal levar ao extremo boas pr\u00e1ticas de programa\u00e7\u00e3o e boas pr\u00e1ticas para o desenvolvimento de software no geral. O XP \u00e9 uma metodologia baseada em valores, que definem uma maneira harmoniosa de trabalho na equipe de desenvolvimento. O foco desta metodologia \u00e9 no desenvolvimento incremental e iterativo de sistemas orientados \u00e0 objetos nos quais os requisitos s\u00e3o inst\u00e1veis e/ou incertos e que possua uma equipe pequena. O XP define uma s\u00e9rie de regras para que o desenvolvimento seja realizado da melhor maneira poss\u00edvel:","title":"Framework XP"},{"location":"agil/xp/#planejamento","text":"As hist\u00f3rias de usu\u00e1rio s\u00e3o escritas S\u00e2o feitas releases pequenas e constantes. O projeto \u00e9 dividido em itera\u00e7\u00f5es. As itera\u00e7\u00f5es s\u00e3o planejadas no momento em que vai se come\u00e7ar o trabalho.","title":"Planejamento:"},{"location":"agil/xp/#gerenciamento","text":"O time deve ter um espa\u00e7o aberto de trabalho. O desenvolvimento deve ter uma velocidade sustent\u00e1vel. Stand-up meetings iniciam o dia de trabalho. O velocity \u00e9 sempre medido. O XP deve ser consertado caso n\u00e3o esteja funcionando.","title":"Gerenciamento:"},{"location":"agil/xp/#design","text":"Simplicidade. Crie solu\u00e7\u00f5es simples para explorar todas as solu\u00e7\u00f5es poss\u00edveis. Funcionalidades n\u00e3o devem ser adicionadas antes da hora. Refatore sempre que poss\u00edvel","title":"Design"},{"location":"agil/xp/#codificacao","text":"O cliente precisa estar sempre dispon\u00edvel. O c\u00f3digo precisa ser escrito utilizando padr\u00f5es. O c\u00f3digo \u00e9 feito utilizando pareamento ( pair programming ). Apenas um par integra o c\u00f3digo de cada vez. Toda a equipe deve participar da cria\u00e7\u00e3o de todas as partes do c\u00f3digo.","title":"C\u00f3difica\u00e7\u00e3o"},{"location":"agil/xp/#testes","text":"Todo o c\u00f3digo deve ter testes unit\u00e1rios. Todo o c\u00f3digo deve passar os testes unit\u00e1rios antes da release . Se um bug existe, testes s\u00e3o criados. Os testes de aceita\u00e7\u00e3o rodam com frequ\u00eancia. Como podemos notar, todas as boas pr\u00e1ticas s\u00e3o levadas ao extremo no XP. Pode-se se dizer que \u00e9 uma metodologia bastante vol\u00e1til. Portanto, para que seja poss\u00edvel a adapta\u00e7\u00e3o \u00e0s frequentes mudan\u00e7as, o XP preconiza ciclos curtos que nos d\u00e1 previsibilidade e redu\u00e7\u00e3o de incertezas/riscos, simplicidade e melhorias constantes de c\u00f3digo ( refactoring ) para facilitar a mudan\u00e7a e Testes Automatizados e Integra\u00e7\u00e3o Cont\u00ednua para aumentar a confian\u00e7a. O m\u00e9todo XP preconiza que Codifica\u00e7\u00e3o \u00e9 a atividade central do projeto, que os Testes (que tamb\u00e9m s\u00e3o c\u00f3digo) servem de especifica\u00e7\u00e3o de requisitos, e a Comunica\u00e7\u00e3o oral entre desenvolvedores \u00e9 fundamental, o que d\u00e1 proximidade a equipe. Isto n\u00e3o quer dizer que a equipe XP n\u00e3o constr\u00f3i documentos e n\u00e3o faz modelagem, ela s\u00f3 n\u00e3o considera que um modelo \u00e9 um documento. Modelos s\u00e3o feitos o tempo todo seja como quadro branco, sess\u00f5es de design, etc, mas servem como um suporte para o concreto que realmente importa.","title":"Testes"},{"location":"agil/xp/#valores-xp","text":"","title":"Valores XP"},{"location":"agil/xp/#comunicacao","text":"Todo o processo \u00e1gil \u00e9 baseado na comunica\u00e7\u00e3o. A comunica\u00e7\u00e3o \u00e9 essencial para o \u00eaxito da metodologia \u00e0gil e pode ser realizada de diversas formas, n\u00e3o somente por documenta\u00e7\u00e3o como nas metodologias tradicionais. A comunica\u00e7\u00e3o entre os desenvolvedores instiga a dissemina\u00e7\u00e3o do conhecimento dentro da equipe, evoluindo-a em aspectos t\u00e9cnicos. J\u00e1 a comunica\u00e7\u00e3o com o cliente garante que o produto entregue atenda \u00e0 suas expectativas.","title":"Comunica\u00e7\u00e3o"},{"location":"agil/xp/#coragem","text":"Consiste na coragem durante a implementa\u00e7\u00e3o de tomar decis\u00f5es que sejam melhores para a equipe e para o c\u00f3digo. Por exemplo, coragem para refatorar c\u00f3digos j\u00e1 implementadas para que a qualidade do c\u00f3digo melhore.","title":"Coragem"},{"location":"agil/xp/#feedback","text":"O feedback consiste em uma frequente comunica\u00e7\u00e3o entre o cliente e a equipe que seja um retorno sobre o sistema. Por exemplo, o que est\u00e1 bom, o que est\u00e1 ruim, o que deve ser implementado, o que deve ser alterado, o que realmente \u00e9 necess\u00e1rio naquele momento e para aquele sistema. Dessa forma, a equipe que est\u00e1 desenvolvendo o sistema tem uma vis\u00e3o clara acerca dos requisitos e do que \u00e9 necess\u00e1rio que seja implementado.","title":"Feedback"},{"location":"agil/xp/#respeito","text":"O respeito \u00e9 essencial para uma boa conviv\u00eancia da equipe. Todos os integrantes devem demonstrar respeito uns aos outros, n\u00e3o desmerecer as id\u00e9ias ou indaga\u00e7\u00f5es alheias.","title":"Respeito"},{"location":"agil/xp/#simplicidade","text":"Sempre que foi iniciado a implementa\u00e7\u00e3o de algo, deve ser questionado qual a forma mais f\u00e1cil de implementar aquele escopo. Quanto mais simples, melhor a manutenibilidade e a qualidade do c\u00f3digo.","title":"Simplicidade"},{"location":"agil/xp/#funcionalidade-pronta-xp","text":"","title":"Funcionalidade Pronta XP"},{"location":"agil/xp/#teste-unitario","text":"Este teste \u00e9 utilizado para validar as classes b\u00e1sicas e os componentes do sistema que s\u00e3o considerados os menores elementos test\u00e1veis. Consiste em verificar se o fluxo de controle e dados est\u00e3o corretos. Deve ser realizado no in\u00edcio da itera\u00e7\u00e3o. S\u00e3o escritos pelos desenvolvedores enquanto codificam o sistema. Devem ser feitos de modo que sejam f\u00e1ceis de executar e e re-executar v\u00e1rias e v\u00e1rias vezes para validar o sistema. Devem ser criados para todas as classes do sistema. S\u00e3o implementados para todos os m\u00e9todos do sistema. S\u00e3o escritos antes e ao decorrer da produ\u00e7\u00e3o do sistema. Devem ser o mais simples poss\u00edvel.","title":"Teste Unit\u00e1rio"},{"location":"agil/xp/#programacao-pareada","text":"Sugere que todo e qualquer c\u00f3digo produzido no projeto seja sempre implementado por duas pessoas juntas, diante do mesmo computador, revezando-se no teclado. Al\u00e9m de parecer ter poucos benef\u00edcios, temos a impress\u00e3o de que ela ir\u00e1 consumir mais recursos ou ir\u00e1 elevar o tempo do desenvolvimento.","title":"Programa\u00e7\u00e3o Pareada"},{"location":"agil/xp/#por-que-parear-com-o-coleguinha","text":"A programa\u00e7\u00e3o em par \u00e9 uma forma eficaz de reduzir a incid\u00eancia de bugs em um sistema. Quando dois desenvolvedores est\u00e3o programando em par, um deles est\u00e1 com as m\u00e3os no teclado e no mouse. O outro est\u00e1 sentado ao lado, olhando para a mesma tela e preocupado em resolver o mesmo problema. \u00c9 importante que eles conversem o tempo todo e troquem id\u00e9ias sobre a solu\u00e7\u00e3o. A programa\u00e7\u00e3o em par tamb\u00e9m ajuda os desenvolvedores a criarem solu\u00e7\u00f5es mais simples, mais r\u00e1pidas de implementar e mais f\u00e1ceis de manter. Isso ocorre em grande parte devido \u00e0 oportunidade de dialogar e trocar id\u00e9ias sobre programas que estejam sendo desenvolvidos. Quando nos deparamos com um problema, buscamos uma solu\u00e7\u00e3o usando todo e qualquer recurso que esteja a nossa disposi\u00e7\u00e3o. E, assim que encontramos uma solu\u00e7\u00e3o, encerramos a busca e a utilizamos. Al\u00e9m do mais, a programa\u00e7\u00e3o em par produz um efeito conhecido como \"press\u00e3o do par\" que faz com que os desenvolvedores tenham maior foco na atividade e faz com que isso se mantenha por mais tempo. Imagine que voc\u00ea esteja programando em par e, de repente, resolva olhar seus emails. Trata-se de uma situa\u00e7\u00e3o embara\u00e7osa, isso faz com que o foco seja mantido no desenvolvimento. Uma das caracter\u00edsticas mais marcantes da programa\u00e7\u00e3o em par \u00e9 a sua capacidade de dissemina\u00e7\u00e3o de conhecimento, especialmente em projetos XP, nos quais os desenvolvedores sempre trocam de pares, fazendo com que haja maior compartilhamento de informa\u00e7\u00f5es ao longo do projeto. A programa\u00e7\u00e3o em par tamb\u00e9m \u00e9 uma forma de fazer com que o desenvolvedor tenha mais confian\u00e7a no c\u00f3digo que produz. Afinal, o c\u00f3digo foi produzido por ele e mais outra pessoa que o ajudou a revis\u00e1-lo. Quando sabemos que mais uma pessoa, ou talvez v\u00e1rias, j\u00e1 olharam para o c\u00f3digo no qual trabalhamos e est\u00e3o de acordo sobre o mesmo, temos maior confian\u00e7a de que ele realmente ir\u00e1 funcionar. Isso significa que a programa\u00e7\u00e3o em par reduz o estresse do desenvolvedor. Consequentemente, as caracter\u00edsticas apresentadas acima fazem com que a programa\u00e7\u00e3o em par acelere o desenvolvimento significativamente, embora \u00e0 primeira vista pare\u00e7a o contr\u00e1rio. Em fun\u00e7\u00e3o dos benef\u00edcios acima, uma atividade feita em par normalmente \u00e9 encerrada mais rapidamente que outra feita por um programador solit\u00e1rio, aumentando a produtividade. Pair programming","title":"Por que parear com o coleguinha?"},{"location":"agil/xp/#variacoes-de-pares","text":"Especialista x Especialista Essa varia\u00e7\u00e3o pode gerar um aumento enorme de produtividade e grandes resultados, entretanto nela pode haver uma falta de resolver problemas de novas formas, visto que dificilmente algu\u00e9m da dupla questionar\u00e1 praticas j\u00e1 estabelecidas. Especialista x Principiante Essa varia\u00e7\u00e3o cria uma excelente oportunidade para o expert mentorear o aprendiz. Ela proporciona a cria\u00e7\u00e3o de novas ideias, visto que o aprendiz deve buscar questionar e aprender pr\u00e1ticas estabelecidas e o expert tem que usar os conhecimentos adquiridos com essas pr\u00e1ticas para explic\u00e1-las e question\u00e1-las tamb\u00e9m. \u00c9 muito importante que o aprendiz n\u00e3o haja passivamente no processo e n\u00e3o hesite em participar. Principiante x Principiante Pode gerar ganhos de produtividade maior do que dois aprendizes trabalhando sozinhos, entretanto n\u00e3o \u00e9 uma varia\u00e7\u00e3o muito encorajada.","title":"Varia\u00e7\u00f5es de Pares"},{"location":"agil/xp/#teste-de-aceitacao","text":"Os Testes de Aceita\u00e7\u00e3o consistem no teste de uma poss\u00edvel aceita\u00e7\u00e3o por parte do cliente. Testes de aceita\u00e7\u00e3o est\u00e3o intimamente ligados com as user stories . O teste de aceita\u00e7\u00e3o visa validar com o cliente o que foi definido nos requisitos do software , portanto, s\u00e3o usados para verificar se o produto desenvolvido est\u00e1 de acordo com o que foi estabelecido nos requisitos. Desse modo os testes de aceita\u00e7\u00e3o est\u00e3o ligadas as funcionalidades do sistema, onde entradas podem ser simuladas e o comportamento de sa\u00edda pode ser observada, esse comportamento deve ser compat\u00edvel com o temos previamente definidos (requisitos). Testes de aceita\u00e7\u00e3o visam testar o sistema do ponto de vista do usu\u00e1rio, de modo que s\u00e3o menos suscet\u00edveis a altera\u00e7\u00f5es. Como o sistema \u00e9 testado com todos os componentes interligados e configurados, inclusive bancos de dados e gerenciadores de filas, h\u00e1 garantias de que cada servi\u00e7o oferecido esteja funcionando.","title":"Teste de aceita\u00e7\u00e3o"},{"location":"agil/xp/#integracao-continua","text":"Integra\u00e7\u00e3o cont\u00ednua consiste em integrar o trabalho diversas vezes ao dia, ao inv\u00e9s de uma \u00fanica vez, assegurando que a base de c\u00f3digo permane\u00e7a consistente ao final de cada integra\u00e7\u00e3o. O objetivo principal de utilizar a integra\u00e7\u00e3o cont\u00ednua \u00e9 verificar se as altera\u00e7\u00f5es ou novas funcionalidades n\u00e3o criaram novos defeitos no projeto j\u00e1 existente. Esse conceito de integra\u00e7\u00e3o cont\u00ednua est\u00e1 atrelado \u00e0 aplica\u00e7\u00e3o de controle de versionamento, geralmente feito com o uso de alguma ferramenta, como o github. O controle de versionamento permite restaurar vers\u00f5es anteriores do sistema, comparar c\u00f3digos, gerenciar altera\u00e7\u00f5es, entre outros, e \u00e9 utilizado por equipes de desenvolvimento que compartilham mesmo c\u00f3digo e projeto. O controle de vers\u00e3o funcionar\u00e1 de forma b\u00e1sica da seguinte forma: O desenvolvedor faz o seu c\u00f3digo, efetua um build (compilar, preparar o execut\u00e1vel, rodar os testes automatizados, etc) antes de integrar seu c\u00f3digo com a base principal; Ap\u00f3s realizar o build , o sistema deve ser integrado a base do sistema de controle de vers\u00e3o atrav\u00e9s de sincroniza\u00e7\u00e3o; Este processo deve ser feito frequentemente, evitando-se assim o ac\u00famulo de codifica\u00e7\u00e3o para a integra\u00e7\u00e3o ao reposit\u00f3rio. Algumas metodologias ditam que o desenvolvedor s\u00f3 pode considerar como pronto o trabalho quando o trabalho estiver sincronizado e ent\u00e3o o desenvolvedor realizar um build na m\u00e1quina de integra\u00e7\u00e3o e ap\u00f3s todos os testes serem executados com sucesso. Na integra\u00e7\u00e3o cont\u00ednua o processo de build integrado deve ser feito constantemente, sendo sincronizado sempre que poss\u00edvel, evitando o ac\u00famulo de c\u00f3digos e de testes. Isto porque \u00e9 mais f\u00e1cil encontrar erros em pequenas integra\u00e7\u00f5es do que em uma integra\u00e7\u00e3o grande. Nesse contexto de c\u00f3digo compartilhado e versionamento centralizado por uma ferramenta, a integra\u00e7\u00e3o cont\u00ednua, ou seja, a comunica\u00e7\u00e3o entre as partes que cada desenvolvedor construiu, permite que conflitos de vers\u00e3o sejam resolvidos mais r\u00e1pido, desde que a integra\u00e7\u00e3o ocorra continuamente. A chave para uma boa integra\u00e7\u00e3o, como visto anteriormente, \u00e9 um ambiente de controle de vers\u00e3o centralizado, builds e testes automatizados. Essa pr\u00e1tica reduz erros e riscos cometidos pela equipe, pois como o sistema \u00e9 integrado cont\u00ednua e rapidamente, os erros tamb\u00e9m s\u00e3o detectados na mesma velocidade.","title":"Integra\u00e7\u00e3o Cont\u00ednua"},{"location":"agil/xp/#referencias","text":"Desenvolvimento \u00c1gil Desenvolvimento XP Integra\u00e7\u00e3o Cont\u00ednua Integra\u00e7\u00e3o Cont\u00ednua","title":"Refer\u00eancias"},{"location":"eps/","text":"EPS - Engenharia de Produto de Software Bem vindo a EPS O plano de Ensino na disciplina pode ser encontrado aqui . O que \u00e9 projeto? De acordo com o PMBOK: \u201cUm projeto \u00e9 um esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado exclusivo. Os projetos e as opera\u00e7\u00f5es diferem, principalmente, no fato de que os projetos s\u00e3o tempor\u00e1rios e exclusivos, enquanto as opera\u00e7\u00f5es s\u00e3o cont\u00ednuas e repetitivas.\u201d Segundo a ABNT, na norma t\u00e9cnica NBR 10006, Projeto \u00e9 \u201cProcesso \u00fanico, consistindo de um grupo de atividades coordenadas e controladas com datas para in\u00edcio e t\u00e9rmino, empreendido para alcance de um objetivo conforme requisitos espec\u00edficos, incluindo limita\u00e7\u00f5es de tempo, custo e recursos.\u201d De acordo com o Project Management Institute (PMBOK, 2013), Projeto \u00e9 \u201cUm esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado \u00fanico.\u201d Em resumo, projeto \u00e9 um evento que possui um in\u00edcio, meio e um fim bem definidos. O que o diferencia de uma opera\u00e7\u00e3o, que \u00e9 uma tarefa do dia a dia e n\u00e3o se tem o conhecimento de quando ela n\u00e3o mais ser\u00e1 necess\u00e1ria, algo rotineiro. Segundo Pressman, para que um projeto de software seja bem sucedido, \u00e9 necess\u00e1rio que alguns par\u00e2metros sejam corretamente analisados, como por exemplo, o escopo do software, os riscos envolvidos, os recursos necess\u00e1rios, as tarefas a serem realizadas, os indicadores a serem acompanhados, os esfor\u00e7os e custos aplicados e a sistem\u00e1tica a ser seguida. A an\u00e1lise de todos estes par\u00e2metros seria a fun\u00e7\u00e3o t\u00edpica do gerenciamento de projetos, qual, em geral, se inicia antes do trabalho t\u00e9cnico e prossegue \u00e0 medida que a entrega do software vai se concretizando. Projeto busca atingir um objetivo claro, sendo conduzido por pessoas e possuindo par\u00e2metros bem definidos de tempo, custo, recursos envolvidos e qualidade. PMBOK Na defini\u00e7\u00e3o do Guia PMBOK\u00ae (2013), gerenciamento de projetos \u00e9 \u201ca aplica\u00e7\u00e3o de conhecimentos, habilidades, ferramentas e t\u00e9cnicas \u00e0s atividades do projeto, fim de atender os requisitos das partes interessadas\u201d. Para Vargas (2009) \u201co gerenciamento de projetos pode ser aplicado a qualquer situa\u00e7\u00e3o onde exista um empreendimento que foge ao que \u00e9 fixo e rotineiro na empresa (ad hoc)\u201d. Satisfazer ou exceder as necessidades envolve equilibrar as v\u00e1rias demandas concorrentes em rela\u00e7\u00e3o ao: * Escopo, tempo, custo e qualidade; * Partes interessadas com necessidades e expectativas diferenciadas; e * Requisitos identificados (necessidades) e requisitos n\u00e3o identificados (expectativas). Para cobrir todas as \u00e1reas que fazem parte da ger\u00eancia de projetos o Guia PMBOK\u00ae dividiu-as em grupos de processos, conforme a figura a seguir. Caracter\u00edsticas de um projeto: Temporariedade Individualidade Empreendimento n\u00e3o repetitivo Sequ\u00eancia clara e l\u00f3gica In\u00edcio, meio e fim Elabora\u00e7\u00e3o progressiva Qual o papel do gerente de projeto? A fun\u00e7\u00e3o de um gerente de projetos \u00e9 planejar, controlar e executar projetos que podem ter um tempo determinado, com uma data para come\u00e7ar e acabar, ou que podem ser a longo prazo, como o objetivo de neg\u00f3cio de uma empresa, por exemplo. Durante o andamento de um projeto, esse profissional \u00e9 respons\u00e1vel por atribuir pap\u00e9is, tarefas, acompanhar e documentar o andamento da equipe por meio de ferramentas e t\u00e9cnicas apuradas, administrar investimentos e integrar as pessoas para trabalharem juntas por um s\u00f3 objetivo. Al\u00e9m de monitorar poss\u00edveis riscos e estar sempre preparado para mudan\u00e7as. O que gerentes de projetos bem sucedidos fazem? A partir do seguinte texto: What Successful Project Managers Do Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. Quais s\u00e3o os principais motivos do fracasso de projetos? Vi\u00e9s: otimismo, custos afundados, confirma\u00e7\u00e3o/in\u00e9rcia. Pouco ou nenhum planejamento. N\u00e3o h\u00e1 li\u00e7\u00f5es aprendidas de projetos passados. Falta de treinamento em ger\u00eancia de projeto. Falta de treino de novas tecnologias. Falta de lideran\u00e7a ou comprometimento dos Stakeholders. Mudan\u00e7a no modelo de gest\u00e3o Da gest\u00e3o tradicional (PMBok) para gest\u00e3o \u00e1gil - baseada na leitura - https://hbr.org/2016/05/embracing-agile","title":"Sobre"},{"location":"eps/#eps-engenharia-de-produto-de-software","text":"","title":"EPS - Engenharia de Produto de Software"},{"location":"eps/#bem-vindo-a-eps","text":"O plano de Ensino na disciplina pode ser encontrado aqui .","title":"Bem vindo a EPS"},{"location":"eps/#o-que-e-projeto","text":"De acordo com o PMBOK: \u201cUm projeto \u00e9 um esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado exclusivo. Os projetos e as opera\u00e7\u00f5es diferem, principalmente, no fato de que os projetos s\u00e3o tempor\u00e1rios e exclusivos, enquanto as opera\u00e7\u00f5es s\u00e3o cont\u00ednuas e repetitivas.\u201d Segundo a ABNT, na norma t\u00e9cnica NBR 10006, Projeto \u00e9 \u201cProcesso \u00fanico, consistindo de um grupo de atividades coordenadas e controladas com datas para in\u00edcio e t\u00e9rmino, empreendido para alcance de um objetivo conforme requisitos espec\u00edficos, incluindo limita\u00e7\u00f5es de tempo, custo e recursos.\u201d De acordo com o Project Management Institute (PMBOK, 2013), Projeto \u00e9 \u201cUm esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado \u00fanico.\u201d Em resumo, projeto \u00e9 um evento que possui um in\u00edcio, meio e um fim bem definidos. O que o diferencia de uma opera\u00e7\u00e3o, que \u00e9 uma tarefa do dia a dia e n\u00e3o se tem o conhecimento de quando ela n\u00e3o mais ser\u00e1 necess\u00e1ria, algo rotineiro. Segundo Pressman, para que um projeto de software seja bem sucedido, \u00e9 necess\u00e1rio que alguns par\u00e2metros sejam corretamente analisados, como por exemplo, o escopo do software, os riscos envolvidos, os recursos necess\u00e1rios, as tarefas a serem realizadas, os indicadores a serem acompanhados, os esfor\u00e7os e custos aplicados e a sistem\u00e1tica a ser seguida. A an\u00e1lise de todos estes par\u00e2metros seria a fun\u00e7\u00e3o t\u00edpica do gerenciamento de projetos, qual, em geral, se inicia antes do trabalho t\u00e9cnico e prossegue \u00e0 medida que a entrega do software vai se concretizando. Projeto busca atingir um objetivo claro, sendo conduzido por pessoas e possuindo par\u00e2metros bem definidos de tempo, custo, recursos envolvidos e qualidade.","title":"O que \u00e9 projeto?"},{"location":"eps/#pmbok","text":"Na defini\u00e7\u00e3o do Guia PMBOK\u00ae (2013), gerenciamento de projetos \u00e9 \u201ca aplica\u00e7\u00e3o de conhecimentos, habilidades, ferramentas e t\u00e9cnicas \u00e0s atividades do projeto, fim de atender os requisitos das partes interessadas\u201d. Para Vargas (2009) \u201co gerenciamento de projetos pode ser aplicado a qualquer situa\u00e7\u00e3o onde exista um empreendimento que foge ao que \u00e9 fixo e rotineiro na empresa (ad hoc)\u201d. Satisfazer ou exceder as necessidades envolve equilibrar as v\u00e1rias demandas concorrentes em rela\u00e7\u00e3o ao: * Escopo, tempo, custo e qualidade; * Partes interessadas com necessidades e expectativas diferenciadas; e * Requisitos identificados (necessidades) e requisitos n\u00e3o identificados (expectativas). Para cobrir todas as \u00e1reas que fazem parte da ger\u00eancia de projetos o Guia PMBOK\u00ae dividiu-as em grupos de processos, conforme a figura a seguir. Caracter\u00edsticas de um projeto: Temporariedade Individualidade Empreendimento n\u00e3o repetitivo Sequ\u00eancia clara e l\u00f3gica In\u00edcio, meio e fim Elabora\u00e7\u00e3o progressiva","title":"PMBOK"},{"location":"eps/#qual-o-papel-do-gerente-de-projeto","text":"A fun\u00e7\u00e3o de um gerente de projetos \u00e9 planejar, controlar e executar projetos que podem ter um tempo determinado, com uma data para come\u00e7ar e acabar, ou que podem ser a longo prazo, como o objetivo de neg\u00f3cio de uma empresa, por exemplo. Durante o andamento de um projeto, esse profissional \u00e9 respons\u00e1vel por atribuir pap\u00e9is, tarefas, acompanhar e documentar o andamento da equipe por meio de ferramentas e t\u00e9cnicas apuradas, administrar investimentos e integrar as pessoas para trabalharem juntas por um s\u00f3 objetivo. Al\u00e9m de monitorar poss\u00edveis riscos e estar sempre preparado para mudan\u00e7as.","title":"Qual o papel do gerente de projeto?"},{"location":"eps/#o-que-gerentes-de-projetos-bem-sucedidos-fazem","text":"A partir do seguinte texto: What Successful Project Managers Do Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"O que gerentes de projetos bem sucedidos fazem?"},{"location":"eps/#quais-sao-os-principais-motivos-do-fracasso-de-projetos","text":"Vi\u00e9s: otimismo, custos afundados, confirma\u00e7\u00e3o/in\u00e9rcia. Pouco ou nenhum planejamento. N\u00e3o h\u00e1 li\u00e7\u00f5es aprendidas de projetos passados. Falta de treinamento em ger\u00eancia de projeto. Falta de treino de novas tecnologias. Falta de lideran\u00e7a ou comprometimento dos Stakeholders.","title":"Quais s\u00e3o os principais motivos do fracasso de projetos?"},{"location":"eps/#mudanca-no-modelo-de-gestao","text":"Da gest\u00e3o tradicional (PMBok) para gest\u00e3o \u00e1gil - baseada na leitura - https://hbr.org/2016/05/embracing-agile","title":"Mudan\u00e7a no modelo de gest\u00e3o"},{"location":"mds/","text":"MDS - Metodologia de Desenvolvimento de Software Bem vindo a MDS 1. O que \u00e9 Processo de Desenvolvimento de Software Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas. 2. O que \u00e9 modelo de processo de software \u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens. 3. Fases do ciclo de vida de software Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa. 3.1 Objetivos de cada fase do ciclo de vida de software Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores. 4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. 5. Refer\u00eancias Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"Sobre"},{"location":"mds/#mds-metodologia-de-desenvolvimento-de-software","text":"","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/#bem-vindo-a-mds","text":"","title":"Bem vindo a MDS"},{"location":"mds/#1-o-que-e-processo-de-desenvolvimento-de-software","text":"Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas.","title":"1. O que \u00e9 Processo de Desenvolvimento de Software"},{"location":"mds/#2-o-que-e-modelo-de-processo-de-software","text":"\u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens.","title":"2. O que \u00e9 modelo de processo de software"},{"location":"mds/#3-fases-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa.","title":"3. Fases do ciclo de vida de software"},{"location":"mds/#31-objetivos-de-cada-fase-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores.","title":"3.1 Objetivos de cada fase do ciclo de vida de software"},{"location":"mds/#4-estudo-de-caso-da-influencia-do-modelo-de-processo-no-sucesso-de-um-projeto","text":"Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto"},{"location":"mds/#5-referencias","text":"Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"5. Refer\u00eancias"},{"location":"mds/notas/","text":"MDS - Metodologia de Desenvolvimento de Software Bem vindo a MDS 1. O que \u00e9 Processo de Desenvolvimento de Software Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas. 2. O que \u00e9 modelo de processo de software \u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens. 3. Fases do ciclo de vida de software Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa. 3.1 Objetivos de cada fase do ciclo de vida de software Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores. 4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. 5. Refer\u00eancias Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/notas/#mds-metodologia-de-desenvolvimento-de-software","text":"","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/notas/#bem-vindo-a-mds","text":"","title":"Bem vindo a MDS"},{"location":"mds/notas/#1-o-que-e-processo-de-desenvolvimento-de-software","text":"Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas.","title":"1. O que \u00e9 Processo de Desenvolvimento de Software"},{"location":"mds/notas/#2-o-que-e-modelo-de-processo-de-software","text":"\u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens.","title":"2. O que \u00e9 modelo de processo de software"},{"location":"mds/notas/#3-fases-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa.","title":"3. Fases do ciclo de vida de software"},{"location":"mds/notas/#31-objetivos-de-cada-fase-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores.","title":"3.1 Objetivos de cada fase do ciclo de vida de software"},{"location":"mds/notas/#4-estudo-de-caso-da-influencia-do-modelo-de-processo-no-sucesso-de-um-projeto","text":"Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto"},{"location":"mds/notas/#5-referencias","text":"Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"5. Refer\u00eancias"}]}