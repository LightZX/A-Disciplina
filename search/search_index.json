{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Disciplina Reposit\u00f3rio com o conte\u00fado das disciplinas GPP e MDS do curso Engenharia de Software da Universidade de Bras\u00edlia No reposit\u00f3rio encontra todo o material did\u00e1tico disponibilizado para a disciplina. \u201cThe best way to find out if you can trust somebody is to trust them.\u201d Ernest Hemingway Trust is the bedrock of all effective teams. When it exists, team members speak freely, don\u2019t second guess each other and formal hierarchy fades into the distance. Motiva\u00e7\u00e3o Um pouco da Metodologia Estrutura da Disciplina Motiva\u00e7\u00e3o Para o projeto multidisciplinar foi necess\u00e1rio a integra\u00e7\u00e3o entre os estudantes da disciplina de GPP e MDS . Gest\u00e3o de Portf\u00f3lios e Projetos de Software \u00e9 uma disciplina que visa dar ao estudante uma gama de conhecimentos e t\u00e9cnicas, com o intuito de permitir a boa gest\u00e3o estrat\u00e9gica de projetos de software . Isso transpassa a gest\u00e3o de escopo, tempo, custos, qualidade e diversos outros contextos do projeto. M\u00e9todos de Desenvolvimento de Software , \u00e9 uma disciplina que trabalha no estudante conhecimentos relativos a diferentes modelos de ciclo de vida para um projeto de software . Faz com que o estudante seja estimulado a compreender os diferentes aspectos de cada modelo, identificando suas caracter\u00edsticas e quando usar um em detrimento de outro. Sendo assim, o projeto visa utilizar ambas as disciplinas com o intuito de produzir um software , onde os estudantes s\u00e3o estimulados a utilizar n\u00e3o apenas o conhecimento adquirido nas disciplinas, mas em toda a sua caminhada pela faculdade at\u00e9 o momento. Um Pouco da Metodologia Os estudantes se dividem em grupos, mesclando estudantes que estejam cursando ambas as disciplinas. Cada grupo seleciona um tema e deve chegar ao fim do semestre com um software . A produ\u00e7\u00e3o desse software \u00e9 acompanhada pelo professor e por uma equipe de monitores, afim de auxiliar os grupos. Outro ponto importante \u00e9 que durante o desenvolvimento dos projetos de cada grupo, em um dado momento, o modelo de produ\u00e7\u00e3o de software deve ser alterado. Os grupos iniciam a produ\u00e7\u00e3o utilizando metodologias tradicionais (PMBOK/RUP) e, na metade do semestre, os modelos metodol\u00f3gicos de desenvolvimento a serem adotados passam a ser os \u00e1geis (SCRUM/XP). Dessa forma, o estudante tem a possibilidade de vivenciar ambas as metodologias. Estrutura do Curso Etapas do curso","title":"Disciplina"},{"location":"#disciplina","text":"Reposit\u00f3rio com o conte\u00fado das disciplinas GPP e MDS do curso Engenharia de Software da Universidade de Bras\u00edlia No reposit\u00f3rio encontra todo o material did\u00e1tico disponibilizado para a disciplina.","title":"Disciplina"},{"location":"#the-best-way-to-find-out-if-you-can-trust-somebody-is-to-trust-them-ernest-hemingway","text":"Trust is the bedrock of all effective teams. When it exists, team members speak freely, don\u2019t second guess each other and formal hierarchy fades into the distance. Motiva\u00e7\u00e3o Um pouco da Metodologia Estrutura da Disciplina","title":"\u201cThe best way to find out if you can trust somebody is to trust them.\u201d Ernest Hemingway"},{"location":"#motivacao","text":"Para o projeto multidisciplinar foi necess\u00e1rio a integra\u00e7\u00e3o entre os estudantes da disciplina de GPP e MDS . Gest\u00e3o de Portf\u00f3lios e Projetos de Software \u00e9 uma disciplina que visa dar ao estudante uma gama de conhecimentos e t\u00e9cnicas, com o intuito de permitir a boa gest\u00e3o estrat\u00e9gica de projetos de software . Isso transpassa a gest\u00e3o de escopo, tempo, custos, qualidade e diversos outros contextos do projeto. M\u00e9todos de Desenvolvimento de Software , \u00e9 uma disciplina que trabalha no estudante conhecimentos relativos a diferentes modelos de ciclo de vida para um projeto de software . Faz com que o estudante seja estimulado a compreender os diferentes aspectos de cada modelo, identificando suas caracter\u00edsticas e quando usar um em detrimento de outro. Sendo assim, o projeto visa utilizar ambas as disciplinas com o intuito de produzir um software , onde os estudantes s\u00e3o estimulados a utilizar n\u00e3o apenas o conhecimento adquirido nas disciplinas, mas em toda a sua caminhada pela faculdade at\u00e9 o momento.","title":"Motiva\u00e7\u00e3o"},{"location":"#um-pouco-da-metodologia","text":"Os estudantes se dividem em grupos, mesclando estudantes que estejam cursando ambas as disciplinas. Cada grupo seleciona um tema e deve chegar ao fim do semestre com um software . A produ\u00e7\u00e3o desse software \u00e9 acompanhada pelo professor e por uma equipe de monitores, afim de auxiliar os grupos. Outro ponto importante \u00e9 que durante o desenvolvimento dos projetos de cada grupo, em um dado momento, o modelo de produ\u00e7\u00e3o de software deve ser alterado. Os grupos iniciam a produ\u00e7\u00e3o utilizando metodologias tradicionais (PMBOK/RUP) e, na metade do semestre, os modelos metodol\u00f3gicos de desenvolvimento a serem adotados passam a ser os \u00e1geis (SCRUM/XP). Dessa forma, o estudante tem a possibilidade de vivenciar ambas as metodologias.","title":"Um Pouco da Metodologia"},{"location":"#estrutura-do-curso","text":"Etapas do curso","title":"Estrutura do Curso"},{"location":"mds/","text":"MDS - Metodologia de Desenvolvimento de Software Bem vindo a MDS 1. O que \u00e9 Processo de Desenvolvimento de Software Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas. 2. O que \u00e9 modelo de processo de software \u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens. 3. Fases do ciclo de vida de software Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa. 3.1 Objetivos de cada fase do ciclo de vida de software Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores. 4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. 5. Refer\u00eancias Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/#mds-metodologia-de-desenvolvimento-de-software","text":"","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/#bem-vindo-a-mds","text":"","title":"Bem vindo a MDS"},{"location":"mds/#1-o-que-e-processo-de-desenvolvimento-de-software","text":"Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas.","title":"1. O que \u00e9 Processo de Desenvolvimento de Software"},{"location":"mds/#2-o-que-e-modelo-de-processo-de-software","text":"\u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens.","title":"2. O que \u00e9 modelo de processo de software"},{"location":"mds/#3-fases-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa.","title":"3. Fases do ciclo de vida de software"},{"location":"mds/#31-objetivos-de-cada-fase-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores.","title":"3.1 Objetivos de cada fase do ciclo de vida de software"},{"location":"mds/#4-estudo-de-caso-da-influencia-do-modelo-de-processo-no-sucesso-de-um-projeto","text":"Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto"},{"location":"mds/#5-referencias","text":"Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"5. Refer\u00eancias"},{"location":"agil/","text":"M\u00e9todos \u00c1geis Scrum Extreming Programing Indicadores \u00c1geis Como pontuar o backlog Como melhorar a comunica\u00e7\u00e3o","title":"Sobre"},{"location":"agil/#metodos-ageis","text":"","title":"M\u00e9todos \u00c1geis"},{"location":"agil/#scrum","text":"","title":"Scrum"},{"location":"agil/#extreming-programing","text":"","title":"Extreming Programing"},{"location":"agil/#indicadores-ageis","text":"","title":"Indicadores \u00c1geis"},{"location":"agil/#como-pontuar-o-backlog","text":"","title":"Como pontuar o backlog"},{"location":"agil/#como-melhorar-a-comunicacao","text":"","title":"Como melhorar a comunica\u00e7\u00e3o"},{"location":"agil/comunicacao/","text":"Comunica\u00e7\u00e3o Se algum membro est\u00e1 contribuindo negativamente para o andamento do projeto, o Scrum Master n\u00e3o tem o poder de pun\u00ed-lo. Uma boa pr\u00e1tica \u00e9 evidenciar os problemas ocorridos, convencer o membro que sua contribui\u00e7\u00e3o poderia ser melhor para o projeto e ser sol\u00edcito para praticar as mudan\u00e7as necess\u00e1rias para uma melhoria na sua postura. O daily meeting \u00e9 definido pelo Scrum como o momento di\u00e1rio onde o time conversa sobre o que aconteceu no dia anterior, o que est\u00e1 acontecendo e quais os entraves para o andamento das atividades. \u00c9 preciso entender que essa defini\u00e7\u00e3o n\u00e3o pode ser encarada como os 15 minutos destinados \u00e0 conversa\u00e7\u00e3o em 8 horas de trabalho di\u00e1rio. O daily meeting n\u00e3o pode ser o \u00fanico momento onde as pessoas conversam durante um dia de trabalho. Esse momento deve ser encarado como o momento onde toda equipe compartilha o estado atual de um determinado projeto. Se os problemas forem detectados antes da hora marcada para o daily meeting, \u00e9 fortemente aconselh\u00e1vel que eles sejam comunicados antes da reuni\u00e3o di\u00e1ria, para que medidas corretivas possam ser imediatamente tomadas. No momento da reuni\u00e3o di\u00e1ria esses problemas, previamente identificados, devem ser apenas tornados p\u00fablico para o restante do time e se j\u00e1 tiverem sido resolvidos, um breve relato da solu\u00e7\u00e3o deve ser comentado. Uma boa pr\u00e1tica que pode ser adotada pelo Scrum Master \u00e9, no \u00ednicio de um dia de trabalho, conversar informalmente com cada membro do time na tentativa de identificar se h\u00e1 algum impedimento identificado. Problemas que s\u00e3o imediatamente identificados e tratados, n\u00e3o importando a sua complexidade, n\u00e3o comprometem o bom andamento dos sprints. Eles s\u00f3 passam a ser realmente problemas, quando h\u00e1 um retardo para sua comunica\u00e7\u00e3o ap\u00f3s terem sido identificados. No Scrum existe um momento especial para que os acertos sejam evidenciados e os erros sejam discutidos para que possamos tirar boas li\u00e7\u00f5es para o futuro. Esse momento \u00e9 a Retrospectiva de Sprint. As retrospectivas inerentemente favorecem a Comunica\u00e7\u00e3o, proporcionando uma maior intera\u00e7\u00e3o entre os membros do time. Algumas premissas devem ser consideradas para que o processo de comunica\u00e7\u00e3o ocorra de forma natural durante esses momentos. A primeira premissa \u00e9 que a retrospectiva n\u00e3o \u00e9 um momento para eleger culpados por eventuais falhas ocorridas. Uma boa pr\u00e1tica \u00e9 evitar citar nomes durante esse momento, seja ao relatar casos de sucesso ou ao relatar problemas. Tudo que aconteceu durante o sprint deve ser responsabilidade do time como um todo, n\u00e3o importando as individualidades de cada integrante. Dailys As equipes ainda veem no ScrumMaster um papel gerencial e tendem a se reportarem diretamente a este papel durante a reuni\u00e3o di\u00e1ria, quando, na verdade, a equipe deveria somente ter foco no que foi feito desde a reuni\u00e3o anterior e no que ser\u00e1 feito a seguir, sendo uma cerim\u00f4nia de sincroniza\u00e7\u00e3o da equipe e para a equipe. Para evitar esta tend\u00eancia das equipes: Se voc\u00ea \u00e9 um ScrumMaster, n\u00e3o fa\u00e7a contato visual com quem estiver falando durante a reuni\u00e3o di\u00e1ria. N\u00e3o manter este contato visual, contribui para que os coment\u00e1rios n\u00e3o sejam status direcionados somente ao Scrum Master. O Scrum Master pode faltar ocasionalmente da reuni\u00e3o e deixar um membro da equipe como facilitador ou permitir que a pr\u00f3pria equipe se organize; Muitas equipes se re\u00fanem em um c\u00edrculo ou semi-c\u00edrculo. O Scrum Master poderia se posicionar fora dessa forma\u00e7\u00e3o; (ajuda a evitar o contato visual) O Scrum Master deve posicionar-se como um observador silencioso, informando a equipe que isso \u00e9 um exerc\u00edcio para lembr\u00e1-los de que est\u00e3o se auto-organizando e que a reuni\u00e3o di\u00e1ria do Scrum \u00e9 quase que exclusiva da equipe.","title":"Como melhorar a comunica\u00e7\u00e3o"},{"location":"agil/comunicacao/#comunicacao","text":"Se algum membro est\u00e1 contribuindo negativamente para o andamento do projeto, o Scrum Master n\u00e3o tem o poder de pun\u00ed-lo. Uma boa pr\u00e1tica \u00e9 evidenciar os problemas ocorridos, convencer o membro que sua contribui\u00e7\u00e3o poderia ser melhor para o projeto e ser sol\u00edcito para praticar as mudan\u00e7as necess\u00e1rias para uma melhoria na sua postura. O daily meeting \u00e9 definido pelo Scrum como o momento di\u00e1rio onde o time conversa sobre o que aconteceu no dia anterior, o que est\u00e1 acontecendo e quais os entraves para o andamento das atividades. \u00c9 preciso entender que essa defini\u00e7\u00e3o n\u00e3o pode ser encarada como os 15 minutos destinados \u00e0 conversa\u00e7\u00e3o em 8 horas de trabalho di\u00e1rio. O daily meeting n\u00e3o pode ser o \u00fanico momento onde as pessoas conversam durante um dia de trabalho. Esse momento deve ser encarado como o momento onde toda equipe compartilha o estado atual de um determinado projeto. Se os problemas forem detectados antes da hora marcada para o daily meeting, \u00e9 fortemente aconselh\u00e1vel que eles sejam comunicados antes da reuni\u00e3o di\u00e1ria, para que medidas corretivas possam ser imediatamente tomadas. No momento da reuni\u00e3o di\u00e1ria esses problemas, previamente identificados, devem ser apenas tornados p\u00fablico para o restante do time e se j\u00e1 tiverem sido resolvidos, um breve relato da solu\u00e7\u00e3o deve ser comentado. Uma boa pr\u00e1tica que pode ser adotada pelo Scrum Master \u00e9, no \u00ednicio de um dia de trabalho, conversar informalmente com cada membro do time na tentativa de identificar se h\u00e1 algum impedimento identificado. Problemas que s\u00e3o imediatamente identificados e tratados, n\u00e3o importando a sua complexidade, n\u00e3o comprometem o bom andamento dos sprints. Eles s\u00f3 passam a ser realmente problemas, quando h\u00e1 um retardo para sua comunica\u00e7\u00e3o ap\u00f3s terem sido identificados. No Scrum existe um momento especial para que os acertos sejam evidenciados e os erros sejam discutidos para que possamos tirar boas li\u00e7\u00f5es para o futuro. Esse momento \u00e9 a Retrospectiva de Sprint. As retrospectivas inerentemente favorecem a Comunica\u00e7\u00e3o, proporcionando uma maior intera\u00e7\u00e3o entre os membros do time. Algumas premissas devem ser consideradas para que o processo de comunica\u00e7\u00e3o ocorra de forma natural durante esses momentos. A primeira premissa \u00e9 que a retrospectiva n\u00e3o \u00e9 um momento para eleger culpados por eventuais falhas ocorridas. Uma boa pr\u00e1tica \u00e9 evitar citar nomes durante esse momento, seja ao relatar casos de sucesso ou ao relatar problemas. Tudo que aconteceu durante o sprint deve ser responsabilidade do time como um todo, n\u00e3o importando as individualidades de cada integrante.","title":"Comunica\u00e7\u00e3o"},{"location":"agil/comunicacao/#dailys","text":"As equipes ainda veem no ScrumMaster um papel gerencial e tendem a se reportarem diretamente a este papel durante a reuni\u00e3o di\u00e1ria, quando, na verdade, a equipe deveria somente ter foco no que foi feito desde a reuni\u00e3o anterior e no que ser\u00e1 feito a seguir, sendo uma cerim\u00f4nia de sincroniza\u00e7\u00e3o da equipe e para a equipe. Para evitar esta tend\u00eancia das equipes: Se voc\u00ea \u00e9 um ScrumMaster, n\u00e3o fa\u00e7a contato visual com quem estiver falando durante a reuni\u00e3o di\u00e1ria. N\u00e3o manter este contato visual, contribui para que os coment\u00e1rios n\u00e3o sejam status direcionados somente ao Scrum Master. O Scrum Master pode faltar ocasionalmente da reuni\u00e3o e deixar um membro da equipe como facilitador ou permitir que a pr\u00f3pria equipe se organize; Muitas equipes se re\u00fanem em um c\u00edrculo ou semi-c\u00edrculo. O Scrum Master poderia se posicionar fora dessa forma\u00e7\u00e3o; (ajuda a evitar o contato visual) O Scrum Master deve posicionar-se como um observador silencioso, informando a equipe que isso \u00e9 um exerc\u00edcio para lembr\u00e1-los de que est\u00e3o se auto-organizando e que a reuni\u00e3o di\u00e1ria do Scrum \u00e9 quase que exclusiva da equipe.","title":"Dailys"},{"location":"agil/indicadores/","text":"Indicadores de Qualidade do Processo Fechamento da Sprint O fechamento da sprint indica se as hist\u00f3rias planejadas para aquela sprint foram conclu\u00eddas ou n\u00e3o. Esse indicador auxilia no acompanhamento do progresso do valor agregado do projeto em rela\u00e7\u00e3o ao que foi planejado at\u00e9 ent\u00e3o. O melhor indicador poss\u00edvel \u00e9 que todas as hist\u00f3rias planejadas estejam conclu\u00eddas, caso contr\u00e1rio, \u00e9 necess\u00e1rio adicion\u00e1-la no planejamento de futuras sprint se poss\u00edvel. Burndown O burndown indica a frequ\u00eancia de trabalho da equipe durante a sprint . Na coluna vertical, \u00e9 indicado o n\u00famero total de pontos planejados para aquela sprint e na coluna horizontal as datas contidas no intervalo da dura\u00e7\u00e3o da sprint . A linha azul indica os pontos planejados, \u00e9 decrescente de forma constante e indica que idealmente os pontos devem diminuir gradativamente e constantemente ao passar da sprint . A linha vermelha representa o progresso real da equipe, ou seja, a quantidade de pontos conclu\u00eddo e o per\u00edodo da conclus\u00e3o. Esse indicador auxilia a equipe \u00e0 observar a const\u00e2ncia dos pontos conclu\u00eddos e portanto melhorar nas pr\u00f3ximas sprints fazendo com que o sistema receba um incremento com uma alta frequ\u00eancia. Velocity O velocity indica a quantidade de pontos que a equipe consegue concluir em uma sprint . O gr\u00e1fico possui uma coluna azul que indica a quantidade de pontos planejados para aquela sprint e a coluna vermelha que indica a quantidade de pontos conclu\u00eddos naquela sprint . O valor do velocity (em verde) \u00e9 calculado a partir da divis\u00e3o entre o n\u00famero de pontos conclu\u00eddos at\u00e9 aquela sprint e o n\u00famero de semanas de desenvolvimento at\u00e9 aquela sprint. Portanto, este valor indica a m\u00e9dia de produtividade da equipe at\u00e9 a sprint indicada. Exemplo de um velocity : Quadro da Retrospectiva O quadro da retrospectiva geralmente possui tr\u00eas t\u00f3picos: Os pontos negativos em rela\u00e7\u00e3o a sprint realizada. Este indicador ajuda a identificar eventuais problemas no processo. Os pontos positivos em rela\u00e7\u00e3o a sprint realizada. Este indicador ajuda a identificar o que est\u00e1 correto e que deve continuar sendo realizado nas outras sprints no processo. As melhorias que s\u00e3o propostas pela equipe de forma a indicar solu\u00e7\u00f5es para os pontos negativos. Portanto, \u00e9 um indicador importante para o processo visando sempre aprimor\u00e1-lo para o melhor desenvolvimento do projeto. Era realizada no final de toda sprint atrav\u00e9s de uma reuni\u00e3o e auxiliava nas decis\u00f5es gerenciais acerca do processo das outras sprints . Quadro de Conhecimento O quadro de conhecimento indica o conhecimento de cada integrante da equipe em rela\u00e7\u00e3o \u00e0 alguma tecnologia utilizada no projeto. A partir desse quadro, devem ser definidas as duplas de pareamento de forma que a distribui\u00e7\u00e3o sempre possua o objetivo da melhor dissemina\u00e7\u00e3o de conhecimento poss\u00edvel dentro da equipe. \u00c9 esperado que os indicadores do quadro sempre evoluam durante as sprints indicando a evolu\u00e7\u00e3o do conhecimento dos integrantes da equipe. Quadro de Commits Um outro indicador que consegue nos trazer melhor ainda a progress\u00e3o do trabalho da equipe durante a sprint \u00e9 o quadro de commit . Com esse quadro \u00e9 poss\u00edvel se ter uma ideia bem melhor da divis\u00e3o do trabalho entre a semana, pois se tratando do contexto universit\u00e1rio da mat\u00e9ria de GPP-MDS se torna muito dif\u00edcil em detrimento de in\u00fameras raz\u00f5es conseguir manter um burndown aceit\u00e1vel. E com esse quadro de commits tudo fica mais transparente. Diferente do burndown o quadro de commits demonstra melhor o trabalho da equipe. Como pode ser visto no exemplo acima no come\u00e7o da semana houve um progresso consider\u00e1vel nas hist\u00f3rias como mostra o gr\u00e1fico de commits, mas pode-se notar que quinta e sexta houve uma queda nos commits por conta dos trabalhos de todos os membros da equipe. Dados esses que n\u00e3o conseguem ser observados no burndown dependendo da dificuldade das hist\u00f3rias. Indicadores de Qualidade de C\u00f3digo M\u00e9tricas As m\u00e9tricas s\u00e3o um indicador para a qualidade do c\u00f3digo. No final de toda sprint , elas devem ser analisadas e a partir dessa an\u00e1lise, serem definidos os pontos necess\u00e1rios para a refatora\u00e7\u00e3o. Exemplos de m\u00e9tricas: Afferent Connections per Class (ACC): Mede o n\u00edvel de acoplamento de uma classe atrav\u00e9s do n\u00famero de outras classes que fazem refer\u00eancia a ela, por meio da utiliza\u00e7\u00e3o de algum m\u00e9todo ou atributo. Average Cyclomatic Complexity per Method (ACCM): Complexidade ciclom\u00e1tica nada mais \u00e9 do que o n\u00famero de caminhos, independentes que um software pode seguir em sua execu\u00e7\u00e3o, calculado a,partir da representa\u00e7\u00e3o em grafo das estruturas de controle. Average Method Lines of Code (AMLOC): AMLOC representa a m\u00e9dia do n\u00famero de linhas dos m\u00e9todos de uma classe. Depth of Inheritance Tree (DIT): DIT \u00e9 uma m\u00e9trica que mede a profundidade que uma classe se encontra na \u00e1rvore de heran\u00e7a, e caso haja heran\u00e7a m\u00faltipla, DIT mede a dist\u00e2ncia m\u00e1xima at\u00e9 o n\u00f3 raiz da \u00e1rvore de heran\u00e7a. Number of Methods (NOM): NOM \u00e9 uma m\u00e9trica de tamanho que conta o n\u00famero de m\u00e9todos de uma classe. EVM BAC O custo total planejado consiste no calculo dos pontos totais planejados (PRP) multiplicado pelo custo do ponto. Valor Planejado (PV) e Custo Real (AC) O valor planejado (PV) fundamenta-se do calculo entre a Porcentagem planejada Completa (PPC) multiplicado pelo Custo Total Planejado (BAC). A cada sprint este valor ser\u00e1 diferente, indicando quanto que o projeto est\u00e1 custando do ponto de vista do planejamento. O Custo Real (AC) fundamenta-se do calculo entre Pontos Completos Reais (PCR) multiplicado pelo Custo Do Ponto. A cada sprint este valor ser\u00e1 diferente, indicando o quanto essa sprint est\u00e1 realmente valendo, do ponto de vista dos pontos completado na mesma. Valor Agregado (EV) Diferente do valor planejado e do custo real, o valor agregado se difere em cada sprint dependendo do desempenho da equipe na mesma. O valor agregado \u00e9 um indicador da produtividade da equipe refletida no custo, onde \u00e9 poss\u00edvel perceber se a equipe est\u00e1 fazendo as entregas conforme o planejado. Para o c\u00e1lculo do valor agregado, \u00e9 necess\u00e1rio saber a Porcentagem Conclu\u00edda na sprint (PPC) e o Valor Planejado (PV). PPC = PC / PP EV = PPC * PV Onde, PC = Pontos Conclu\u00eddos e PP = Pontos Planejados Varia\u00e7\u00e3o do Custo e Varia\u00e7\u00e3o do Prazo As varia\u00e7\u00f5es de custo (CV) e de prazo (SV) possuem valores iguais em todas as sprints por consequ\u00eancia de serem calculadas de acordo com o custo real e valor planejado, respectivamente. CV = EV - AC SV = EV - PV \u00cdndice de Desempenho de Custo (CPI) e \u00cdndice de Desempenho de Prazo (SPI) Assim como as varia\u00e7\u00f5es, os \u00edndices refletem a mesma caracter\u00edstica, onde seus valores s\u00e3o iguais nas sprints . A f\u00f3rmula para o c\u00e1lculo destes \u00edndices encontra-se abaixo: CV = EV / AC SV = EV / PV","title":"Indicadores"},{"location":"agil/indicadores/#indicadores-de-qualidade-do-processo","text":"","title":"Indicadores de Qualidade do Processo"},{"location":"agil/indicadores/#fechamento-da-sprint","text":"O fechamento da sprint indica se as hist\u00f3rias planejadas para aquela sprint foram conclu\u00eddas ou n\u00e3o. Esse indicador auxilia no acompanhamento do progresso do valor agregado do projeto em rela\u00e7\u00e3o ao que foi planejado at\u00e9 ent\u00e3o. O melhor indicador poss\u00edvel \u00e9 que todas as hist\u00f3rias planejadas estejam conclu\u00eddas, caso contr\u00e1rio, \u00e9 necess\u00e1rio adicion\u00e1-la no planejamento de futuras sprint se poss\u00edvel.","title":"Fechamento da Sprint"},{"location":"agil/indicadores/#burndown","text":"O burndown indica a frequ\u00eancia de trabalho da equipe durante a sprint . Na coluna vertical, \u00e9 indicado o n\u00famero total de pontos planejados para aquela sprint e na coluna horizontal as datas contidas no intervalo da dura\u00e7\u00e3o da sprint . A linha azul indica os pontos planejados, \u00e9 decrescente de forma constante e indica que idealmente os pontos devem diminuir gradativamente e constantemente ao passar da sprint . A linha vermelha representa o progresso real da equipe, ou seja, a quantidade de pontos conclu\u00eddo e o per\u00edodo da conclus\u00e3o. Esse indicador auxilia a equipe \u00e0 observar a const\u00e2ncia dos pontos conclu\u00eddos e portanto melhorar nas pr\u00f3ximas sprints fazendo com que o sistema receba um incremento com uma alta frequ\u00eancia.","title":"Burndown"},{"location":"agil/indicadores/#velocity","text":"O velocity indica a quantidade de pontos que a equipe consegue concluir em uma sprint . O gr\u00e1fico possui uma coluna azul que indica a quantidade de pontos planejados para aquela sprint e a coluna vermelha que indica a quantidade de pontos conclu\u00eddos naquela sprint . O valor do velocity (em verde) \u00e9 calculado a partir da divis\u00e3o entre o n\u00famero de pontos conclu\u00eddos at\u00e9 aquela sprint e o n\u00famero de semanas de desenvolvimento at\u00e9 aquela sprint. Portanto, este valor indica a m\u00e9dia de produtividade da equipe at\u00e9 a sprint indicada. Exemplo de um velocity :","title":"Velocity"},{"location":"agil/indicadores/#quadro-da-retrospectiva","text":"O quadro da retrospectiva geralmente possui tr\u00eas t\u00f3picos: Os pontos negativos em rela\u00e7\u00e3o a sprint realizada. Este indicador ajuda a identificar eventuais problemas no processo. Os pontos positivos em rela\u00e7\u00e3o a sprint realizada. Este indicador ajuda a identificar o que est\u00e1 correto e que deve continuar sendo realizado nas outras sprints no processo. As melhorias que s\u00e3o propostas pela equipe de forma a indicar solu\u00e7\u00f5es para os pontos negativos. Portanto, \u00e9 um indicador importante para o processo visando sempre aprimor\u00e1-lo para o melhor desenvolvimento do projeto. Era realizada no final de toda sprint atrav\u00e9s de uma reuni\u00e3o e auxiliava nas decis\u00f5es gerenciais acerca do processo das outras sprints .","title":"Quadro da Retrospectiva"},{"location":"agil/indicadores/#quadro-de-conhecimento","text":"O quadro de conhecimento indica o conhecimento de cada integrante da equipe em rela\u00e7\u00e3o \u00e0 alguma tecnologia utilizada no projeto. A partir desse quadro, devem ser definidas as duplas de pareamento de forma que a distribui\u00e7\u00e3o sempre possua o objetivo da melhor dissemina\u00e7\u00e3o de conhecimento poss\u00edvel dentro da equipe. \u00c9 esperado que os indicadores do quadro sempre evoluam durante as sprints indicando a evolu\u00e7\u00e3o do conhecimento dos integrantes da equipe.","title":"Quadro de Conhecimento"},{"location":"agil/indicadores/#quadro-de-commits","text":"Um outro indicador que consegue nos trazer melhor ainda a progress\u00e3o do trabalho da equipe durante a sprint \u00e9 o quadro de commit . Com esse quadro \u00e9 poss\u00edvel se ter uma ideia bem melhor da divis\u00e3o do trabalho entre a semana, pois se tratando do contexto universit\u00e1rio da mat\u00e9ria de GPP-MDS se torna muito dif\u00edcil em detrimento de in\u00fameras raz\u00f5es conseguir manter um burndown aceit\u00e1vel. E com esse quadro de commits tudo fica mais transparente. Diferente do burndown o quadro de commits demonstra melhor o trabalho da equipe. Como pode ser visto no exemplo acima no come\u00e7o da semana houve um progresso consider\u00e1vel nas hist\u00f3rias como mostra o gr\u00e1fico de commits, mas pode-se notar que quinta e sexta houve uma queda nos commits por conta dos trabalhos de todos os membros da equipe. Dados esses que n\u00e3o conseguem ser observados no burndown dependendo da dificuldade das hist\u00f3rias.","title":"Quadro de Commits"},{"location":"agil/indicadores/#indicadores-de-qualidade-de-codigo","text":"","title":"Indicadores de Qualidade de C\u00f3digo"},{"location":"agil/indicadores/#metricas","text":"As m\u00e9tricas s\u00e3o um indicador para a qualidade do c\u00f3digo. No final de toda sprint , elas devem ser analisadas e a partir dessa an\u00e1lise, serem definidos os pontos necess\u00e1rios para a refatora\u00e7\u00e3o. Exemplos de m\u00e9tricas: Afferent Connections per Class (ACC): Mede o n\u00edvel de acoplamento de uma classe atrav\u00e9s do n\u00famero de outras classes que fazem refer\u00eancia a ela, por meio da utiliza\u00e7\u00e3o de algum m\u00e9todo ou atributo. Average Cyclomatic Complexity per Method (ACCM): Complexidade ciclom\u00e1tica nada mais \u00e9 do que o n\u00famero de caminhos, independentes que um software pode seguir em sua execu\u00e7\u00e3o, calculado a,partir da representa\u00e7\u00e3o em grafo das estruturas de controle. Average Method Lines of Code (AMLOC): AMLOC representa a m\u00e9dia do n\u00famero de linhas dos m\u00e9todos de uma classe. Depth of Inheritance Tree (DIT): DIT \u00e9 uma m\u00e9trica que mede a profundidade que uma classe se encontra na \u00e1rvore de heran\u00e7a, e caso haja heran\u00e7a m\u00faltipla, DIT mede a dist\u00e2ncia m\u00e1xima at\u00e9 o n\u00f3 raiz da \u00e1rvore de heran\u00e7a. Number of Methods (NOM): NOM \u00e9 uma m\u00e9trica de tamanho que conta o n\u00famero de m\u00e9todos de uma classe.","title":"M\u00e9tricas"},{"location":"agil/indicadores/#evm","text":"","title":"EVM"},{"location":"agil/indicadores/#bac","text":"O custo total planejado consiste no calculo dos pontos totais planejados (PRP) multiplicado pelo custo do ponto.","title":"BAC"},{"location":"agil/indicadores/#valor-planejado-pv-e-custo-real-ac","text":"O valor planejado (PV) fundamenta-se do calculo entre a Porcentagem planejada Completa (PPC) multiplicado pelo Custo Total Planejado (BAC). A cada sprint este valor ser\u00e1 diferente, indicando quanto que o projeto est\u00e1 custando do ponto de vista do planejamento. O Custo Real (AC) fundamenta-se do calculo entre Pontos Completos Reais (PCR) multiplicado pelo Custo Do Ponto. A cada sprint este valor ser\u00e1 diferente, indicando o quanto essa sprint est\u00e1 realmente valendo, do ponto de vista dos pontos completado na mesma.","title":"Valor Planejado (PV) e Custo Real (AC)"},{"location":"agil/indicadores/#valor-agregado-ev","text":"Diferente do valor planejado e do custo real, o valor agregado se difere em cada sprint dependendo do desempenho da equipe na mesma. O valor agregado \u00e9 um indicador da produtividade da equipe refletida no custo, onde \u00e9 poss\u00edvel perceber se a equipe est\u00e1 fazendo as entregas conforme o planejado. Para o c\u00e1lculo do valor agregado, \u00e9 necess\u00e1rio saber a Porcentagem Conclu\u00edda na sprint (PPC) e o Valor Planejado (PV). PPC = PC / PP EV = PPC * PV Onde, PC = Pontos Conclu\u00eddos e PP = Pontos Planejados","title":"Valor Agregado (EV)"},{"location":"agil/indicadores/#variacao-do-custo-e-variacao-do-prazo","text":"As varia\u00e7\u00f5es de custo (CV) e de prazo (SV) possuem valores iguais em todas as sprints por consequ\u00eancia de serem calculadas de acordo com o custo real e valor planejado, respectivamente. CV = EV - AC SV = EV - PV","title":"Varia\u00e7\u00e3o do Custo e Varia\u00e7\u00e3o do Prazo"},{"location":"agil/indicadores/#indice-de-desempenho-de-custo-cpi-e-indice-de-desempenho-de-prazo-spi","text":"Assim como as varia\u00e7\u00f5es, os \u00edndices refletem a mesma caracter\u00edstica, onde seus valores s\u00e3o iguais nas sprints . A f\u00f3rmula para o c\u00e1lculo destes \u00edndices encontra-se abaixo: CV = EV / AC SV = EV / PV","title":"\u00cdndice de Desempenho de Custo (CPI) e \u00cdndice de Desempenho de Prazo (SPI)"},{"location":"agil/pontuacao/","text":"Defini\u00e7\u00e3o de pronto Ao se fechar o backlog inicial para a segunda Release, onde \u00e9 adotado as metodologias \u00e1geis, um passo muito importante para a equipe se alinhar acerca da pontua\u00e7\u00e3o das hist\u00f3ria \u00e9 definir o que \u00e9 uma hist\u00f3ria pronta, nessa defini\u00e7\u00e3o entram fatores principalmente em rela\u00e7\u00e3o \u00e0 m\u00e9tricas aceit\u00e1veis. Ap\u00f3s definir o que \u00e9 uma hist\u00f3ria pronta, \u00e9 poss\u00edvel seguir alguns passos para se conseguir pontuar todo esse backlog rapidamente e de maneira eficaz. Tenha em m\u00e3os todas as hist\u00f3rias de usu\u00e1rio que devem ser estimadas A primeira coisa a se fazer \u00e9 levantar todas as hist\u00f3rias que dever\u00e3o ser estimadas. Eu aconselho que elas estejam escritas em cart\u00f5es, assim ser\u00e1 mais f\u00e1cil trabalhar com elas. Voc\u00ea precisa considerar os \u00e9picos e temas (ou, qualquer outro n\u00edvel de rompimento) tamb\u00e9m, como eles s\u00e3o itens de alto n\u00edvel, normalmente se encontram na parte inferior do seu Product Backlog. Coloque todas as hist\u00f3rias em uma mesa Ap\u00f3s levantar todas as hist\u00f3rias que estavam estacionadas em seu Backlog, coloque elas em uma mesa para que possam ser movimentadas facilmente. A mesa \u00e9 legal, pois todos podem ficar em volta dela para discutir e confirmar a utilidade e prioridade de cada hist\u00f3ria de maneira mais f\u00e1cil e eficaz. Escolha qualquer hist\u00f3ria Escolha qualquer hist\u00f3ria para come\u00e7ar, fa\u00e7a a equipe estimar o esfor\u00e7o dela em \u201cpequena\u201d, \u201cm\u00e9dia\u201d ou \u201cgrande\u201d. Usar P, M ou G \u00e9 uma forma simples e r\u00e1pida para atribuir esfor\u00e7o em torno do trabalho nesse primeiro momento. Para atribuir peso, fa\u00e7a o seguinte: Se for uma grande hist\u00f3ria (ou seja, a equipe acredita que aquela hist\u00f3ria ir\u00e1 demandar um esfor\u00e7o grande) a coloque em uma extremidade da mesa, lado esquerdo, por exemplo; Se for uma pequena hist\u00f3ria coloque na outra extremidade da mesa; Se for uma hist\u00f3ria m\u00e9dia, coloque no meio. Estime por esfor\u00e7o relativo Agora pegue uma 2\u00b0 hist\u00f3ria e pergunte para a equipe se o esfor\u00e7o para faze-la \u00e9 mais ou menos o mesmo da hist\u00f3ria que est\u00e1 na mesa. Por exemplo, supondo que a 1\u00b0 hist\u00f3ria foi considerada de tamanho G (grande), pergunte a equipe se o esfor\u00e7o para implementar essa 2\u00b0 hist\u00f3ria selecionada \u00e9 similar a 1\u00b0 hist\u00f3ria que \u00e9 do tamanho G. Se a resposta for sim, a coloque sobre a mesa na mesma extremidade das cartas de esfor\u00e7o grande. Usando esta t\u00e9cnica, \u00e9 poss\u00edvel passar por 100 ou mais hist\u00f3rias de usu\u00e1rio dentro do Product Backlog e estimar o seu esfor\u00e7o relativo em menos de uma hora. Pontue as hist\u00f3rias Agora, se voc\u00ea prefere utilizar Story Points, siga o que vou lhe explicar agora! Pegue um grupo de hist\u00f3rias, pode ser o com esfor\u00e7o \u201cpequeno\u201d (P) que s\u00e3o, teoricamente, mais f\u00e1ceis. Junto com a equipe, comece dando a pontua\u00e7\u00e3o de 1 para todas daquele grupo, depois passe uma por uma e analise se a pontua\u00e7\u00e3o est\u00e1 coerente. Por exemplo, se voc\u00ea avaliou a primeira hist\u00f3ria e deu 2 pontos para ela, a segunda voc\u00ea ir\u00e1 comparar com essa, se voc\u00ea perceber que a hist\u00f3ria atual \u00e9 duas vezes mais trabalhosa, voc\u00ea d\u00e1 a pontua\u00e7\u00e3o de 4 pontos para a mesma, se for tr\u00eas vezes mais trabalhosa voc\u00ea d\u00e1 a pontua\u00e7\u00e3o de 6. Fonte Cultura \u00e1gil","title":"Como pontuar o backlog"},{"location":"agil/pontuacao/#definicao-de-pronto","text":"Ao se fechar o backlog inicial para a segunda Release, onde \u00e9 adotado as metodologias \u00e1geis, um passo muito importante para a equipe se alinhar acerca da pontua\u00e7\u00e3o das hist\u00f3ria \u00e9 definir o que \u00e9 uma hist\u00f3ria pronta, nessa defini\u00e7\u00e3o entram fatores principalmente em rela\u00e7\u00e3o \u00e0 m\u00e9tricas aceit\u00e1veis. Ap\u00f3s definir o que \u00e9 uma hist\u00f3ria pronta, \u00e9 poss\u00edvel seguir alguns passos para se conseguir pontuar todo esse backlog rapidamente e de maneira eficaz.","title":"Defini\u00e7\u00e3o de pronto"},{"location":"agil/pontuacao/#tenha-em-maos-todas-as-historias-de-usuario-que-devem-ser-estimadas","text":"A primeira coisa a se fazer \u00e9 levantar todas as hist\u00f3rias que dever\u00e3o ser estimadas. Eu aconselho que elas estejam escritas em cart\u00f5es, assim ser\u00e1 mais f\u00e1cil trabalhar com elas. Voc\u00ea precisa considerar os \u00e9picos e temas (ou, qualquer outro n\u00edvel de rompimento) tamb\u00e9m, como eles s\u00e3o itens de alto n\u00edvel, normalmente se encontram na parte inferior do seu Product Backlog.","title":"Tenha em m\u00e3os todas as hist\u00f3rias de usu\u00e1rio que devem ser estimadas"},{"location":"agil/pontuacao/#coloque-todas-as-historias-em-uma-mesa","text":"Ap\u00f3s levantar todas as hist\u00f3rias que estavam estacionadas em seu Backlog, coloque elas em uma mesa para que possam ser movimentadas facilmente. A mesa \u00e9 legal, pois todos podem ficar em volta dela para discutir e confirmar a utilidade e prioridade de cada hist\u00f3ria de maneira mais f\u00e1cil e eficaz.","title":"Coloque todas as hist\u00f3rias em uma mesa"},{"location":"agil/pontuacao/#escolha-qualquer-historia","text":"Escolha qualquer hist\u00f3ria para come\u00e7ar, fa\u00e7a a equipe estimar o esfor\u00e7o dela em \u201cpequena\u201d, \u201cm\u00e9dia\u201d ou \u201cgrande\u201d. Usar P, M ou G \u00e9 uma forma simples e r\u00e1pida para atribuir esfor\u00e7o em torno do trabalho nesse primeiro momento. Para atribuir peso, fa\u00e7a o seguinte: Se for uma grande hist\u00f3ria (ou seja, a equipe acredita que aquela hist\u00f3ria ir\u00e1 demandar um esfor\u00e7o grande) a coloque em uma extremidade da mesa, lado esquerdo, por exemplo; Se for uma pequena hist\u00f3ria coloque na outra extremidade da mesa; Se for uma hist\u00f3ria m\u00e9dia, coloque no meio.","title":"Escolha qualquer hist\u00f3ria"},{"location":"agil/pontuacao/#estime-por-esforco-relativo","text":"Agora pegue uma 2\u00b0 hist\u00f3ria e pergunte para a equipe se o esfor\u00e7o para faze-la \u00e9 mais ou menos o mesmo da hist\u00f3ria que est\u00e1 na mesa. Por exemplo, supondo que a 1\u00b0 hist\u00f3ria foi considerada de tamanho G (grande), pergunte a equipe se o esfor\u00e7o para implementar essa 2\u00b0 hist\u00f3ria selecionada \u00e9 similar a 1\u00b0 hist\u00f3ria que \u00e9 do tamanho G. Se a resposta for sim, a coloque sobre a mesa na mesma extremidade das cartas de esfor\u00e7o grande. Usando esta t\u00e9cnica, \u00e9 poss\u00edvel passar por 100 ou mais hist\u00f3rias de usu\u00e1rio dentro do Product Backlog e estimar o seu esfor\u00e7o relativo em menos de uma hora.","title":"Estime por esfor\u00e7o relativo"},{"location":"agil/pontuacao/#pontue-as-historias","text":"Agora, se voc\u00ea prefere utilizar Story Points, siga o que vou lhe explicar agora! Pegue um grupo de hist\u00f3rias, pode ser o com esfor\u00e7o \u201cpequeno\u201d (P) que s\u00e3o, teoricamente, mais f\u00e1ceis. Junto com a equipe, comece dando a pontua\u00e7\u00e3o de 1 para todas daquele grupo, depois passe uma por uma e analise se a pontua\u00e7\u00e3o est\u00e1 coerente. Por exemplo, se voc\u00ea avaliou a primeira hist\u00f3ria e deu 2 pontos para ela, a segunda voc\u00ea ir\u00e1 comparar com essa, se voc\u00ea perceber que a hist\u00f3ria atual \u00e9 duas vezes mais trabalhosa, voc\u00ea d\u00e1 a pontua\u00e7\u00e3o de 4 pontos para a mesma, se for tr\u00eas vezes mais trabalhosa voc\u00ea d\u00e1 a pontua\u00e7\u00e3o de 6.","title":"Pontue as hist\u00f3rias"},{"location":"agil/pontuacao/#fonte","text":"Cultura \u00e1gil","title":"Fonte"},{"location":"agil/scrum/","text":"Scrum Durante muito tempo, empresas de desenvolvimento de software conviveram com problemas relacionados ao planejamento e gerenciamento de projetos. Mediante essa situa\u00e7\u00e3o, um grupo de profissionais da \u00e1rea de desenvolvimento de software se reuniram e criaram o que ficou conhecido com Manisfesto \u00c1gil , que foi gerado de acordo com as experi\u00eancias de cada um. Dentre os criadores do manifesto \u00e1gil estavam Ken Schwaber e Jeff Sutherland , que desenvolveram o Scrum . Segundo os criadores desse m\u00e9todo, o Scrum \"\u00e9 um framework para desenvolver e manter produtos complexos\". O Scrum consiste em um m\u00e9todo que trabalha com ciclos curtos de desenvolvimento. Deste modo, o feedback a respeito do resultado \u00e9 obtido rapidamente, o que garante a qualidade do produto desenvolvido e a satisfa\u00e7\u00e3o do cliente. Principais Diferen\u00e7as: ( Scrum vs Tradicionais) Os m\u00e9todos \u00e1geis possuem uma maior liberdade no planejamento de a\u00e7\u00f5es, enquanto os tradicionais possuem um planejamento mais r\u00edgido. Outra diferen\u00e7a importante \u00e9 que as entregas de partes do projeto s\u00e3o feitas de forma cont\u00ednua e incremental (itera\u00e7\u00f5es), geralmente n\u00e3o muito longas, a fim de obter um r\u00e1pido feedback do cliente acerca do andamento do projeto. Na quest\u00e3o de comunica\u00e7\u00e3o entre os membros do projeto, os m\u00e9todos \u00e1geis utilizam reuni\u00f5es di\u00e1rias entre o time, ou seja, h\u00e1 uma intera\u00e7\u00e3o constante entre todos os membros da equipe, enquanto que em tradicionais, o contato n\u00e3o \u00e9 t\u00e3o frequente. O intuito disso est\u00e1 em discutir o que ser\u00e1 feito naquele momento, revendo o planejamento a m\u00e9dio e curto prazo, al\u00e9m de prov\u00e1veis impedimentos. As equipes s\u00e3o auto-organiz\u00e1veis e n\u00e3o necessitam de l\u00edderes indicando 'O que fazer' e 'Como fazer'. Pap\u00e9is do Scrum Product Owner O Product Owner , \"dono do produto\", \u00e9 o respons\u00e1vel por maximizar o valor do produto e do trabalho do Time de Desenvolvimento. Como isso \u00e9 feito pode variar por projeto ou time de desenvolvimento, sendo que o Product Owner \u00e9 a \u00fanica pessoa respons\u00e1vel por gerenciar o Backlog do Produto. O gerenciamento do Backlog do Produto inclui: Expressar claramente os itens do Backlog do Produto; Ordenar os itens do Backlog do Produto para alcan\u00e7ar melhor as metas e miss\u00f5es; Garantir o valor do trabalho realizado pelo Time de Desenvolvimento; Garantir que o Backlog do produto seja vis\u00edvel, transparente, claro para todos, e mostrar o que o Time Scrum vai trabalhar a seguir; Garantir que o Time de Desenvolvimento entenda os itens do Backlog do Produto no n\u00edvel necess\u00e1rio. O Product Owner pode fazer o trabalho citado acima, ou delegar para o Time de Desenvolvimento faz\u00ea-lo. No entanto n\u00e3o \u00e9 muito recomendado j\u00e1 que o Product Owner continuar\u00e1 sendo o respons\u00e1vel pelos trabalhos. O Product Owner \u00e9 uma pessoa e n\u00e3o um comit\u00ea, mas pode representar o desejo de um comit\u00ea no Backlog do Produto, sendo que aqueles que quiserem uma altera\u00e7\u00e3o nas prioridades dos itens de Backlog devem convencer o Product Owner das necessidades de tais mudan\u00e7as. Para que o Product Owner tenha sucesso, toda a organiza\u00e7\u00e3o deve respeitar as suas decis\u00f5es, estas devendo ser vis\u00edveis no conte\u00fado e na prioriza\u00e7\u00e3o do Backlog do Produto. Scrum Master O Scrum Master \u00e9 respons\u00e1vel por garantir que o Scrum seja entendido e aplicado, ou seja, para garantir que o Time Scrum adira \u00e0 teoria, pr\u00e1ticas e regras do Scrum . O Scrum Master ajuda aqueles que est\u00e3o fora do Time Scrum a entender quais as suas intera\u00e7\u00f5es com o Time Scrum e se estas s\u00e3o \u00fateis, de modo que mostra, tamb\u00e9m, quais n\u00e3o s\u00e3o \u00fateis para o projeto. O Scrum Master ajuda todos a mudarem estas intera\u00e7\u00f5es para maximizar o valor criado pelo Time Scrum . Pap\u00e9is do Scrum Master O Scrum Master serve o Product Owner de v\u00e1rias maneiras, incluindo: Encontrando t\u00e9cnicas para o gerenciamento efetivo do Backlog do Produto; Claramente comunicar a vis\u00e3o, objetivo e itens do Backlog do Produto para o Time de Desenvolvimento; Ensinar a Time Scrum a criar itens de Backlog do Produto de forma clara e concisa; Compreender a longo-prazo o planejamento do Produto no ambiente emp\u00edrico; Compreender e praticar a agilidade; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios. Treinar o Time de Desenvolvimento em autogerenciamento e interdisciplinaridade; Ensinar e liderar o Time de Desenvolvimento na cria\u00e7\u00e3o de produtos de alto valor; Remover impedimentos para o progresso do Time de Desenvolvimento; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios; Treinar o Time de Desenvolvimento em ambientes organizacionais nos quais o Scrum n\u00e3o \u00e9 totalmente adotado e compreendido; Liderando e treinando a organiza\u00e7\u00e3o na ado\u00e7\u00e3o do Scrum ; Planejando implementa\u00e7\u00f5es Scrum dentro da organiza\u00e7\u00e3o; Ajudando funcion\u00e1rios e partes interessadas a compreender e tornar aplic\u00e1vel o Scrum e o desenvolvimento de produto emp\u00edrico; Causando mudan\u00e7as que aumentam a produtividade do Time Scrum ; Trabalhando com outros Scrum Masters para aumentar a efic\u00e1cia da aplica\u00e7\u00e3o do Scrum nas organiza\u00e7\u00f5es. Development Team O Time de Desenvolvimento consiste de profissionais que realizamo trabalho de entregar uma vers\u00e3o us\u00e1vel que potencialmente incrementa o produto \u201cPronto\u201d ao final de cada Sprint . Somente integrantes do Time de Desenvolvimento criam incrementos. Os Times de Desenvolvimento s\u00e3o estruturados e autorizados pela organiza\u00e7\u00e3o para organizar e gerenciar seu pr\u00f3prio trabalho. A sinergia resultante aperfei\u00e7oa a efici\u00eancia e a efic\u00e1cia do Time de Desenvolvimento como um todo. O Scrum Team \u00e9 a equipe de desenvolvimento. Nela n\u00e3o existe necessariamente uma divis\u00e3o funcional atrav\u00e9s de pap\u00e9is tradicionais, tais como programador, designer, analista de testes ou arquiteto. Todos no projeto trabalham juntos para completar o conjunto de trabalho com o qual se comprometeram conjuntamente para um Sprint . Um Scrum Team t\u00edpico tem de 6 a 10 pessoas, embora haja relatos de projetos Scrum com equipes maiores. A principal abordagem para trabalhar com equipes grandes no Scrum \u00e9 usando o conceito de \"Scrum of Scrums\" . Cada Scrum Team trabalha normalmente, mas cada equipe tamb\u00e9m contribui com uma pessoa que dever\u00e1 frequentar o Scrum of Scrums Meeting para coordenar o trabalho de m\u00faltiplas equipes Scrum . O tamanho ideal do Time de Desenvolvimento deve ser pequeno o suficiente para se manter \u00e1gil e grande o suficiente para completar uma parcela significativa do trabalho dentro dos limites de tempo da Sprint . Menos de 3 integrantes no Time de Desenvolvimento diminuem a intera\u00e7\u00e3o e resultam em um menor ganho de produtividade. Times de desenvolvimento menores podem encontrar restri\u00e7\u00f5es de habilidades durante a Sprint , gerando um Time de Desenvolvimento incapaz de entregar um incremento potencialmente utiliz\u00e1vel. Havendo mais de 9 integrantes \u00e9 exigida muita coordena\u00e7\u00e3o. De maneira que o Time n\u00e3o pode ser grande demais ou pequeno demais. Artefatos Product Backlog O Product Backlog \u00e9 uma lista contendo todas as funcionalidades desejadas para um produto. O conte\u00fado desta lista \u00e9 definido pelo Product Owner . N\u00e3o tem a necessidade dessa lista estar completo no in\u00edcio de um projeto. Pode-se come\u00e7ar com tudo aquilo que \u00e9 mais \u00f3bvio em um primeiro momento. Com o tempo, o Product Backlog cresce e muda \u00e0 medida que se aprende mais sobre o produto e seus usu\u00e1rios. Charts Velocity Chart O Velocity Chart pode ajudar a determinar quantos pontos de trabalho pode ser conclu\u00eddo por Sprint para uma determinada equipe, se a composi\u00e7\u00e3o da equipe e dura\u00e7\u00e3o da Sprint permanecerem os mesmos. A Estimativa dos pontos de hist\u00f3ria devem ser precisos para o c\u00e1lculo do Velocity ser significativo. Pode-se criar Velocity Chart para lan\u00e7amentos ou Sprints conclu\u00eddas. Burndown Chart Burndown Chart compara o progresso esperado versus o progresso real para releases e Sprints . Este Chart pode ajudar a identificar problemas inesperados que podem estar afetando o progresso. Os usu\u00e1rios com as fun\u00e7\u00f5es Scrum admin ou Scrum user podem visualizar as informa\u00e7\u00f5es do Burndown Chart . Sprints Sprint \u00e9 considerado como o cora\u00e7\u00e3o do Scrum , \u00e9 o tempo que dura geralmente de um m\u00eas ou menos. Ao final de uma Sprint \u00e9 esperado que tenha um vers\u00e3o est\u00e1vel do produto e incrementada em rela\u00e7\u00e3o a vers\u00e3o anterior. O tempo de dura\u00e7\u00e3o de uma Sprint \u00e9 coerente com o esfor\u00e7o demandado para o desenvolvimento. Para iniciar uma Sprint \u00e9 necess\u00e1rio realizar a reuni\u00e3o de planejamento, reuni\u00f5es di\u00e1rias, o trabalho desenvolvido durante o per\u00edodo da Sprint , a realiza\u00e7\u00e3o da revis\u00e3o de Sprint e a retrospectiva dela para poder encerr\u00e1-la. Reuni\u00f5es Daily Meetings As reuni\u00f5es di\u00e1rias s\u00e3o reuni\u00f5es r\u00e1pidas, de aproximadamente 10 a 15 minutos, dependendo do tamanho da equipe, onde os participantes a realizam de p\u00e9. O objetivo desta \u00e9 explanar para o restante do time o que foi feito no dia anterior e o que pretende-se fazer no dia atual, bem como a exist\u00eancia de quaisquer impedimentos no desenvolvimento. Deste modo, todo o time est\u00e1 sempre atualizado em rela\u00e7\u00e3o ao andamento do projeto como um todo, n\u00e3o somente em suas demandas/tarefas, o que permite a possibilidade de tomadas de decis\u00e3o r\u00e1pidas e forte adapta\u00e7\u00e3o a mudan\u00e7as. As reuni\u00f5es di\u00e1rias s\u00e3o realizadas sempre no mesmo hor\u00e1rio e local. Retrospectiva A retrospectiva \u00e9 uma reuni\u00e3o realizada com o intuito de abordar os pontos positivos, negativos e de melhoria do per\u00edodo passado, com a finalidade de n\u00e3o repetir os erros e manter e/ou melhorar os acertos. Esta reuni\u00e3o pode ser realizada ao fim de cada Sprint ou em per\u00edodos pr\u00e9-determinados, como a cada m\u00eas, por exemplo. Revis\u00e3o da Sprint Revis\u00e3o de Sprint \u00e9 uma reuni\u00e3o realizada ao final de toda Sprint , onde s\u00e3o mostrados ao restante do time tudo o que foi realizado durante o per\u00edodo da Sprint passada. Esta reuni\u00e3o pode incluir o(s) cliente(s). Refer\u00eancias Manifesto Agil Guia do SCRUM Service Now Metodologia \u00c1gil Imagem: Ciclo do Scrum Imagem: Velocity Chart Imagem: Burndown Chart","title":"Scrum"},{"location":"agil/scrum/#scrum","text":"Durante muito tempo, empresas de desenvolvimento de software conviveram com problemas relacionados ao planejamento e gerenciamento de projetos. Mediante essa situa\u00e7\u00e3o, um grupo de profissionais da \u00e1rea de desenvolvimento de software se reuniram e criaram o que ficou conhecido com Manisfesto \u00c1gil , que foi gerado de acordo com as experi\u00eancias de cada um. Dentre os criadores do manifesto \u00e1gil estavam Ken Schwaber e Jeff Sutherland , que desenvolveram o Scrum . Segundo os criadores desse m\u00e9todo, o Scrum \"\u00e9 um framework para desenvolver e manter produtos complexos\". O Scrum consiste em um m\u00e9todo que trabalha com ciclos curtos de desenvolvimento. Deste modo, o feedback a respeito do resultado \u00e9 obtido rapidamente, o que garante a qualidade do produto desenvolvido e a satisfa\u00e7\u00e3o do cliente.","title":"Scrum"},{"location":"agil/scrum/#principais-diferencas-scrum-vs-tradicionais","text":"Os m\u00e9todos \u00e1geis possuem uma maior liberdade no planejamento de a\u00e7\u00f5es, enquanto os tradicionais possuem um planejamento mais r\u00edgido. Outra diferen\u00e7a importante \u00e9 que as entregas de partes do projeto s\u00e3o feitas de forma cont\u00ednua e incremental (itera\u00e7\u00f5es), geralmente n\u00e3o muito longas, a fim de obter um r\u00e1pido feedback do cliente acerca do andamento do projeto. Na quest\u00e3o de comunica\u00e7\u00e3o entre os membros do projeto, os m\u00e9todos \u00e1geis utilizam reuni\u00f5es di\u00e1rias entre o time, ou seja, h\u00e1 uma intera\u00e7\u00e3o constante entre todos os membros da equipe, enquanto que em tradicionais, o contato n\u00e3o \u00e9 t\u00e3o frequente. O intuito disso est\u00e1 em discutir o que ser\u00e1 feito naquele momento, revendo o planejamento a m\u00e9dio e curto prazo, al\u00e9m de prov\u00e1veis impedimentos. As equipes s\u00e3o auto-organiz\u00e1veis e n\u00e3o necessitam de l\u00edderes indicando 'O que fazer' e 'Como fazer'.","title":"Principais Diferen\u00e7as: (Scrum vs Tradicionais)"},{"location":"agil/scrum/#papeis-do-scrum","text":"","title":"Pap\u00e9is do Scrum"},{"location":"agil/scrum/#product-owner","text":"O Product Owner , \"dono do produto\", \u00e9 o respons\u00e1vel por maximizar o valor do produto e do trabalho do Time de Desenvolvimento. Como isso \u00e9 feito pode variar por projeto ou time de desenvolvimento, sendo que o Product Owner \u00e9 a \u00fanica pessoa respons\u00e1vel por gerenciar o Backlog do Produto. O gerenciamento do Backlog do Produto inclui: Expressar claramente os itens do Backlog do Produto; Ordenar os itens do Backlog do Produto para alcan\u00e7ar melhor as metas e miss\u00f5es; Garantir o valor do trabalho realizado pelo Time de Desenvolvimento; Garantir que o Backlog do produto seja vis\u00edvel, transparente, claro para todos, e mostrar o que o Time Scrum vai trabalhar a seguir; Garantir que o Time de Desenvolvimento entenda os itens do Backlog do Produto no n\u00edvel necess\u00e1rio. O Product Owner pode fazer o trabalho citado acima, ou delegar para o Time de Desenvolvimento faz\u00ea-lo. No entanto n\u00e3o \u00e9 muito recomendado j\u00e1 que o Product Owner continuar\u00e1 sendo o respons\u00e1vel pelos trabalhos. O Product Owner \u00e9 uma pessoa e n\u00e3o um comit\u00ea, mas pode representar o desejo de um comit\u00ea no Backlog do Produto, sendo que aqueles que quiserem uma altera\u00e7\u00e3o nas prioridades dos itens de Backlog devem convencer o Product Owner das necessidades de tais mudan\u00e7as. Para que o Product Owner tenha sucesso, toda a organiza\u00e7\u00e3o deve respeitar as suas decis\u00f5es, estas devendo ser vis\u00edveis no conte\u00fado e na prioriza\u00e7\u00e3o do Backlog do Produto.","title":"Product Owner"},{"location":"agil/scrum/#scrum-master","text":"O Scrum Master \u00e9 respons\u00e1vel por garantir que o Scrum seja entendido e aplicado, ou seja, para garantir que o Time Scrum adira \u00e0 teoria, pr\u00e1ticas e regras do Scrum . O Scrum Master ajuda aqueles que est\u00e3o fora do Time Scrum a entender quais as suas intera\u00e7\u00f5es com o Time Scrum e se estas s\u00e3o \u00fateis, de modo que mostra, tamb\u00e9m, quais n\u00e3o s\u00e3o \u00fateis para o projeto. O Scrum Master ajuda todos a mudarem estas intera\u00e7\u00f5es para maximizar o valor criado pelo Time Scrum .","title":"Scrum Master"},{"location":"agil/scrum/#papeis-do-scrum-master","text":"O Scrum Master serve o Product Owner de v\u00e1rias maneiras, incluindo: Encontrando t\u00e9cnicas para o gerenciamento efetivo do Backlog do Produto; Claramente comunicar a vis\u00e3o, objetivo e itens do Backlog do Produto para o Time de Desenvolvimento; Ensinar a Time Scrum a criar itens de Backlog do Produto de forma clara e concisa; Compreender a longo-prazo o planejamento do Produto no ambiente emp\u00edrico; Compreender e praticar a agilidade; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios. Treinar o Time de Desenvolvimento em autogerenciamento e interdisciplinaridade; Ensinar e liderar o Time de Desenvolvimento na cria\u00e7\u00e3o de produtos de alto valor; Remover impedimentos para o progresso do Time de Desenvolvimento; Facilitar os eventos Scrum conforme exigidos ou necess\u00e1rios; Treinar o Time de Desenvolvimento em ambientes organizacionais nos quais o Scrum n\u00e3o \u00e9 totalmente adotado e compreendido; Liderando e treinando a organiza\u00e7\u00e3o na ado\u00e7\u00e3o do Scrum ; Planejando implementa\u00e7\u00f5es Scrum dentro da organiza\u00e7\u00e3o; Ajudando funcion\u00e1rios e partes interessadas a compreender e tornar aplic\u00e1vel o Scrum e o desenvolvimento de produto emp\u00edrico; Causando mudan\u00e7as que aumentam a produtividade do Time Scrum ; Trabalhando com outros Scrum Masters para aumentar a efic\u00e1cia da aplica\u00e7\u00e3o do Scrum nas organiza\u00e7\u00f5es.","title":"Pap\u00e9is do Scrum Master"},{"location":"agil/scrum/#development-team","text":"O Time de Desenvolvimento consiste de profissionais que realizamo trabalho de entregar uma vers\u00e3o us\u00e1vel que potencialmente incrementa o produto \u201cPronto\u201d ao final de cada Sprint . Somente integrantes do Time de Desenvolvimento criam incrementos. Os Times de Desenvolvimento s\u00e3o estruturados e autorizados pela organiza\u00e7\u00e3o para organizar e gerenciar seu pr\u00f3prio trabalho. A sinergia resultante aperfei\u00e7oa a efici\u00eancia e a efic\u00e1cia do Time de Desenvolvimento como um todo. O Scrum Team \u00e9 a equipe de desenvolvimento. Nela n\u00e3o existe necessariamente uma divis\u00e3o funcional atrav\u00e9s de pap\u00e9is tradicionais, tais como programador, designer, analista de testes ou arquiteto. Todos no projeto trabalham juntos para completar o conjunto de trabalho com o qual se comprometeram conjuntamente para um Sprint . Um Scrum Team t\u00edpico tem de 6 a 10 pessoas, embora haja relatos de projetos Scrum com equipes maiores. A principal abordagem para trabalhar com equipes grandes no Scrum \u00e9 usando o conceito de \"Scrum of Scrums\" . Cada Scrum Team trabalha normalmente, mas cada equipe tamb\u00e9m contribui com uma pessoa que dever\u00e1 frequentar o Scrum of Scrums Meeting para coordenar o trabalho de m\u00faltiplas equipes Scrum . O tamanho ideal do Time de Desenvolvimento deve ser pequeno o suficiente para se manter \u00e1gil e grande o suficiente para completar uma parcela significativa do trabalho dentro dos limites de tempo da Sprint . Menos de 3 integrantes no Time de Desenvolvimento diminuem a intera\u00e7\u00e3o e resultam em um menor ganho de produtividade. Times de desenvolvimento menores podem encontrar restri\u00e7\u00f5es de habilidades durante a Sprint , gerando um Time de Desenvolvimento incapaz de entregar um incremento potencialmente utiliz\u00e1vel. Havendo mais de 9 integrantes \u00e9 exigida muita coordena\u00e7\u00e3o. De maneira que o Time n\u00e3o pode ser grande demais ou pequeno demais.","title":"Development Team"},{"location":"agil/scrum/#artefatos","text":"","title":"Artefatos"},{"location":"agil/scrum/#product-backlog","text":"O Product Backlog \u00e9 uma lista contendo todas as funcionalidades desejadas para um produto. O conte\u00fado desta lista \u00e9 definido pelo Product Owner . N\u00e3o tem a necessidade dessa lista estar completo no in\u00edcio de um projeto. Pode-se come\u00e7ar com tudo aquilo que \u00e9 mais \u00f3bvio em um primeiro momento. Com o tempo, o Product Backlog cresce e muda \u00e0 medida que se aprende mais sobre o produto e seus usu\u00e1rios.","title":"Product Backlog"},{"location":"agil/scrum/#charts","text":"","title":"Charts"},{"location":"agil/scrum/#velocity-chart","text":"O Velocity Chart pode ajudar a determinar quantos pontos de trabalho pode ser conclu\u00eddo por Sprint para uma determinada equipe, se a composi\u00e7\u00e3o da equipe e dura\u00e7\u00e3o da Sprint permanecerem os mesmos. A Estimativa dos pontos de hist\u00f3ria devem ser precisos para o c\u00e1lculo do Velocity ser significativo. Pode-se criar Velocity Chart para lan\u00e7amentos ou Sprints conclu\u00eddas.","title":"Velocity Chart"},{"location":"agil/scrum/#burndown-chart","text":"Burndown Chart compara o progresso esperado versus o progresso real para releases e Sprints . Este Chart pode ajudar a identificar problemas inesperados que podem estar afetando o progresso. Os usu\u00e1rios com as fun\u00e7\u00f5es Scrum admin ou Scrum user podem visualizar as informa\u00e7\u00f5es do Burndown Chart .","title":"Burndown Chart"},{"location":"agil/scrum/#sprints","text":"Sprint \u00e9 considerado como o cora\u00e7\u00e3o do Scrum , \u00e9 o tempo que dura geralmente de um m\u00eas ou menos. Ao final de uma Sprint \u00e9 esperado que tenha um vers\u00e3o est\u00e1vel do produto e incrementada em rela\u00e7\u00e3o a vers\u00e3o anterior. O tempo de dura\u00e7\u00e3o de uma Sprint \u00e9 coerente com o esfor\u00e7o demandado para o desenvolvimento. Para iniciar uma Sprint \u00e9 necess\u00e1rio realizar a reuni\u00e3o de planejamento, reuni\u00f5es di\u00e1rias, o trabalho desenvolvido durante o per\u00edodo da Sprint , a realiza\u00e7\u00e3o da revis\u00e3o de Sprint e a retrospectiva dela para poder encerr\u00e1-la.","title":"Sprints"},{"location":"agil/scrum/#reunioes","text":"","title":"Reuni\u00f5es"},{"location":"agil/scrum/#daily-meetings","text":"As reuni\u00f5es di\u00e1rias s\u00e3o reuni\u00f5es r\u00e1pidas, de aproximadamente 10 a 15 minutos, dependendo do tamanho da equipe, onde os participantes a realizam de p\u00e9. O objetivo desta \u00e9 explanar para o restante do time o que foi feito no dia anterior e o que pretende-se fazer no dia atual, bem como a exist\u00eancia de quaisquer impedimentos no desenvolvimento. Deste modo, todo o time est\u00e1 sempre atualizado em rela\u00e7\u00e3o ao andamento do projeto como um todo, n\u00e3o somente em suas demandas/tarefas, o que permite a possibilidade de tomadas de decis\u00e3o r\u00e1pidas e forte adapta\u00e7\u00e3o a mudan\u00e7as. As reuni\u00f5es di\u00e1rias s\u00e3o realizadas sempre no mesmo hor\u00e1rio e local.","title":"Daily Meetings"},{"location":"agil/scrum/#retrospectiva","text":"A retrospectiva \u00e9 uma reuni\u00e3o realizada com o intuito de abordar os pontos positivos, negativos e de melhoria do per\u00edodo passado, com a finalidade de n\u00e3o repetir os erros e manter e/ou melhorar os acertos. Esta reuni\u00e3o pode ser realizada ao fim de cada Sprint ou em per\u00edodos pr\u00e9-determinados, como a cada m\u00eas, por exemplo.","title":"Retrospectiva"},{"location":"agil/scrum/#revisao-da-sprint","text":"Revis\u00e3o de Sprint \u00e9 uma reuni\u00e3o realizada ao final de toda Sprint , onde s\u00e3o mostrados ao restante do time tudo o que foi realizado durante o per\u00edodo da Sprint passada. Esta reuni\u00e3o pode incluir o(s) cliente(s).","title":"Revis\u00e3o da Sprint"},{"location":"agil/scrum/#referencias","text":"Manifesto Agil Guia do SCRUM Service Now Metodologia \u00c1gil Imagem: Ciclo do Scrum Imagem: Velocity Chart Imagem: Burndown Chart","title":"Refer\u00eancias"},{"location":"agil/xp/","text":"Extreming Programing - XP Framework XP O XP, ou Extreme Programming , \u00e9 uma metodologia de desenvolvimento de software que tem como objetivo principal levar ao extremo boas pr\u00e1ticas de programa\u00e7\u00e3o e boas pr\u00e1ticas para o desenvolvimento de software no geral. O XP \u00e9 uma metodologia baseada em valores, que definem uma maneira harmoniosa de trabalho na equipe de desenvolvimento. O foco desta metodologia \u00e9 no desenvolvimento incremental e iterativo de sistemas orientados \u00e0 objetos nos quais os requisitos s\u00e3o inst\u00e1veis e/ou incertos e que possua uma equipe pequena. O XP define uma s\u00e9rie de regras para que o desenvolvimento seja realizado da melhor maneira poss\u00edvel: Planejamento: As hist\u00f3rias de usu\u00e1rio s\u00e3o escritas S\u00e2o feitas releases pequenas e constantes. O projeto \u00e9 dividido em itera\u00e7\u00f5es. As itera\u00e7\u00f5es s\u00e3o planejadas no momento em que vai se come\u00e7ar o trabalho. Gerenciamento: O time deve ter um espa\u00e7o aberto de trabalho. O desenvolvimento deve ter uma velocidade sustent\u00e1vel. Stand-up meetings iniciam o dia de trabalho. O velocity \u00e9 sempre medido. O XP deve ser consertado caso n\u00e3o esteja funcionando. Design Simplicidade. Crie solu\u00e7\u00f5es simples para explorar todas as solu\u00e7\u00f5es poss\u00edveis. Funcionalidades n\u00e3o devem ser adicionadas antes da hora. Refatore sempre que poss\u00edvel C\u00f3difica\u00e7\u00e3o O cliente precisa estar sempre dispon\u00edvel. O c\u00f3digo precisa ser escrito utilizando padr\u00f5es. O c\u00f3digo \u00e9 feito utilizando pareamento ( pair programming ). Apenas um par integra o c\u00f3digo de cada vez. Toda a equipe deve participar da cria\u00e7\u00e3o de todas as partes do c\u00f3digo. Testes Todo o c\u00f3digo deve ter testes unit\u00e1rios. Todo o c\u00f3digo deve passar os testes unit\u00e1rios antes da release . Se um bug existe, testes s\u00e3o criados. Os testes de aceita\u00e7\u00e3o rodam com frequ\u00eancia. Como podemos notar, todas as boas pr\u00e1ticas s\u00e3o levadas ao extremo no XP. Pode-se se dizer que \u00e9 uma metodologia bastante vol\u00e1til. Portanto, para que seja poss\u00edvel a adapta\u00e7\u00e3o \u00e0s frequentes mudan\u00e7as, o XP preconiza ciclos curtos que nos d\u00e1 previsibilidade e redu\u00e7\u00e3o de incertezas/riscos, simplicidade e melhorias constantes de c\u00f3digo ( refactoring ) para facilitar a mudan\u00e7a e Testes Automatizados e Integra\u00e7\u00e3o Cont\u00ednua para aumentar a confian\u00e7a. O m\u00e9todo XP preconiza que Codifica\u00e7\u00e3o \u00e9 a atividade central do projeto, que os Testes (que tamb\u00e9m s\u00e3o c\u00f3digo) servem de especifica\u00e7\u00e3o de requisitos, e a Comunica\u00e7\u00e3o oral entre desenvolvedores \u00e9 fundamental, o que d\u00e1 proximidade a equipe. Isto n\u00e3o quer dizer que a equipe XP n\u00e3o constr\u00f3i documentos e n\u00e3o faz modelagem, ela s\u00f3 n\u00e3o considera que um modelo \u00e9 um documento. Modelos s\u00e3o feitos o tempo todo seja como quadro branco, sess\u00f5es de design, etc, mas servem como um suporte para o concreto que realmente importa. Valores XP Comunica\u00e7\u00e3o Todo o processo \u00e1gil \u00e9 baseado na comunica\u00e7\u00e3o. A comunica\u00e7\u00e3o \u00e9 essencial para o \u00eaxito da metodologia \u00e0gil e pode ser realizada de diversas formas, n\u00e3o somente por documenta\u00e7\u00e3o como nas metodologias tradicionais. A comunica\u00e7\u00e3o entre os desenvolvedores instiga a dissemina\u00e7\u00e3o do conhecimento dentro da equipe, evoluindo-a em aspectos t\u00e9cnicos. J\u00e1 a comunica\u00e7\u00e3o com o cliente garante que o produto entregue atenda \u00e0 suas expectativas. Coragem Consiste na coragem durante a implementa\u00e7\u00e3o de tomar decis\u00f5es que sejam melhores para a equipe e para o c\u00f3digo. Por exemplo, coragem para refatorar c\u00f3digos j\u00e1 implementadas para que a qualidade do c\u00f3digo melhore. Feedback O feedback consiste em uma frequente comunica\u00e7\u00e3o entre o cliente e a equipe que seja um retorno sobre o sistema. Por exemplo, o que est\u00e1 bom, o que est\u00e1 ruim, o que deve ser implementado, o que deve ser alterado, o que realmente \u00e9 necess\u00e1rio naquele momento e para aquele sistema. Dessa forma, a equipe que est\u00e1 desenvolvendo o sistema tem uma vis\u00e3o clara acerca dos requisitos e do que \u00e9 necess\u00e1rio que seja implementado. Respeito O respeito \u00e9 essencial para uma boa conviv\u00eancia da equipe. Todos os integrantes devem demonstrar respeito uns aos outros, n\u00e3o desmerecer as id\u00e9ias ou indaga\u00e7\u00f5es alheias. Simplicidade Sempre que foi iniciado a implementa\u00e7\u00e3o de algo, deve ser questionado qual a forma mais f\u00e1cil de implementar aquele escopo. Quanto mais simples, melhor a manutenibilidade e a qualidade do c\u00f3digo. Funcionalidade Pronta XP Teste Unit\u00e1rio Este teste \u00e9 utilizado para validar as classes b\u00e1sicas e os componentes do sistema que s\u00e3o considerados os menores elementos test\u00e1veis. Consiste em verificar se o fluxo de controle e dados est\u00e3o corretos. Deve ser realizado no in\u00edcio da itera\u00e7\u00e3o. S\u00e3o escritos pelos desenvolvedores enquanto codificam o sistema. Devem ser feitos de modo que sejam f\u00e1ceis de executar e e re-executar v\u00e1rias e v\u00e1rias vezes para validar o sistema. Devem ser criados para todas as classes do sistema. S\u00e3o implementados para todos os m\u00e9todos do sistema. S\u00e3o escritos antes e ao decorrer da produ\u00e7\u00e3o do sistema. Devem ser o mais simples poss\u00edvel. Programa\u00e7\u00e3o Pareada Sugere que todo e qualquer c\u00f3digo produzido no projeto seja sempre implementado por duas pessoas juntas, diante do mesmo computador, revezando-se no teclado. Al\u00e9m de parecer ter poucos benef\u00edcios, temos a impress\u00e3o de que ela ir\u00e1 consumir mais recursos ou ir\u00e1 elevar o tempo do desenvolvimento. Por que parear com o coleguinha? A programa\u00e7\u00e3o em par \u00e9 uma forma eficaz de reduzir a incid\u00eancia de bugs em um sistema. Quando dois desenvolvedores est\u00e3o programando em par, um deles est\u00e1 com as m\u00e3os no teclado e no mouse. O outro est\u00e1 sentado ao lado, olhando para a mesma tela e preocupado em resolver o mesmo problema. \u00c9 importante que eles conversem o tempo todo e troquem id\u00e9ias sobre a solu\u00e7\u00e3o. A programa\u00e7\u00e3o em par tamb\u00e9m ajuda os desenvolvedores a criarem solu\u00e7\u00f5es mais simples, mais r\u00e1pidas de implementar e mais f\u00e1ceis de manter. Isso ocorre em grande parte devido \u00e0 oportunidade de dialogar e trocar id\u00e9ias sobre programas que estejam sendo desenvolvidos. Quando nos deparamos com um problema, buscamos uma solu\u00e7\u00e3o usando todo e qualquer recurso que esteja a nossa disposi\u00e7\u00e3o. E, assim que encontramos uma solu\u00e7\u00e3o, encerramos a busca e a utilizamos. Al\u00e9m do mais, a programa\u00e7\u00e3o em par produz um efeito conhecido como \"press\u00e3o do par\" que faz com que os desenvolvedores tenham maior foco na atividade e faz com que isso se mantenha por mais tempo. Imagine que voc\u00ea esteja programando em par e, de repente, resolva olhar seus emails. Trata-se de uma situa\u00e7\u00e3o embara\u00e7osa, isso faz com que o foco seja mantido no desenvolvimento. Uma das caracter\u00edsticas mais marcantes da programa\u00e7\u00e3o em par \u00e9 a sua capacidade de dissemina\u00e7\u00e3o de conhecimento, especialmente em projetos XP, nos quais os desenvolvedores sempre trocam de pares, fazendo com que haja maior compartilhamento de informa\u00e7\u00f5es ao longo do projeto. A programa\u00e7\u00e3o em par tamb\u00e9m \u00e9 uma forma de fazer com que o desenvolvedor tenha mais confian\u00e7a no c\u00f3digo que produz. Afinal, o c\u00f3digo foi produzido por ele e mais outra pessoa que o ajudou a revis\u00e1-lo. Quando sabemos que mais uma pessoa, ou talvez v\u00e1rias, j\u00e1 olharam para o c\u00f3digo no qual trabalhamos e est\u00e3o de acordo sobre o mesmo, temos maior confian\u00e7a de que ele realmente ir\u00e1 funcionar. Isso significa que a programa\u00e7\u00e3o em par reduz o estresse do desenvolvedor. Consequentemente, as caracter\u00edsticas apresentadas acima fazem com que a programa\u00e7\u00e3o em par acelere o desenvolvimento significativamente, embora \u00e0 primeira vista pare\u00e7a o contr\u00e1rio. Em fun\u00e7\u00e3o dos benef\u00edcios acima, uma atividade feita em par normalmente \u00e9 encerrada mais rapidamente que outra feita por um programador solit\u00e1rio, aumentando a produtividade. Pair programming Varia\u00e7\u00f5es de Pares Especialista x Especialista Essa varia\u00e7\u00e3o pode gerar um aumento enorme de produtividade e grandes resultados, entretanto nela pode haver uma falta de resolver problemas de novas formas, visto que dificilmente algu\u00e9m da dupla questionar\u00e1 praticas j\u00e1 estabelecidas. Especialista x Principiante Essa varia\u00e7\u00e3o cria uma excelente oportunidade para o expert mentorear o aprendiz. Ela proporciona a cria\u00e7\u00e3o de novas ideias, visto que o aprendiz deve buscar questionar e aprender pr\u00e1ticas estabelecidas e o expert tem que usar os conhecimentos adquiridos com essas pr\u00e1ticas para explic\u00e1-las e question\u00e1-las tamb\u00e9m. \u00c9 muito importante que o aprendiz n\u00e3o haja passivamente no processo e n\u00e3o hesite em participar. Principiante x Principiante Pode gerar ganhos de produtividade maior do que dois aprendizes trabalhando sozinhos, entretanto n\u00e3o \u00e9 uma varia\u00e7\u00e3o muito encorajada. Teste de aceita\u00e7\u00e3o Os Testes de Aceita\u00e7\u00e3o consistem no teste de uma poss\u00edvel aceita\u00e7\u00e3o por parte do cliente. Testes de aceita\u00e7\u00e3o est\u00e3o intimamente ligados com as user stories . O teste de aceita\u00e7\u00e3o visa validar com o cliente o que foi definido nos requisitos do software , portanto, s\u00e3o usados para verificar se o produto desenvolvido est\u00e1 de acordo com o que foi estabelecido nos requisitos. Desse modo os testes de aceita\u00e7\u00e3o est\u00e3o ligadas as funcionalidades do sistema, onde entradas podem ser simuladas e o comportamento de sa\u00edda pode ser observada, esse comportamento deve ser compat\u00edvel com o temos previamente definidos (requisitos). Testes de aceita\u00e7\u00e3o visam testar o sistema do ponto de vista do usu\u00e1rio, de modo que s\u00e3o menos suscet\u00edveis a altera\u00e7\u00f5es. Como o sistema \u00e9 testado com todos os componentes interligados e configurados, inclusive bancos de dados e gerenciadores de filas, h\u00e1 garantias de que cada servi\u00e7o oferecido esteja funcionando. Integra\u00e7\u00e3o Cont\u00ednua Integra\u00e7\u00e3o cont\u00ednua consiste em integrar o trabalho diversas vezes ao dia, ao inv\u00e9s de uma \u00fanica vez, assegurando que a base de c\u00f3digo permane\u00e7a consistente ao final de cada integra\u00e7\u00e3o. O objetivo principal de utilizar a integra\u00e7\u00e3o cont\u00ednua \u00e9 verificar se as altera\u00e7\u00f5es ou novas funcionalidades n\u00e3o criaram novos defeitos no projeto j\u00e1 existente. Esse conceito de integra\u00e7\u00e3o cont\u00ednua est\u00e1 atrelado \u00e0 aplica\u00e7\u00e3o de controle de versionamento, geralmente feito com o uso de alguma ferramenta, como o github. O controle de versionamento permite restaurar vers\u00f5es anteriores do sistema, comparar c\u00f3digos, gerenciar altera\u00e7\u00f5es, entre outros, e \u00e9 utilizado por equipes de desenvolvimento que compartilham mesmo c\u00f3digo e projeto. O controle de vers\u00e3o funcionar\u00e1 de forma b\u00e1sica da seguinte forma: O desenvolvedor faz o seu c\u00f3digo, efetua um build (compilar, preparar o execut\u00e1vel, rodar os testes automatizados, etc) antes de integrar seu c\u00f3digo com a base principal; Ap\u00f3s realizar o build , o sistema deve ser integrado a base do sistema de controle de vers\u00e3o atrav\u00e9s de sincroniza\u00e7\u00e3o; Este processo deve ser feito frequentemente, evitando-se assim o ac\u00famulo de codifica\u00e7\u00e3o para a integra\u00e7\u00e3o ao reposit\u00f3rio. Algumas metodologias ditam que o desenvolvedor s\u00f3 pode considerar como pronto o trabalho quando o trabalho estiver sincronizado e ent\u00e3o o desenvolvedor realizar um build na m\u00e1quina de integra\u00e7\u00e3o e ap\u00f3s todos os testes serem executados com sucesso. Na integra\u00e7\u00e3o cont\u00ednua o processo de build integrado deve ser feito constantemente, sendo sincronizado sempre que poss\u00edvel, evitando o ac\u00famulo de c\u00f3digos e de testes. Isto porque \u00e9 mais f\u00e1cil encontrar erros em pequenas integra\u00e7\u00f5es do que em uma integra\u00e7\u00e3o grande. Nesse contexto de c\u00f3digo compartilhado e versionamento centralizado por uma ferramenta, a integra\u00e7\u00e3o cont\u00ednua, ou seja, a comunica\u00e7\u00e3o entre as partes que cada desenvolvedor construiu, permite que conflitos de vers\u00e3o sejam resolvidos mais r\u00e1pido, desde que a integra\u00e7\u00e3o ocorra continuamente. A chave para uma boa integra\u00e7\u00e3o, como visto anteriormente, \u00e9 um ambiente de controle de vers\u00e3o centralizado, builds e testes automatizados. Essa pr\u00e1tica reduz erros e riscos cometidos pela equipe, pois como o sistema \u00e9 integrado cont\u00ednua e rapidamente, os erros tamb\u00e9m s\u00e3o detectados na mesma velocidade. Refer\u00eancias Desenvolvimento \u00c1gil Desenvolvimento XP Integra\u00e7\u00e3o Cont\u00ednua Integra\u00e7\u00e3o Cont\u00ednua","title":"XP"},{"location":"agil/xp/#extreming-programing-xp","text":"","title":"Extreming Programing - XP"},{"location":"agil/xp/#framework-xp","text":"O XP, ou Extreme Programming , \u00e9 uma metodologia de desenvolvimento de software que tem como objetivo principal levar ao extremo boas pr\u00e1ticas de programa\u00e7\u00e3o e boas pr\u00e1ticas para o desenvolvimento de software no geral. O XP \u00e9 uma metodologia baseada em valores, que definem uma maneira harmoniosa de trabalho na equipe de desenvolvimento. O foco desta metodologia \u00e9 no desenvolvimento incremental e iterativo de sistemas orientados \u00e0 objetos nos quais os requisitos s\u00e3o inst\u00e1veis e/ou incertos e que possua uma equipe pequena. O XP define uma s\u00e9rie de regras para que o desenvolvimento seja realizado da melhor maneira poss\u00edvel:","title":"Framework XP"},{"location":"agil/xp/#planejamento","text":"As hist\u00f3rias de usu\u00e1rio s\u00e3o escritas S\u00e2o feitas releases pequenas e constantes. O projeto \u00e9 dividido em itera\u00e7\u00f5es. As itera\u00e7\u00f5es s\u00e3o planejadas no momento em que vai se come\u00e7ar o trabalho.","title":"Planejamento:"},{"location":"agil/xp/#gerenciamento","text":"O time deve ter um espa\u00e7o aberto de trabalho. O desenvolvimento deve ter uma velocidade sustent\u00e1vel. Stand-up meetings iniciam o dia de trabalho. O velocity \u00e9 sempre medido. O XP deve ser consertado caso n\u00e3o esteja funcionando.","title":"Gerenciamento:"},{"location":"agil/xp/#design","text":"Simplicidade. Crie solu\u00e7\u00f5es simples para explorar todas as solu\u00e7\u00f5es poss\u00edveis. Funcionalidades n\u00e3o devem ser adicionadas antes da hora. Refatore sempre que poss\u00edvel","title":"Design"},{"location":"agil/xp/#codificacao","text":"O cliente precisa estar sempre dispon\u00edvel. O c\u00f3digo precisa ser escrito utilizando padr\u00f5es. O c\u00f3digo \u00e9 feito utilizando pareamento ( pair programming ). Apenas um par integra o c\u00f3digo de cada vez. Toda a equipe deve participar da cria\u00e7\u00e3o de todas as partes do c\u00f3digo.","title":"C\u00f3difica\u00e7\u00e3o"},{"location":"agil/xp/#testes","text":"Todo o c\u00f3digo deve ter testes unit\u00e1rios. Todo o c\u00f3digo deve passar os testes unit\u00e1rios antes da release . Se um bug existe, testes s\u00e3o criados. Os testes de aceita\u00e7\u00e3o rodam com frequ\u00eancia. Como podemos notar, todas as boas pr\u00e1ticas s\u00e3o levadas ao extremo no XP. Pode-se se dizer que \u00e9 uma metodologia bastante vol\u00e1til. Portanto, para que seja poss\u00edvel a adapta\u00e7\u00e3o \u00e0s frequentes mudan\u00e7as, o XP preconiza ciclos curtos que nos d\u00e1 previsibilidade e redu\u00e7\u00e3o de incertezas/riscos, simplicidade e melhorias constantes de c\u00f3digo ( refactoring ) para facilitar a mudan\u00e7a e Testes Automatizados e Integra\u00e7\u00e3o Cont\u00ednua para aumentar a confian\u00e7a. O m\u00e9todo XP preconiza que Codifica\u00e7\u00e3o \u00e9 a atividade central do projeto, que os Testes (que tamb\u00e9m s\u00e3o c\u00f3digo) servem de especifica\u00e7\u00e3o de requisitos, e a Comunica\u00e7\u00e3o oral entre desenvolvedores \u00e9 fundamental, o que d\u00e1 proximidade a equipe. Isto n\u00e3o quer dizer que a equipe XP n\u00e3o constr\u00f3i documentos e n\u00e3o faz modelagem, ela s\u00f3 n\u00e3o considera que um modelo \u00e9 um documento. Modelos s\u00e3o feitos o tempo todo seja como quadro branco, sess\u00f5es de design, etc, mas servem como um suporte para o concreto que realmente importa.","title":"Testes"},{"location":"agil/xp/#valores-xp","text":"","title":"Valores XP"},{"location":"agil/xp/#comunicacao","text":"Todo o processo \u00e1gil \u00e9 baseado na comunica\u00e7\u00e3o. A comunica\u00e7\u00e3o \u00e9 essencial para o \u00eaxito da metodologia \u00e0gil e pode ser realizada de diversas formas, n\u00e3o somente por documenta\u00e7\u00e3o como nas metodologias tradicionais. A comunica\u00e7\u00e3o entre os desenvolvedores instiga a dissemina\u00e7\u00e3o do conhecimento dentro da equipe, evoluindo-a em aspectos t\u00e9cnicos. J\u00e1 a comunica\u00e7\u00e3o com o cliente garante que o produto entregue atenda \u00e0 suas expectativas.","title":"Comunica\u00e7\u00e3o"},{"location":"agil/xp/#coragem","text":"Consiste na coragem durante a implementa\u00e7\u00e3o de tomar decis\u00f5es que sejam melhores para a equipe e para o c\u00f3digo. Por exemplo, coragem para refatorar c\u00f3digos j\u00e1 implementadas para que a qualidade do c\u00f3digo melhore.","title":"Coragem"},{"location":"agil/xp/#feedback","text":"O feedback consiste em uma frequente comunica\u00e7\u00e3o entre o cliente e a equipe que seja um retorno sobre o sistema. Por exemplo, o que est\u00e1 bom, o que est\u00e1 ruim, o que deve ser implementado, o que deve ser alterado, o que realmente \u00e9 necess\u00e1rio naquele momento e para aquele sistema. Dessa forma, a equipe que est\u00e1 desenvolvendo o sistema tem uma vis\u00e3o clara acerca dos requisitos e do que \u00e9 necess\u00e1rio que seja implementado.","title":"Feedback"},{"location":"agil/xp/#respeito","text":"O respeito \u00e9 essencial para uma boa conviv\u00eancia da equipe. Todos os integrantes devem demonstrar respeito uns aos outros, n\u00e3o desmerecer as id\u00e9ias ou indaga\u00e7\u00f5es alheias.","title":"Respeito"},{"location":"agil/xp/#simplicidade","text":"Sempre que foi iniciado a implementa\u00e7\u00e3o de algo, deve ser questionado qual a forma mais f\u00e1cil de implementar aquele escopo. Quanto mais simples, melhor a manutenibilidade e a qualidade do c\u00f3digo.","title":"Simplicidade"},{"location":"agil/xp/#funcionalidade-pronta-xp","text":"","title":"Funcionalidade Pronta XP"},{"location":"agil/xp/#teste-unitario","text":"Este teste \u00e9 utilizado para validar as classes b\u00e1sicas e os componentes do sistema que s\u00e3o considerados os menores elementos test\u00e1veis. Consiste em verificar se o fluxo de controle e dados est\u00e3o corretos. Deve ser realizado no in\u00edcio da itera\u00e7\u00e3o. S\u00e3o escritos pelos desenvolvedores enquanto codificam o sistema. Devem ser feitos de modo que sejam f\u00e1ceis de executar e e re-executar v\u00e1rias e v\u00e1rias vezes para validar o sistema. Devem ser criados para todas as classes do sistema. S\u00e3o implementados para todos os m\u00e9todos do sistema. S\u00e3o escritos antes e ao decorrer da produ\u00e7\u00e3o do sistema. Devem ser o mais simples poss\u00edvel.","title":"Teste Unit\u00e1rio"},{"location":"agil/xp/#programacao-pareada","text":"Sugere que todo e qualquer c\u00f3digo produzido no projeto seja sempre implementado por duas pessoas juntas, diante do mesmo computador, revezando-se no teclado. Al\u00e9m de parecer ter poucos benef\u00edcios, temos a impress\u00e3o de que ela ir\u00e1 consumir mais recursos ou ir\u00e1 elevar o tempo do desenvolvimento.","title":"Programa\u00e7\u00e3o Pareada"},{"location":"agil/xp/#por-que-parear-com-o-coleguinha","text":"A programa\u00e7\u00e3o em par \u00e9 uma forma eficaz de reduzir a incid\u00eancia de bugs em um sistema. Quando dois desenvolvedores est\u00e3o programando em par, um deles est\u00e1 com as m\u00e3os no teclado e no mouse. O outro est\u00e1 sentado ao lado, olhando para a mesma tela e preocupado em resolver o mesmo problema. \u00c9 importante que eles conversem o tempo todo e troquem id\u00e9ias sobre a solu\u00e7\u00e3o. A programa\u00e7\u00e3o em par tamb\u00e9m ajuda os desenvolvedores a criarem solu\u00e7\u00f5es mais simples, mais r\u00e1pidas de implementar e mais f\u00e1ceis de manter. Isso ocorre em grande parte devido \u00e0 oportunidade de dialogar e trocar id\u00e9ias sobre programas que estejam sendo desenvolvidos. Quando nos deparamos com um problema, buscamos uma solu\u00e7\u00e3o usando todo e qualquer recurso que esteja a nossa disposi\u00e7\u00e3o. E, assim que encontramos uma solu\u00e7\u00e3o, encerramos a busca e a utilizamos. Al\u00e9m do mais, a programa\u00e7\u00e3o em par produz um efeito conhecido como \"press\u00e3o do par\" que faz com que os desenvolvedores tenham maior foco na atividade e faz com que isso se mantenha por mais tempo. Imagine que voc\u00ea esteja programando em par e, de repente, resolva olhar seus emails. Trata-se de uma situa\u00e7\u00e3o embara\u00e7osa, isso faz com que o foco seja mantido no desenvolvimento. Uma das caracter\u00edsticas mais marcantes da programa\u00e7\u00e3o em par \u00e9 a sua capacidade de dissemina\u00e7\u00e3o de conhecimento, especialmente em projetos XP, nos quais os desenvolvedores sempre trocam de pares, fazendo com que haja maior compartilhamento de informa\u00e7\u00f5es ao longo do projeto. A programa\u00e7\u00e3o em par tamb\u00e9m \u00e9 uma forma de fazer com que o desenvolvedor tenha mais confian\u00e7a no c\u00f3digo que produz. Afinal, o c\u00f3digo foi produzido por ele e mais outra pessoa que o ajudou a revis\u00e1-lo. Quando sabemos que mais uma pessoa, ou talvez v\u00e1rias, j\u00e1 olharam para o c\u00f3digo no qual trabalhamos e est\u00e3o de acordo sobre o mesmo, temos maior confian\u00e7a de que ele realmente ir\u00e1 funcionar. Isso significa que a programa\u00e7\u00e3o em par reduz o estresse do desenvolvedor. Consequentemente, as caracter\u00edsticas apresentadas acima fazem com que a programa\u00e7\u00e3o em par acelere o desenvolvimento significativamente, embora \u00e0 primeira vista pare\u00e7a o contr\u00e1rio. Em fun\u00e7\u00e3o dos benef\u00edcios acima, uma atividade feita em par normalmente \u00e9 encerrada mais rapidamente que outra feita por um programador solit\u00e1rio, aumentando a produtividade. Pair programming","title":"Por que parear com o coleguinha?"},{"location":"agil/xp/#variacoes-de-pares","text":"Especialista x Especialista Essa varia\u00e7\u00e3o pode gerar um aumento enorme de produtividade e grandes resultados, entretanto nela pode haver uma falta de resolver problemas de novas formas, visto que dificilmente algu\u00e9m da dupla questionar\u00e1 praticas j\u00e1 estabelecidas. Especialista x Principiante Essa varia\u00e7\u00e3o cria uma excelente oportunidade para o expert mentorear o aprendiz. Ela proporciona a cria\u00e7\u00e3o de novas ideias, visto que o aprendiz deve buscar questionar e aprender pr\u00e1ticas estabelecidas e o expert tem que usar os conhecimentos adquiridos com essas pr\u00e1ticas para explic\u00e1-las e question\u00e1-las tamb\u00e9m. \u00c9 muito importante que o aprendiz n\u00e3o haja passivamente no processo e n\u00e3o hesite em participar. Principiante x Principiante Pode gerar ganhos de produtividade maior do que dois aprendizes trabalhando sozinhos, entretanto n\u00e3o \u00e9 uma varia\u00e7\u00e3o muito encorajada.","title":"Varia\u00e7\u00f5es de Pares"},{"location":"agil/xp/#teste-de-aceitacao","text":"Os Testes de Aceita\u00e7\u00e3o consistem no teste de uma poss\u00edvel aceita\u00e7\u00e3o por parte do cliente. Testes de aceita\u00e7\u00e3o est\u00e3o intimamente ligados com as user stories . O teste de aceita\u00e7\u00e3o visa validar com o cliente o que foi definido nos requisitos do software , portanto, s\u00e3o usados para verificar se o produto desenvolvido est\u00e1 de acordo com o que foi estabelecido nos requisitos. Desse modo os testes de aceita\u00e7\u00e3o est\u00e3o ligadas as funcionalidades do sistema, onde entradas podem ser simuladas e o comportamento de sa\u00edda pode ser observada, esse comportamento deve ser compat\u00edvel com o temos previamente definidos (requisitos). Testes de aceita\u00e7\u00e3o visam testar o sistema do ponto de vista do usu\u00e1rio, de modo que s\u00e3o menos suscet\u00edveis a altera\u00e7\u00f5es. Como o sistema \u00e9 testado com todos os componentes interligados e configurados, inclusive bancos de dados e gerenciadores de filas, h\u00e1 garantias de que cada servi\u00e7o oferecido esteja funcionando.","title":"Teste de aceita\u00e7\u00e3o"},{"location":"agil/xp/#integracao-continua","text":"Integra\u00e7\u00e3o cont\u00ednua consiste em integrar o trabalho diversas vezes ao dia, ao inv\u00e9s de uma \u00fanica vez, assegurando que a base de c\u00f3digo permane\u00e7a consistente ao final de cada integra\u00e7\u00e3o. O objetivo principal de utilizar a integra\u00e7\u00e3o cont\u00ednua \u00e9 verificar se as altera\u00e7\u00f5es ou novas funcionalidades n\u00e3o criaram novos defeitos no projeto j\u00e1 existente. Esse conceito de integra\u00e7\u00e3o cont\u00ednua est\u00e1 atrelado \u00e0 aplica\u00e7\u00e3o de controle de versionamento, geralmente feito com o uso de alguma ferramenta, como o github. O controle de versionamento permite restaurar vers\u00f5es anteriores do sistema, comparar c\u00f3digos, gerenciar altera\u00e7\u00f5es, entre outros, e \u00e9 utilizado por equipes de desenvolvimento que compartilham mesmo c\u00f3digo e projeto. O controle de vers\u00e3o funcionar\u00e1 de forma b\u00e1sica da seguinte forma: O desenvolvedor faz o seu c\u00f3digo, efetua um build (compilar, preparar o execut\u00e1vel, rodar os testes automatizados, etc) antes de integrar seu c\u00f3digo com a base principal; Ap\u00f3s realizar o build , o sistema deve ser integrado a base do sistema de controle de vers\u00e3o atrav\u00e9s de sincroniza\u00e7\u00e3o; Este processo deve ser feito frequentemente, evitando-se assim o ac\u00famulo de codifica\u00e7\u00e3o para a integra\u00e7\u00e3o ao reposit\u00f3rio. Algumas metodologias ditam que o desenvolvedor s\u00f3 pode considerar como pronto o trabalho quando o trabalho estiver sincronizado e ent\u00e3o o desenvolvedor realizar um build na m\u00e1quina de integra\u00e7\u00e3o e ap\u00f3s todos os testes serem executados com sucesso. Na integra\u00e7\u00e3o cont\u00ednua o processo de build integrado deve ser feito constantemente, sendo sincronizado sempre que poss\u00edvel, evitando o ac\u00famulo de c\u00f3digos e de testes. Isto porque \u00e9 mais f\u00e1cil encontrar erros em pequenas integra\u00e7\u00f5es do que em uma integra\u00e7\u00e3o grande. Nesse contexto de c\u00f3digo compartilhado e versionamento centralizado por uma ferramenta, a integra\u00e7\u00e3o cont\u00ednua, ou seja, a comunica\u00e7\u00e3o entre as partes que cada desenvolvedor construiu, permite que conflitos de vers\u00e3o sejam resolvidos mais r\u00e1pido, desde que a integra\u00e7\u00e3o ocorra continuamente. A chave para uma boa integra\u00e7\u00e3o, como visto anteriormente, \u00e9 um ambiente de controle de vers\u00e3o centralizado, builds e testes automatizados. Essa pr\u00e1tica reduz erros e riscos cometidos pela equipe, pois como o sistema \u00e9 integrado cont\u00ednua e rapidamente, os erros tamb\u00e9m s\u00e3o detectados na mesma velocidade.","title":"Integra\u00e7\u00e3o Cont\u00ednua"},{"location":"agil/xp/#referencias","text":"Desenvolvimento \u00c1gil Desenvolvimento XP Integra\u00e7\u00e3o Cont\u00ednua Integra\u00e7\u00e3o Cont\u00ednua","title":"Refer\u00eancias"},{"location":"devops/automacoes/","text":"Integra\u00e7\u00e3o Cont\u00ednua (Travis - Docker - Docker-Compose) No arquivo .travis.yml \u00e9 necess\u00e1rio configurar o docker e o docker-compose. Passo 1: Defina os servi\u00e7os utilizados, no caso o docker: services: - docker Passo 2: Defina a vers\u00e3o do docker-compose a ser instalada: env: - DOCKER_COMPOSE_VERSION=1.15.0 Passo 3: Instale o docker-compose na integra\u00e7\u00e3o cont\u00ednua: before_install: - sudo rm /usr/local/bin/docker-compose - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` docker-compose - chmod +x docker-compose - sudo mv docker-compose /usr/local/bin Passo 4: Crie os containers e execute os scripts necess\u00e1rios de build/testes: script: - docker-compose up --build -d ... Deploy (Heroku) Ap\u00f3s ter feito as configura\u00e7\u00f5es de integra\u00e7\u00e3o cont\u00ednua, caso deseje utilizar o heroku para deploy, \u00e9 necess\u00e1rio, primeiramente, criar uma conta no heroku. Com isso feito \u00e9 preciso criar uma aplica\u00e7\u00e3o. Passo 1: Na dashboard do heroku selecione a op\u00e7\u00e3o \"New\" e depois \"Create new App\": Passo 2: Digite o nome do seu app e selecione a regi\u00e3o, por default ser\u00e1 United States Passo 3: Verifique qual a api-key do usu\u00e1rio, selecione \"Account Settings\" e clique em \"Reveal\" Passo 4: Agora no travis.ci, entre no local onde a integra\u00e7\u00e3o cont\u00ednua est\u00e1 configurada e selecione a op\u00e7\u00e3o \"More Options\" e depois \"Settings\". Passo 5: Adicione a api-key do heroku como uma vari\u00e1vel de ambiente, \"Environment Variables\": Passo 6: Configure o arquivo .travis.yml com deploy, onde o provider \u00e9 o heroku que j\u00e1 \u00e9 integrado com o travis, a api-key \u00e9 a vari\u00e1vel de ambiente do usu\u00e1rio criador do app, o app \u00e9 aquele criado no heroku e a branch a ser executada o deploy, normalmente a master. Exemplo: deploy: provider: heroku api_key: $SECRET_USER_KEY app: exemplo-gpp-mds on: master Observa\u00e7\u00f5es: Existem particularidades de linguagens espec\u00edficas, e essas nu\u00e2ncias n\u00e3o foram abordadas nesse documento. Gulp O Gulp \u00e9 uma ferramenta de automa\u00e7\u00e3o de tarefas feita em JavaScript e rodando em cima do Node.js. Como o core da execu\u00e7\u00e3o \u00e9 o Node, precisamos come\u00e7ar nossos trabalhos definindo o arquivo de vai gerenciar os m\u00f3dulos gulp que voc\u00ea utilizar\u00e1 no seu projeto(Caelum). Sincroniza\u00e7\u00e3o com o Browser Os arquivos est\u00e1ticos mudam constantemente e existe uma dificuldade de atualiza\u00e7\u00e3o dos arquivos no browser , simplesmente para modifica\u00e7\u00f5es de arquivos html, js e css \u00e9 necess\u00e1rio um dar reload na p\u00e1gina utilizada. Normalmente, os arquivos se mant\u00e9m em cache e \u00e9 comum que estes continuem na vers\u00e3o anterior. O gulp juntamente com o browser-sync oferece uma solu\u00e7\u00e3o para isso. Onde arquivos ou pastas s\u00e3o observadas e quando s\u00e3o atualizadas a p\u00e1gina em quest\u00e3o \u00e9 recarregada. Portanto, \u00e9 mais simples para em ambiente de desenvolvimento, principalmente, com a utiliza\u00e7\u00e3o de frameworks web como o rails e o django. N\u00e3o se preocupando com atualiza\u00e7\u00e3o dos arquivos est\u00e1ticos no navegador. Abaixo existe um exemplo de como configurar arquivos a serem observados e auto-sincronizar com o gulp. gulpfile.js use strict ; // Indica as depend\u00eancias necess\u00e1rias var gulp = require( gulp ); var browserSync = require( browser-sync ).create(); // Define o diret\u00f3rio a ser utilizado var directoryjs = ./*.js // Por padr\u00e3o, o gulp executa um server utilizando a porta 3000 // Abaixo existe a defini\u00e7\u00e3o das configura\u00e7\u00f5es do servidor, sendo que o proxy ser\u00e1 incluido no localhost:3000 // Onde a porta 8000 \u00e9 o padr\u00e3o do django gulp.task( browserSync , function() { browserSync.init({ open: false, notify: false, proxy: localhost:8000 }) }); // Define os arquivos a serem observados e caso haja modifica\u00e7\u00e3o nesses arquivos, // o browser ser\u00e1 recarregado gulp.task( watch , function() { gulp.watch(directoryjs, browserSync.reload); }); // \u00c9 a fun\u00e7\u00e3o principal, como a main em c, onde \u00e9 executado o restante das fun\u00e7\u00f5es gulp.task( default ,[ browserSync , watch ]); Depend\u00eancias necess\u00e1rias As depend\u00eancias necess\u00e1rias para o gulp \u00e9 o node.js que \u00e9 um interpretador de c\u00f3digo javascript e o npm que \u00e9 um gerenciador de pacotes do node.js. Como instalar o node.js: apt-get install -y nodejs Como instalar o npm: apt-get install npm -y PS: Algumas depend\u00eancias internas do gulp necessitam de uma vers\u00e3o do node.js espec\u00edfica. Ap\u00f3s a instala\u00e7\u00e3o das depend\u00eancais acima \u00e9 necess\u00e1rio instalar o gulp e o browser-sync, com os seguintes comandos: npm install -g gulp-cli gulp npm install browser-sync \u00c9 mais recomendado utilizar um arquivo de depend\u00eancias node: O packge.json. Com o arquivo configurado basta utilizar o seguinte comando comando: npm install Utilizando Django com o Gulp Para utilizar o servidor do django integrado com o gulp para sincronizar arquivos est\u00e1ticos ao browser \u00e9 simples basta executar os servidores juntamente, mapeando o proxy do browser-sync com o server do django(pode ser visto acima). Utilize o seguinte comando: python3 aplication/manage.py runserver . npm run gulp Note que \u00e9 poss\u00edvel acessar o localhost:8000, no entanto a sincroniza\u00e7\u00e3o s\u00f3 \u00e9 feita no endere\u00e7o localhost:3000. Utilizando Gulp e Django no docker-compose Para utilizar o gulp e django no docker-compose \u00e9 necessario mapear as portas 8000:8000 e a 3000:3000. Al\u00e9m disso \u00e9 preciso adiconar os seguintes comandos no docker-compose.yml para executar os servidores: python3 medical_prescription/manage.py runserver 0.0.0.0:8000 . ./node_modules/.bin/gulp default Refer\u00eancias SOUZA, Leonardo. Bye bye Grunt.js, hello Gulp.js!. Dispon\u00edvel em: http://blog.caelum.com.br/bye-bye-grunt-js-hello-gulp-js/ Acesso em: 29 de Novembro de 2017 TRAVIS. Heroku Deployment. Dispon\u00edvel em : https://docs.travis-ci.com/user/deployment/heroku/ . Acesso em: 29 de Novembro de 2017 TRAVIS. Using Docker in Builds. Dispon\u00edvel em : https://docs.travis-ci.com/user/docker/ Acesso em: 29 de Novembro de 2017","title":"Automa\u00e7\u00f5es"},{"location":"devops/automacoes/#integracao-continua-travis-docker-docker-compose","text":"No arquivo .travis.yml \u00e9 necess\u00e1rio configurar o docker e o docker-compose. Passo 1: Defina os servi\u00e7os utilizados, no caso o docker: services: - docker Passo 2: Defina a vers\u00e3o do docker-compose a ser instalada: env: - DOCKER_COMPOSE_VERSION=1.15.0 Passo 3: Instale o docker-compose na integra\u00e7\u00e3o cont\u00ednua: before_install: - sudo rm /usr/local/bin/docker-compose - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` docker-compose - chmod +x docker-compose - sudo mv docker-compose /usr/local/bin Passo 4: Crie os containers e execute os scripts necess\u00e1rios de build/testes: script: - docker-compose up --build -d ...","title":"Integra\u00e7\u00e3o Cont\u00ednua (Travis - Docker - Docker-Compose)"},{"location":"devops/automacoes/#deploy-heroku","text":"Ap\u00f3s ter feito as configura\u00e7\u00f5es de integra\u00e7\u00e3o cont\u00ednua, caso deseje utilizar o heroku para deploy, \u00e9 necess\u00e1rio, primeiramente, criar uma conta no heroku. Com isso feito \u00e9 preciso criar uma aplica\u00e7\u00e3o. Passo 1: Na dashboard do heroku selecione a op\u00e7\u00e3o \"New\" e depois \"Create new App\": Passo 2: Digite o nome do seu app e selecione a regi\u00e3o, por default ser\u00e1 United States Passo 3: Verifique qual a api-key do usu\u00e1rio, selecione \"Account Settings\" e clique em \"Reveal\" Passo 4: Agora no travis.ci, entre no local onde a integra\u00e7\u00e3o cont\u00ednua est\u00e1 configurada e selecione a op\u00e7\u00e3o \"More Options\" e depois \"Settings\". Passo 5: Adicione a api-key do heroku como uma vari\u00e1vel de ambiente, \"Environment Variables\": Passo 6: Configure o arquivo .travis.yml com deploy, onde o provider \u00e9 o heroku que j\u00e1 \u00e9 integrado com o travis, a api-key \u00e9 a vari\u00e1vel de ambiente do usu\u00e1rio criador do app, o app \u00e9 aquele criado no heroku e a branch a ser executada o deploy, normalmente a master. Exemplo: deploy: provider: heroku api_key: $SECRET_USER_KEY app: exemplo-gpp-mds on: master Observa\u00e7\u00f5es: Existem particularidades de linguagens espec\u00edficas, e essas nu\u00e2ncias n\u00e3o foram abordadas nesse documento.","title":"Deploy (Heroku)"},{"location":"devops/automacoes/#gulp","text":"O Gulp \u00e9 uma ferramenta de automa\u00e7\u00e3o de tarefas feita em JavaScript e rodando em cima do Node.js. Como o core da execu\u00e7\u00e3o \u00e9 o Node, precisamos come\u00e7ar nossos trabalhos definindo o arquivo de vai gerenciar os m\u00f3dulos gulp que voc\u00ea utilizar\u00e1 no seu projeto(Caelum).","title":"Gulp"},{"location":"devops/automacoes/#sincronizacao-com-o-browser","text":"Os arquivos est\u00e1ticos mudam constantemente e existe uma dificuldade de atualiza\u00e7\u00e3o dos arquivos no browser , simplesmente para modifica\u00e7\u00f5es de arquivos html, js e css \u00e9 necess\u00e1rio um dar reload na p\u00e1gina utilizada. Normalmente, os arquivos se mant\u00e9m em cache e \u00e9 comum que estes continuem na vers\u00e3o anterior. O gulp juntamente com o browser-sync oferece uma solu\u00e7\u00e3o para isso. Onde arquivos ou pastas s\u00e3o observadas e quando s\u00e3o atualizadas a p\u00e1gina em quest\u00e3o \u00e9 recarregada. Portanto, \u00e9 mais simples para em ambiente de desenvolvimento, principalmente, com a utiliza\u00e7\u00e3o de frameworks web como o rails e o django. N\u00e3o se preocupando com atualiza\u00e7\u00e3o dos arquivos est\u00e1ticos no navegador. Abaixo existe um exemplo de como configurar arquivos a serem observados e auto-sincronizar com o gulp. gulpfile.js use strict ; // Indica as depend\u00eancias necess\u00e1rias var gulp = require( gulp ); var browserSync = require( browser-sync ).create(); // Define o diret\u00f3rio a ser utilizado var directoryjs = ./*.js // Por padr\u00e3o, o gulp executa um server utilizando a porta 3000 // Abaixo existe a defini\u00e7\u00e3o das configura\u00e7\u00f5es do servidor, sendo que o proxy ser\u00e1 incluido no localhost:3000 // Onde a porta 8000 \u00e9 o padr\u00e3o do django gulp.task( browserSync , function() { browserSync.init({ open: false, notify: false, proxy: localhost:8000 }) }); // Define os arquivos a serem observados e caso haja modifica\u00e7\u00e3o nesses arquivos, // o browser ser\u00e1 recarregado gulp.task( watch , function() { gulp.watch(directoryjs, browserSync.reload); }); // \u00c9 a fun\u00e7\u00e3o principal, como a main em c, onde \u00e9 executado o restante das fun\u00e7\u00f5es gulp.task( default ,[ browserSync , watch ]);","title":"Sincroniza\u00e7\u00e3o com o Browser"},{"location":"devops/automacoes/#dependencias-necessarias","text":"As depend\u00eancias necess\u00e1rias para o gulp \u00e9 o node.js que \u00e9 um interpretador de c\u00f3digo javascript e o npm que \u00e9 um gerenciador de pacotes do node.js. Como instalar o node.js: apt-get install -y nodejs Como instalar o npm: apt-get install npm -y PS: Algumas depend\u00eancias internas do gulp necessitam de uma vers\u00e3o do node.js espec\u00edfica. Ap\u00f3s a instala\u00e7\u00e3o das depend\u00eancais acima \u00e9 necess\u00e1rio instalar o gulp e o browser-sync, com os seguintes comandos: npm install -g gulp-cli gulp npm install browser-sync \u00c9 mais recomendado utilizar um arquivo de depend\u00eancias node: O packge.json. Com o arquivo configurado basta utilizar o seguinte comando comando: npm install","title":"Depend\u00eancias necess\u00e1rias"},{"location":"devops/automacoes/#utilizando-django-com-o-gulp","text":"Para utilizar o servidor do django integrado com o gulp para sincronizar arquivos est\u00e1ticos ao browser \u00e9 simples basta executar os servidores juntamente, mapeando o proxy do browser-sync com o server do django(pode ser visto acima). Utilize o seguinte comando: python3 aplication/manage.py runserver . npm run gulp Note que \u00e9 poss\u00edvel acessar o localhost:8000, no entanto a sincroniza\u00e7\u00e3o s\u00f3 \u00e9 feita no endere\u00e7o localhost:3000.","title":"Utilizando Django com  o Gulp"},{"location":"devops/automacoes/#utilizando-gulp-e-django-no-docker-compose","text":"Para utilizar o gulp e django no docker-compose \u00e9 necessario mapear as portas 8000:8000 e a 3000:3000. Al\u00e9m disso \u00e9 preciso adiconar os seguintes comandos no docker-compose.yml para executar os servidores: python3 medical_prescription/manage.py runserver 0.0.0.0:8000 . ./node_modules/.bin/gulp default","title":"Utilizando Gulp e Django no docker-compose"},{"location":"devops/automacoes/#referencias","text":"SOUZA, Leonardo. Bye bye Grunt.js, hello Gulp.js!. Dispon\u00edvel em: http://blog.caelum.com.br/bye-bye-grunt-js-hello-gulp-js/ Acesso em: 29 de Novembro de 2017 TRAVIS. Heroku Deployment. Dispon\u00edvel em : https://docs.travis-ci.com/user/deployment/heroku/ . Acesso em: 29 de Novembro de 2017 TRAVIS. Using Docker in Builds. Dispon\u00edvel em : https://docs.travis-ci.com/user/docker/ Acesso em: 29 de Novembro de 2017","title":"Refer\u00eancias"},{"location":"devops/docker/","text":"Configura\u00e7\u00e3o de ambiente virtual utilizando Docker Docker \u00e9 um projeto de c\u00f3digo aberto que automatiza a implanta\u00e7\u00e3o de aplicativos dentro de recipientes de software, fornecendo uma camada adicional de abstra\u00e7\u00e3o e automa\u00e7\u00e3o de virtualiza\u00e7\u00e3o de sistemas. \"Docker \u00e9 uma ferramenta que permite empacotar uma aplica\u00e7\u00e3o com todas as suas depend\u00eancias em uma unidade padronizada para desenvolvimento de software.\u201d Instala\u00e7\u00e3o Instale o Docker Utiliza\u00e7\u00e3o Faz uma listagem das imagens em seu computador $ docker images Baixa uma imagem em sua m\u00e1quina $ docker pull nome_imagem Envia a imagem para reposit\u00f3rio remoto do Docker Hub $ docker push nome_imagem Cria um container utilizando uma imagem existente ou se ela n\u00e3o estiver adicionada a sua listagem de imagens, ele procurar\u00e1 no docker hub. $ docker run -it nome_imagem Lista os containers em execu\u00e7\u00e3o $ docker ps Lista os containers em execu\u00e7\u00e3o e os desligados $ docker ps -a Para o container ou inicia o containers $ docker stop/start nome_container Exclui container ou imagem $ docker rm/rmi nome_container/nome_imagem Benchmarking Vantagens Containers f\u00e1cilmente port\u00e1veis: voc\u00ea pode criar uma imagem de toda a configura\u00e7\u00e3o e aplicativos instalados em seu container, transferir e instalar em outro host com Docker previamente instalado. Versionamento: Docker permite que voc\u00ea versione as altera\u00e7\u00f5es de um container de uma forma muito semelhante ao git. Permitindo portanto verificar as diferen\u00e7as entre vers\u00f5es, commitar novas vers\u00f5es e voltar (rollback) vers\u00f5es. Reutiliza\u00e7\u00e3o de componentes: como citado anteriormente as imagens criadas podem ser reutilizadas, vamos supor que diversas de suas aplica\u00e7\u00f5es utilizem um stack com Apache e MySQL, desta maneira voc\u00ea instala e configura ambos e cria uma imagem base, contendo estes itens, que representar\u00e1 a sua instala\u00e7\u00e3o e configura\u00e7\u00e3o, desta maneira esta imagem poder\u00e1 ser reutilizada em quantos forem os containers que a necessite Compartilhamento: o Docker Hub, citado no inc\u00edcio, j\u00e1 est\u00e1 povoado de milhares de containers com as mais diversas aplica\u00e7\u00f5es instaladas e configura\u00e7\u00f5es aplicadas, desta maneira voc\u00ea pode r\u00e1pidamente criar sua aplica\u00e7\u00e3o com uma base desenvolvida por outra pessoa, ou ainda criar sua base e compartilh\u00e1-la. Desvantagens Pelo fato de compartilhar o kernel, seus containers n\u00e3o ter\u00e3o completo isolamento. N\u00e3o tem garantia de recursos a n\u00edvel de hardware. Enquanto a instala\u00e7\u00e3o \u00e9 f\u00e1cil no Linux, outros sistemas precisam de M\u00e1quina Virtual. Principais diferen\u00e7as de Vagrant e Docker Recurso Docker Vagrant Tipo de virtualiza\u00e7\u00e3o VE VM Garantia de recursos a n\u00edvel de hardware N\u00e3o Sim Tempo de inicializa\u00e7\u00e3o Segundos Alguns minutos N\u00edvel de isolamento Parcial Total Tamanho dos sitemas virtuais Muito Leve Pesado Refer\u00eancias Aprendendo Docker. Dispon\u00edvel em https://s3.novatec.com.br/capitulos/capitulo-9788575224861.pdf Docker. Dispon\u00edvel em https://www.docker.com/","title":"Docker"},{"location":"devops/docker/#configuracao-de-ambiente-virtual-utilizando-docker","text":"Docker \u00e9 um projeto de c\u00f3digo aberto que automatiza a implanta\u00e7\u00e3o de aplicativos dentro de recipientes de software, fornecendo uma camada adicional de abstra\u00e7\u00e3o e automa\u00e7\u00e3o de virtualiza\u00e7\u00e3o de sistemas. \"Docker \u00e9 uma ferramenta que permite empacotar uma aplica\u00e7\u00e3o com todas as suas depend\u00eancias em uma unidade padronizada para desenvolvimento de software.\u201d","title":"Configura\u00e7\u00e3o de ambiente virtual utilizando Docker"},{"location":"devops/docker/#instalacao","text":"Instale o Docker","title":"Instala\u00e7\u00e3o"},{"location":"devops/docker/#utilizacao","text":"Faz uma listagem das imagens em seu computador $ docker images Baixa uma imagem em sua m\u00e1quina $ docker pull nome_imagem Envia a imagem para reposit\u00f3rio remoto do Docker Hub $ docker push nome_imagem Cria um container utilizando uma imagem existente ou se ela n\u00e3o estiver adicionada a sua listagem de imagens, ele procurar\u00e1 no docker hub. $ docker run -it nome_imagem Lista os containers em execu\u00e7\u00e3o $ docker ps Lista os containers em execu\u00e7\u00e3o e os desligados $ docker ps -a Para o container ou inicia o containers $ docker stop/start nome_container Exclui container ou imagem $ docker rm/rmi nome_container/nome_imagem","title":"Utiliza\u00e7\u00e3o"},{"location":"devops/docker/#benchmarking","text":"","title":"Benchmarking"},{"location":"devops/docker/#vantagens","text":"Containers f\u00e1cilmente port\u00e1veis: voc\u00ea pode criar uma imagem de toda a configura\u00e7\u00e3o e aplicativos instalados em seu container, transferir e instalar em outro host com Docker previamente instalado. Versionamento: Docker permite que voc\u00ea versione as altera\u00e7\u00f5es de um container de uma forma muito semelhante ao git. Permitindo portanto verificar as diferen\u00e7as entre vers\u00f5es, commitar novas vers\u00f5es e voltar (rollback) vers\u00f5es. Reutiliza\u00e7\u00e3o de componentes: como citado anteriormente as imagens criadas podem ser reutilizadas, vamos supor que diversas de suas aplica\u00e7\u00f5es utilizem um stack com Apache e MySQL, desta maneira voc\u00ea instala e configura ambos e cria uma imagem base, contendo estes itens, que representar\u00e1 a sua instala\u00e7\u00e3o e configura\u00e7\u00e3o, desta maneira esta imagem poder\u00e1 ser reutilizada em quantos forem os containers que a necessite Compartilhamento: o Docker Hub, citado no inc\u00edcio, j\u00e1 est\u00e1 povoado de milhares de containers com as mais diversas aplica\u00e7\u00f5es instaladas e configura\u00e7\u00f5es aplicadas, desta maneira voc\u00ea pode r\u00e1pidamente criar sua aplica\u00e7\u00e3o com uma base desenvolvida por outra pessoa, ou ainda criar sua base e compartilh\u00e1-la.","title":"Vantagens"},{"location":"devops/docker/#desvantagens","text":"Pelo fato de compartilhar o kernel, seus containers n\u00e3o ter\u00e3o completo isolamento. N\u00e3o tem garantia de recursos a n\u00edvel de hardware. Enquanto a instala\u00e7\u00e3o \u00e9 f\u00e1cil no Linux, outros sistemas precisam de M\u00e1quina Virtual.","title":"Desvantagens"},{"location":"devops/docker/#principais-diferencas-de-vagrant-e-docker","text":"Recurso Docker Vagrant Tipo de virtualiza\u00e7\u00e3o VE VM Garantia de recursos a n\u00edvel de hardware N\u00e3o Sim Tempo de inicializa\u00e7\u00e3o Segundos Alguns minutos N\u00edvel de isolamento Parcial Total Tamanho dos sitemas virtuais Muito Leve Pesado","title":"Principais diferen\u00e7as de Vagrant e Docker"},{"location":"devops/docker/#referencias","text":"Aprendendo Docker. Dispon\u00edvel em https://s3.novatec.com.br/capitulos/capitulo-9788575224861.pdf Docker. Dispon\u00edvel em https://www.docker.com/","title":"Refer\u00eancias"},{"location":"devops/docker_compose/","text":"Sobre o Docker Compose O docker compose \u00e9 uma ferramenta para orquestrar e executar diversos container docker . Auxilia na organiza\u00e7\u00e3o evitando imensas linhas de comando docker com muitas passagens de par\u00e2metros. Configura\u00e7\u00e3o O arquivo yml O compose usa um arquivo de configura\u00e7\u00e3o chamado docker-compose.yml , nesse arquivo define-se os servi\u00e7os que ser\u00e3o levantados pelo compose. Os servi\u00e7os usam uma imagem base, podendo ser criada a partir de um Dockerfile ou baixada do docker hub . Veja o exemplo abaixo: version: 3 services: redis: build: . ports: - 6379:6379 No exemplo, cria-se um servi\u00e7o redis utilizando o Dockerfile que se encontra na mesma pasta que o docker-compose.yml indicado pelo caractere . . Poderia-se tamb\u00e9m utilizar a imagem oficial do redis disponivel no docker hub, basta substituir o build: . por image: redis , onde o valor redis na chave refere-se ao nome da imagem. Chaves b\u00e1sicas Ports A comunica\u00e7\u00e3o com um container \u00e9 normalmente feita via porta exposta. No exemplo acima, a porta 6379 do container \u00e9 mapeada para a porta de mesmo n\u00famero do host . Isto significa que ao acessar a porta 6379 no localhost o conte\u00fado apresentado refere-se \u00e0 aplica\u00e7\u00e3o em execu\u00e7\u00e3o no container. O mapeamento \u00e9 iniciado pela porta do host seguida pela porta do container: \"host:conatainer\" . Volumes Arquivos e pastas podem ser compartilhados entre o host e um container, ou entre containers, usando volumes. No docker-compose.yml o mapeamento de volume \u00e9 feita com o uso da chave volumes . No exemplo, o arquivo nginx.conf \u00e9 compartilhado com o container nginx . Dessa forma ser\u00e1 poss\u00edvel executar altera\u00e7\u00f5es nas configura\u00e7\u00f5es do nginx diretamente do host, de forma que essas mudan\u00e7as s\u00e3o refletidas no arquivo nginx.conf do container. services: nginx: image: nginx ports: - 80:80 volumes: - ./nginx.conf:/etc/nginx/nginx.conf Depends_on Muitas vezes \u00e9 preciso subir containers em uma ordem espec\u00edfica por quest\u00f5es de depend\u00eancia. A chave depends_on evita que um container suba antes de suas dependencias estarem em execu\u00e7\u00e3o. No exemplo, o servi\u00e7o web ir\u00e1 esperar o servi\u00e7o redis para iniciar. web: build: . ports: - 8000:8000 depends_on: - redis Command Esta chave executa o comando passado como seu valor assim que o container est\u00e1 em execu\u00e7\u00e3o. No exemplo, ao terminar a build da imagem, ser\u00e1 levantado o servidor do django. web: build: . command: python3 manage.py runserver 0.0.0.0:8000 Environment Vari\u00e1veis de ambiente podem ser passadas aos containers usando a chave enviroment , como no exemplo abaixo: postgres: image: postgres environment: POSTGRES_PASSWORD: 1234 POSTGRES_DB: postgres POSTGRES_USER: eu Por\u00e9m, por quest\u00f5es de segura\u00e7a n\u00e3o \u00e9 legal expor senhas desta maneira. Mas, ao usar outra chave chamada env_file , \u00e9 poss\u00edvel externalizar as vari\u00e1veis para um arquivo .env e utiliz\u00e1-lo como a seguir: web: env_file: - web-variables.env Executando o Docker Compose Ap\u00f3s configurado o docker-compose.yml, pode-se executar e subir todos os servi\u00e7os com o comando: docker-compose up Comandos \u00fateis: docker-compose up : Constr\u00f3i as imagens, (re)cria, inicia e anexa containers a um servi\u00e7o. A flag -d executa os cantainers em segundo plano. docker-compose down : Termina a execu\u00e7\u00e3o dos containers, os remove e remove networks e volumes criados por up . docker-compose stop : Termina a execu\u00e7\u00e3o dos containers sem remov\u00ea-los. docker-compose start : Inicia containers existentes para um servi\u00e7o. docker-compose logs : Exibe sa\u00edda de log dos servi\u00e7os, a flag -f segue a sa\u00edda de log. docker-compose exec web bash : Executa o comado bash no servi\u00e7o web . Obs: Estes comandos exigem sudo, a menos, que tenha configurado para que n\u00e3o.","title":"Docker Compose"},{"location":"devops/docker_compose/#sobre-o-docker-compose","text":"O docker compose \u00e9 uma ferramenta para orquestrar e executar diversos container docker . Auxilia na organiza\u00e7\u00e3o evitando imensas linhas de comando docker com muitas passagens de par\u00e2metros.","title":"Sobre o Docker Compose"},{"location":"devops/docker_compose/#configuracao","text":"","title":"Configura\u00e7\u00e3o"},{"location":"devops/docker_compose/#o-arquivo-yml","text":"O compose usa um arquivo de configura\u00e7\u00e3o chamado docker-compose.yml , nesse arquivo define-se os servi\u00e7os que ser\u00e3o levantados pelo compose. Os servi\u00e7os usam uma imagem base, podendo ser criada a partir de um Dockerfile ou baixada do docker hub . Veja o exemplo abaixo: version: 3 services: redis: build: . ports: - 6379:6379 No exemplo, cria-se um servi\u00e7o redis utilizando o Dockerfile que se encontra na mesma pasta que o docker-compose.yml indicado pelo caractere . . Poderia-se tamb\u00e9m utilizar a imagem oficial do redis disponivel no docker hub, basta substituir o build: . por image: redis , onde o valor redis na chave refere-se ao nome da imagem.","title":"O arquivo yml"},{"location":"devops/docker_compose/#chaves-basicas","text":"","title":"Chaves b\u00e1sicas"},{"location":"devops/docker_compose/#ports","text":"A comunica\u00e7\u00e3o com um container \u00e9 normalmente feita via porta exposta. No exemplo acima, a porta 6379 do container \u00e9 mapeada para a porta de mesmo n\u00famero do host . Isto significa que ao acessar a porta 6379 no localhost o conte\u00fado apresentado refere-se \u00e0 aplica\u00e7\u00e3o em execu\u00e7\u00e3o no container. O mapeamento \u00e9 iniciado pela porta do host seguida pela porta do container: \"host:conatainer\" .","title":"Ports"},{"location":"devops/docker_compose/#volumes","text":"Arquivos e pastas podem ser compartilhados entre o host e um container, ou entre containers, usando volumes. No docker-compose.yml o mapeamento de volume \u00e9 feita com o uso da chave volumes . No exemplo, o arquivo nginx.conf \u00e9 compartilhado com o container nginx . Dessa forma ser\u00e1 poss\u00edvel executar altera\u00e7\u00f5es nas configura\u00e7\u00f5es do nginx diretamente do host, de forma que essas mudan\u00e7as s\u00e3o refletidas no arquivo nginx.conf do container. services: nginx: image: nginx ports: - 80:80 volumes: - ./nginx.conf:/etc/nginx/nginx.conf","title":"Volumes"},{"location":"devops/docker_compose/#depends_on","text":"Muitas vezes \u00e9 preciso subir containers em uma ordem espec\u00edfica por quest\u00f5es de depend\u00eancia. A chave depends_on evita que um container suba antes de suas dependencias estarem em execu\u00e7\u00e3o. No exemplo, o servi\u00e7o web ir\u00e1 esperar o servi\u00e7o redis para iniciar. web: build: . ports: - 8000:8000 depends_on: - redis","title":"Depends_on"},{"location":"devops/docker_compose/#command","text":"Esta chave executa o comando passado como seu valor assim que o container est\u00e1 em execu\u00e7\u00e3o. No exemplo, ao terminar a build da imagem, ser\u00e1 levantado o servidor do django. web: build: . command: python3 manage.py runserver 0.0.0.0:8000","title":"Command"},{"location":"devops/docker_compose/#environment","text":"Vari\u00e1veis de ambiente podem ser passadas aos containers usando a chave enviroment , como no exemplo abaixo: postgres: image: postgres environment: POSTGRES_PASSWORD: 1234 POSTGRES_DB: postgres POSTGRES_USER: eu Por\u00e9m, por quest\u00f5es de segura\u00e7a n\u00e3o \u00e9 legal expor senhas desta maneira. Mas, ao usar outra chave chamada env_file , \u00e9 poss\u00edvel externalizar as vari\u00e1veis para um arquivo .env e utiliz\u00e1-lo como a seguir: web: env_file: - web-variables.env","title":"Environment"},{"location":"devops/docker_compose/#executando-o-docker-compose","text":"Ap\u00f3s configurado o docker-compose.yml, pode-se executar e subir todos os servi\u00e7os com o comando: docker-compose up","title":"Executando o Docker Compose"},{"location":"devops/docker_compose/#comandos-uteis","text":"docker-compose up : Constr\u00f3i as imagens, (re)cria, inicia e anexa containers a um servi\u00e7o. A flag -d executa os cantainers em segundo plano. docker-compose down : Termina a execu\u00e7\u00e3o dos containers, os remove e remove networks e volumes criados por up . docker-compose stop : Termina a execu\u00e7\u00e3o dos containers sem remov\u00ea-los. docker-compose start : Inicia containers existentes para um servi\u00e7o. docker-compose logs : Exibe sa\u00edda de log dos servi\u00e7os, a flag -f segue a sa\u00edda de log. docker-compose exec web bash : Executa o comado bash no servi\u00e7o web . Obs: Estes comandos exigem sudo, a menos, que tenha configurado para que n\u00e3o.","title":"Comandos \u00fateis:"},{"location":"devops/materiais/","text":"Download dos materiais sobre DevOps Automa\u00e7\u00e3o da Build Automa\u00e7\u00e3o da configura\u00e7\u00e3o de ambiente Conceitos de GCS Integra\u00e7\u00e3o cont\u00ednua Controle de vers\u00e3o EP - Aula 1 Empacotamento Isolamento de ambiente Icons made by Smashicons from www.flaticon.com","title":"Materiais"},{"location":"devops/materiais/#download-dos-materiais-sobre-devops","text":"Automa\u00e7\u00e3o da Build Automa\u00e7\u00e3o da configura\u00e7\u00e3o de ambiente Conceitos de GCS Integra\u00e7\u00e3o cont\u00ednua Controle de vers\u00e3o EP - Aula 1 Empacotamento Isolamento de ambiente Icons made by Smashicons from www.flaticon.com","title":"Download dos materiais sobre DevOps"},{"location":"devops/roadmap/","text":"Roadmap DevOps Dentro de uma equipe de desenvolvimento de software , o DevOps \u00e9 respons\u00e1vel por automatizar a cadeia de processos que leva o c\u00f3digo feito pelo desenvolvedor at\u00e9 o usu\u00e1rio. A integra\u00e7\u00e3o do membro com a equipe \u00e9 fundamental para que os interesses dos stakeholders sejam sempre respeitados e apoiados pelos processos definidos pelo time. Como sugest\u00e3o de caminho a ser trilhado pelo membro DevOps, temos as seguintes etapas: 1. Desenhar pipeline de produ\u00e7\u00e3o + integra\u00e7\u00e3o + deploy Ap\u00f3s definir-se a estrutura b\u00e1sica da arquitetura do projeto, \u00e9 fundamental que se defina todas as etapas que levam o trabalho do programador ao ambiente de produ\u00e7\u00e3o. Aqui, deve-se levar em considera\u00e7\u00e3o a opini\u00e3o dos stakeholders para responder a quest\u00f5es como: Com qual frequ\u00eancia o ambiente de produ\u00e7\u00e3o/homologa\u00e7\u00e3o ser\u00e1 atualizado? Para quem estar\u00e1 dispon\u00edvel o ambiente de homologa\u00e7\u00e3o? Haver\u00e1 um ambiente de desenvolvimento, fechado para os membros da equipe? Como os desenvolvedores v\u00e3o realizar a entrega dos artefatos criados? De quantos servi\u00e7os estamos falando? Pode haver o surgimento de mais servi\u00e7os? Como est\u00e1 previsto o funcionamento da arquitetura do nosso produto de software ? ... As seguintes issues podem ajudar a ter um bom rendimento nesta etapa: 1. Definir arquitetura inicial - Selecionar Tecnologias, definir comunica\u00e7\u00e3o entre elas, etc. 2. Definir pol\u00edtica de branches , commits e pull requests - O que, onde e quando as coisas devem estar 3. Esquematizar vers\u00e3o inicial do pipeline de desenvolvimento - Diagramar o \"caminho\" do c\u00f3digo desde a concep\u00e7\u00e3o da ideia at\u00e9 a sua entrega ao usu\u00e1rio 4. ... 2. Implementa\u00e7\u00e3o Com uma vers\u00e3o inicial da cadeia de processos de desenvolvimento, pode-se realizar o levantamento de poss\u00edveis tarefas e as suas prioriza\u00e7\u00f5es de acordo com os riscos apresentados por cada uma delas. Aqui, pode ser \u00fatil classificar as tarefas/etapas necess\u00e1rias para se construir a cadeia de processos nas seguintes categorias: Essencial para garantir a entrega Problem\u00e1tica M\u00e1xima prioridade N\u00e3o existem muitas implementa\u00e7\u00f5es poss\u00edveis Poucas pessoas chegaram a implementar tal tarefa/etapa dentro ou fora da disciplina N\u00e3o problem\u00e1tica Alta prioridade Existem implementa\u00e7\u00f5es conhecidas de processos similares Comumente implementadas dentro e fora da disciplina Facilitadora de entrega, opcional Problem\u00e1tica Menor prioridade Facilita processos mas exige grandes esfor\u00e7os da equipe para implementar N\u00e3o problem\u00e1tica Baixa prioridade Facilita processos e n\u00e3o exige grandes esfor\u00e7os da equipe para implementar Lembrando que a implementa\u00e7\u00e3o de pipelines de integra\u00e7\u00e3o e deploy cont\u00ednuos n\u00e3o necessariamente aumenta, de forma direta, a produtividade da equipe. Portanto, focar em implementa\u00e7\u00f5es complicadas e desnecess\u00e1rias \u00e9 arriscado e imprudente do ponto de vista de gest\u00e3o. Qualquer m\u00e9todo de prioriza\u00e7\u00e3o pode ser utilizado, desde que apresente resultados adequados. Como resultado desta etapa, \u00e9 importante ter definidas as issues relacionadas \u00e0 implementa\u00e7\u00e3o da cadeia de processos. Para isso, definir as tecnologias a serem utilizadas e iniciar o desenvolvimento do produto \u00e9 fundamental. Por exemplo : Configurar Integra\u00e7\u00e3o Cont\u00ednua no TravisCI Configurar triggers do TravisCI espec\u00edficos para cada branch Configurar verifica\u00e7\u00e3o de build no TravisCI Implementar testes na integra\u00e7\u00e3o cont\u00ednua Configurar verifica\u00e7\u00e3o dos testes na integra\u00e7\u00e3o cont\u00ednua Instalar o Rancher na VM da Digital Ocean Instalar e configurar os environments do Rancher na VM da Digital Ocean Implementar deploy cont\u00ednuo no Rancher Inserir, nos scripts de integra\u00e7\u00e3o cont\u00ednua, os triggers de deploy no Rancher ... 3. Evolu\u00e7\u00e3o e monitoramento do pipeline Com a poss\u00edvel instabilidade do pipeline de produ\u00e7\u00e3o, pode-se pensar nas evolu\u00e7\u00f5es que o tornar\u00e3o mais confi\u00e1vel e confort\u00e1vel de ser utilizado. Aqui, come\u00e7a-se a pensar naquelas tarefas que foram tratadas como de baixa prioridade na etapa anterior. Temos as seguintes issues como bons exemplos: Melhorar o log dos testes no TravisCI Inserir script em Python para formatar a leitura do arquivo de log dos testes Criar cron job para verificar a estabilidade dos servi\u00e7os em opera\u00e7\u00e3o Criar cron job que verifica a disponibilidade dos servi\u00e7os e notifica a equipe caso haja algum problema Criar API de monitoramento e armazenamento de dados das builds no TravisCI Criar API que recebe dados relacionados \u00e0s builds no TravisCI como: Tempo m\u00e9dio de build N\u00famero de builds finalizadas com sucesso N\u00famero de builds finalizadas sem sucesso ... As issues listadas neste documento s\u00e3o apenas sugest\u00f5es para facilitar o processo de entendimento do trabalho do membro DevOps. A leitura e aceita\u00e7\u00e3o das sugest\u00f5es apresentadas n\u00e3o substituem estudo aprofundado e adequado das solu\u00e7\u00f5es mais adequadas ao contexto de cada equipe.","title":"Roadmap"},{"location":"devops/roadmap/#roadmap-devops","text":"Dentro de uma equipe de desenvolvimento de software , o DevOps \u00e9 respons\u00e1vel por automatizar a cadeia de processos que leva o c\u00f3digo feito pelo desenvolvedor at\u00e9 o usu\u00e1rio. A integra\u00e7\u00e3o do membro com a equipe \u00e9 fundamental para que os interesses dos stakeholders sejam sempre respeitados e apoiados pelos processos definidos pelo time. Como sugest\u00e3o de caminho a ser trilhado pelo membro DevOps, temos as seguintes etapas:","title":"Roadmap DevOps"},{"location":"devops/roadmap/#1-desenhar-pipeline-de-producao-integracao-deploy","text":"Ap\u00f3s definir-se a estrutura b\u00e1sica da arquitetura do projeto, \u00e9 fundamental que se defina todas as etapas que levam o trabalho do programador ao ambiente de produ\u00e7\u00e3o. Aqui, deve-se levar em considera\u00e7\u00e3o a opini\u00e3o dos stakeholders para responder a quest\u00f5es como: Com qual frequ\u00eancia o ambiente de produ\u00e7\u00e3o/homologa\u00e7\u00e3o ser\u00e1 atualizado? Para quem estar\u00e1 dispon\u00edvel o ambiente de homologa\u00e7\u00e3o? Haver\u00e1 um ambiente de desenvolvimento, fechado para os membros da equipe? Como os desenvolvedores v\u00e3o realizar a entrega dos artefatos criados? De quantos servi\u00e7os estamos falando? Pode haver o surgimento de mais servi\u00e7os? Como est\u00e1 previsto o funcionamento da arquitetura do nosso produto de software ? ... As seguintes issues podem ajudar a ter um bom rendimento nesta etapa: 1. Definir arquitetura inicial - Selecionar Tecnologias, definir comunica\u00e7\u00e3o entre elas, etc. 2. Definir pol\u00edtica de branches , commits e pull requests - O que, onde e quando as coisas devem estar 3. Esquematizar vers\u00e3o inicial do pipeline de desenvolvimento - Diagramar o \"caminho\" do c\u00f3digo desde a concep\u00e7\u00e3o da ideia at\u00e9 a sua entrega ao usu\u00e1rio 4. ...","title":"1. Desenhar pipeline de produ\u00e7\u00e3o + integra\u00e7\u00e3o + deploy"},{"location":"devops/roadmap/#2-implementacao","text":"Com uma vers\u00e3o inicial da cadeia de processos de desenvolvimento, pode-se realizar o levantamento de poss\u00edveis tarefas e as suas prioriza\u00e7\u00f5es de acordo com os riscos apresentados por cada uma delas. Aqui, pode ser \u00fatil classificar as tarefas/etapas necess\u00e1rias para se construir a cadeia de processos nas seguintes categorias: Essencial para garantir a entrega Problem\u00e1tica M\u00e1xima prioridade N\u00e3o existem muitas implementa\u00e7\u00f5es poss\u00edveis Poucas pessoas chegaram a implementar tal tarefa/etapa dentro ou fora da disciplina N\u00e3o problem\u00e1tica Alta prioridade Existem implementa\u00e7\u00f5es conhecidas de processos similares Comumente implementadas dentro e fora da disciplina Facilitadora de entrega, opcional Problem\u00e1tica Menor prioridade Facilita processos mas exige grandes esfor\u00e7os da equipe para implementar N\u00e3o problem\u00e1tica Baixa prioridade Facilita processos e n\u00e3o exige grandes esfor\u00e7os da equipe para implementar Lembrando que a implementa\u00e7\u00e3o de pipelines de integra\u00e7\u00e3o e deploy cont\u00ednuos n\u00e3o necessariamente aumenta, de forma direta, a produtividade da equipe. Portanto, focar em implementa\u00e7\u00f5es complicadas e desnecess\u00e1rias \u00e9 arriscado e imprudente do ponto de vista de gest\u00e3o. Qualquer m\u00e9todo de prioriza\u00e7\u00e3o pode ser utilizado, desde que apresente resultados adequados. Como resultado desta etapa, \u00e9 importante ter definidas as issues relacionadas \u00e0 implementa\u00e7\u00e3o da cadeia de processos. Para isso, definir as tecnologias a serem utilizadas e iniciar o desenvolvimento do produto \u00e9 fundamental. Por exemplo : Configurar Integra\u00e7\u00e3o Cont\u00ednua no TravisCI Configurar triggers do TravisCI espec\u00edficos para cada branch Configurar verifica\u00e7\u00e3o de build no TravisCI Implementar testes na integra\u00e7\u00e3o cont\u00ednua Configurar verifica\u00e7\u00e3o dos testes na integra\u00e7\u00e3o cont\u00ednua Instalar o Rancher na VM da Digital Ocean Instalar e configurar os environments do Rancher na VM da Digital Ocean Implementar deploy cont\u00ednuo no Rancher Inserir, nos scripts de integra\u00e7\u00e3o cont\u00ednua, os triggers de deploy no Rancher ...","title":"2. Implementa\u00e7\u00e3o"},{"location":"devops/roadmap/#3-evolucao-e-monitoramento-do-pipeline","text":"Com a poss\u00edvel instabilidade do pipeline de produ\u00e7\u00e3o, pode-se pensar nas evolu\u00e7\u00f5es que o tornar\u00e3o mais confi\u00e1vel e confort\u00e1vel de ser utilizado. Aqui, come\u00e7a-se a pensar naquelas tarefas que foram tratadas como de baixa prioridade na etapa anterior. Temos as seguintes issues como bons exemplos: Melhorar o log dos testes no TravisCI Inserir script em Python para formatar a leitura do arquivo de log dos testes Criar cron job para verificar a estabilidade dos servi\u00e7os em opera\u00e7\u00e3o Criar cron job que verifica a disponibilidade dos servi\u00e7os e notifica a equipe caso haja algum problema Criar API de monitoramento e armazenamento de dados das builds no TravisCI Criar API que recebe dados relacionados \u00e0s builds no TravisCI como: Tempo m\u00e9dio de build N\u00famero de builds finalizadas com sucesso N\u00famero de builds finalizadas sem sucesso ... As issues listadas neste documento s\u00e3o apenas sugest\u00f5es para facilitar o processo de entendimento do trabalho do membro DevOps. A leitura e aceita\u00e7\u00e3o das sugest\u00f5es apresentadas n\u00e3o substituem estudo aprofundado e adequado das solu\u00e7\u00f5es mais adequadas ao contexto de cada equipe.","title":"3. Evolu\u00e7\u00e3o e monitoramento do pipeline"},{"location":"eps/","text":"EPS - Engenharia de Produto de Software Bem vindo a EPS O plano de Ensino na disciplina pode ser encontrado aqui . O que \u00e9 projeto? De acordo com o PMBOK: \u201cUm projeto \u00e9 um esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado exclusivo. Os projetos e as opera\u00e7\u00f5es diferem, principalmente, no fato de que os projetos s\u00e3o tempor\u00e1rios e exclusivos, enquanto as opera\u00e7\u00f5es s\u00e3o cont\u00ednuas e repetitivas.\u201d Segundo a ABNT, na norma t\u00e9cnica NBR 10006, Projeto \u00e9 \u201cProcesso \u00fanico, consistindo de um grupo de atividades coordenadas e controladas com datas para in\u00edcio e t\u00e9rmino, empreendido para alcance de um objetivo conforme requisitos espec\u00edficos, incluindo limita\u00e7\u00f5es de tempo, custo e recursos.\u201d De acordo com o Project Management Institute (PMBOK, 2013), Projeto \u00e9 \u201cUm esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado \u00fanico.\u201d Em resumo, projeto \u00e9 um evento que possui um in\u00edcio, meio e um fim bem definidos. O que o diferencia de uma opera\u00e7\u00e3o, que \u00e9 uma tarefa do dia a dia e n\u00e3o se tem o conhecimento de quando ela n\u00e3o mais ser\u00e1 necess\u00e1ria, algo rotineiro. Segundo Pressman, para que um projeto de software seja bem sucedido, \u00e9 necess\u00e1rio que alguns par\u00e2metros sejam corretamente analisados, como por exemplo, o escopo do software, os riscos envolvidos, os recursos necess\u00e1rios, as tarefas a serem realizadas, os indicadores a serem acompanhados, os esfor\u00e7os e custos aplicados e a sistem\u00e1tica a ser seguida. A an\u00e1lise de todos estes par\u00e2metros seria a fun\u00e7\u00e3o t\u00edpica do gerenciamento de projetos, qual, em geral, se inicia antes do trabalho t\u00e9cnico e prossegue \u00e0 medida que a entrega do software vai se concretizando. Projeto busca atingir um objetivo claro, sendo conduzido por pessoas e possuindo par\u00e2metros bem definidos de tempo, custo, recursos envolvidos e qualidade. PMBOK Na defini\u00e7\u00e3o do Guia PMBOK\u00ae (2013), gerenciamento de projetos \u00e9 \u201ca aplica\u00e7\u00e3o de conhecimentos, habilidades, ferramentas e t\u00e9cnicas \u00e0s atividades do projeto, fim de atender os requisitos das partes interessadas\u201d. Para Vargas (2009) \u201co gerenciamento de projetos pode ser aplicado a qualquer situa\u00e7\u00e3o onde exista um empreendimento que foge ao que \u00e9 fixo e rotineiro na empresa (ad hoc)\u201d. Satisfazer ou exceder as necessidades envolve equilibrar as v\u00e1rias demandas concorrentes em rela\u00e7\u00e3o ao: * Escopo, tempo, custo e qualidade; * Partes interessadas com necessidades e expectativas diferenciadas; e * Requisitos identificados (necessidades) e requisitos n\u00e3o identificados (expectativas). Para cobrir todas as \u00e1reas que fazem parte da ger\u00eancia de projetos o Guia PMBOK\u00ae dividiu-as em grupos de processos, conforme a figura a seguir. Caracter\u00edsticas de um projeto: Temporariedade Individualidade Empreendimento n\u00e3o repetitivo Sequ\u00eancia clara e l\u00f3gica In\u00edcio, meio e fim Elabora\u00e7\u00e3o progressiva Qual o papel do gerente de projeto? A fun\u00e7\u00e3o de um gerente de projetos \u00e9 planejar, controlar e executar projetos que podem ter um tempo determinado, com uma data para come\u00e7ar e acabar, ou que podem ser a longo prazo, como o objetivo de neg\u00f3cio de uma empresa, por exemplo. Durante o andamento de um projeto, esse profissional \u00e9 respons\u00e1vel por atribuir pap\u00e9is, tarefas, acompanhar e documentar o andamento da equipe por meio de ferramentas e t\u00e9cnicas apuradas, administrar investimentos e integrar as pessoas para trabalharem juntas por um s\u00f3 objetivo. Al\u00e9m de monitorar poss\u00edveis riscos e estar sempre preparado para mudan\u00e7as. O que gerentes de projetos bem sucedidos fazem? A partir do seguinte texto: What Successful Project Managers Do Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. Quais s\u00e3o os principais motivos do fracasso de projetos? Vi\u00e9s: otimismo, custos afundados, confirma\u00e7\u00e3o/in\u00e9rcia. Pouco ou nenhum planejamento. N\u00e3o h\u00e1 li\u00e7\u00f5es aprendidas de projetos passados. Falta de treinamento em ger\u00eancia de projeto. Falta de treino de novas tecnologias. Falta de lideran\u00e7a ou comprometimento dos Stakeholders. Mudan\u00e7a no modelo de gest\u00e3o Da gest\u00e3o tradicional (PMBok) para gest\u00e3o \u00e1gil - baseada na leitura - https://hbr.org/2016/05/embracing-agile","title":"Sobre"},{"location":"eps/#eps-engenharia-de-produto-de-software","text":"","title":"EPS - Engenharia de Produto de Software"},{"location":"eps/#bem-vindo-a-eps","text":"O plano de Ensino na disciplina pode ser encontrado aqui .","title":"Bem vindo a EPS"},{"location":"eps/#o-que-e-projeto","text":"De acordo com o PMBOK: \u201cUm projeto \u00e9 um esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado exclusivo. Os projetos e as opera\u00e7\u00f5es diferem, principalmente, no fato de que os projetos s\u00e3o tempor\u00e1rios e exclusivos, enquanto as opera\u00e7\u00f5es s\u00e3o cont\u00ednuas e repetitivas.\u201d Segundo a ABNT, na norma t\u00e9cnica NBR 10006, Projeto \u00e9 \u201cProcesso \u00fanico, consistindo de um grupo de atividades coordenadas e controladas com datas para in\u00edcio e t\u00e9rmino, empreendido para alcance de um objetivo conforme requisitos espec\u00edficos, incluindo limita\u00e7\u00f5es de tempo, custo e recursos.\u201d De acordo com o Project Management Institute (PMBOK, 2013), Projeto \u00e9 \u201cUm esfor\u00e7o tempor\u00e1rio empreendido para criar um produto, servi\u00e7o ou resultado \u00fanico.\u201d Em resumo, projeto \u00e9 um evento que possui um in\u00edcio, meio e um fim bem definidos. O que o diferencia de uma opera\u00e7\u00e3o, que \u00e9 uma tarefa do dia a dia e n\u00e3o se tem o conhecimento de quando ela n\u00e3o mais ser\u00e1 necess\u00e1ria, algo rotineiro. Segundo Pressman, para que um projeto de software seja bem sucedido, \u00e9 necess\u00e1rio que alguns par\u00e2metros sejam corretamente analisados, como por exemplo, o escopo do software, os riscos envolvidos, os recursos necess\u00e1rios, as tarefas a serem realizadas, os indicadores a serem acompanhados, os esfor\u00e7os e custos aplicados e a sistem\u00e1tica a ser seguida. A an\u00e1lise de todos estes par\u00e2metros seria a fun\u00e7\u00e3o t\u00edpica do gerenciamento de projetos, qual, em geral, se inicia antes do trabalho t\u00e9cnico e prossegue \u00e0 medida que a entrega do software vai se concretizando. Projeto busca atingir um objetivo claro, sendo conduzido por pessoas e possuindo par\u00e2metros bem definidos de tempo, custo, recursos envolvidos e qualidade.","title":"O que \u00e9 projeto?"},{"location":"eps/#pmbok","text":"Na defini\u00e7\u00e3o do Guia PMBOK\u00ae (2013), gerenciamento de projetos \u00e9 \u201ca aplica\u00e7\u00e3o de conhecimentos, habilidades, ferramentas e t\u00e9cnicas \u00e0s atividades do projeto, fim de atender os requisitos das partes interessadas\u201d. Para Vargas (2009) \u201co gerenciamento de projetos pode ser aplicado a qualquer situa\u00e7\u00e3o onde exista um empreendimento que foge ao que \u00e9 fixo e rotineiro na empresa (ad hoc)\u201d. Satisfazer ou exceder as necessidades envolve equilibrar as v\u00e1rias demandas concorrentes em rela\u00e7\u00e3o ao: * Escopo, tempo, custo e qualidade; * Partes interessadas com necessidades e expectativas diferenciadas; e * Requisitos identificados (necessidades) e requisitos n\u00e3o identificados (expectativas). Para cobrir todas as \u00e1reas que fazem parte da ger\u00eancia de projetos o Guia PMBOK\u00ae dividiu-as em grupos de processos, conforme a figura a seguir. Caracter\u00edsticas de um projeto: Temporariedade Individualidade Empreendimento n\u00e3o repetitivo Sequ\u00eancia clara e l\u00f3gica In\u00edcio, meio e fim Elabora\u00e7\u00e3o progressiva","title":"PMBOK"},{"location":"eps/#qual-o-papel-do-gerente-de-projeto","text":"A fun\u00e7\u00e3o de um gerente de projetos \u00e9 planejar, controlar e executar projetos que podem ter um tempo determinado, com uma data para come\u00e7ar e acabar, ou que podem ser a longo prazo, como o objetivo de neg\u00f3cio de uma empresa, por exemplo. Durante o andamento de um projeto, esse profissional \u00e9 respons\u00e1vel por atribuir pap\u00e9is, tarefas, acompanhar e documentar o andamento da equipe por meio de ferramentas e t\u00e9cnicas apuradas, administrar investimentos e integrar as pessoas para trabalharem juntas por um s\u00f3 objetivo. Al\u00e9m de monitorar poss\u00edveis riscos e estar sempre preparado para mudan\u00e7as.","title":"Qual o papel do gerente de projeto?"},{"location":"eps/#o-que-gerentes-de-projetos-bem-sucedidos-fazem","text":"A partir do seguinte texto: What Successful Project Managers Do Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"O que gerentes de projetos bem sucedidos fazem?"},{"location":"eps/#quais-sao-os-principais-motivos-do-fracasso-de-projetos","text":"Vi\u00e9s: otimismo, custos afundados, confirma\u00e7\u00e3o/in\u00e9rcia. Pouco ou nenhum planejamento. N\u00e3o h\u00e1 li\u00e7\u00f5es aprendidas de projetos passados. Falta de treinamento em ger\u00eancia de projeto. Falta de treino de novas tecnologias. Falta de lideran\u00e7a ou comprometimento dos Stakeholders.","title":"Quais s\u00e3o os principais motivos do fracasso de projetos?"},{"location":"eps/#mudanca-no-modelo-de-gestao","text":"Da gest\u00e3o tradicional (PMBok) para gest\u00e3o \u00e1gil - baseada na leitura - https://hbr.org/2016/05/embracing-agile","title":"Mudan\u00e7a no modelo de gest\u00e3o"},{"location":"mds/","text":"MDS - Metodologia de Desenvolvimento de Software Bem vindo a MDS 1. O que \u00e9 Processo de Desenvolvimento de Software Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas. 2. O que \u00e9 modelo de processo de software \u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens. 3. Fases do ciclo de vida de software Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa. 3.1 Objetivos de cada fase do ciclo de vida de software Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores. 4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. 5. Refer\u00eancias Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"Sobre"},{"location":"mds/#mds-metodologia-de-desenvolvimento-de-software","text":"","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/#bem-vindo-a-mds","text":"","title":"Bem vindo a MDS"},{"location":"mds/#1-o-que-e-processo-de-desenvolvimento-de-software","text":"Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas.","title":"1. O que \u00e9 Processo de Desenvolvimento de Software"},{"location":"mds/#2-o-que-e-modelo-de-processo-de-software","text":"\u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens.","title":"2. O que \u00e9 modelo de processo de software"},{"location":"mds/#3-fases-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa.","title":"3. Fases do ciclo de vida de software"},{"location":"mds/#31-objetivos-de-cada-fase-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores.","title":"3.1 Objetivos de cada fase do ciclo de vida de software"},{"location":"mds/#4-estudo-de-caso-da-influencia-do-modelo-de-processo-no-sucesso-de-um-projeto","text":"Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto"},{"location":"mds/#5-referencias","text":"Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"5. Refer\u00eancias"},{"location":"mds/notas/","text":"MDS - Metodologia de Desenvolvimento de Software Bem vindo a MDS 1. O que \u00e9 Processo de Desenvolvimento de Software Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas. 2. O que \u00e9 modelo de processo de software \u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens. 3. Fases do ciclo de vida de software Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa. 3.1 Objetivos de cada fase do ciclo de vida de software Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores. 4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente. 5. Refer\u00eancias Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/notas/#mds-metodologia-de-desenvolvimento-de-software","text":"","title":"MDS - Metodologia de Desenvolvimento de Software"},{"location":"mds/notas/#bem-vindo-a-mds","text":"","title":"Bem vindo a MDS"},{"location":"mds/notas/#1-o-que-e-processo-de-desenvolvimento-de-software","text":"Para Pressman um processo \u00e9 um conjunto de atividades, a\u00e7\u00f5es e tarefas realizadas na cria\u00e7\u00e3o de um produto de trabalho ( work product ). Uma atividade esfor\u00e7a-se para atingir um objetivo amplo (por exemplo, comunicar-\u00adse com os interessados) e \u00e9 utilizada independentemente do campo de aplica\u00e7\u00e3o, do tamanho do projeto, da complexidade de esfor\u00e7os ou do grau de rigor com que a engenharia de software ser\u00e1 aplicada. Na engenharia de software , um processo n\u00e3o \u00e9 uma prescri\u00e7\u00e3o r\u00edgida de como desenvolver um software , mas sim uma abordagem adapt\u00e1vel que possibilita \u00e0s pessoas (a equipe de software ) realizarem o trabalho de selecionar e escolher o conjunto apropriado de a\u00e7\u00f5es e tarefas.","title":"1. O que \u00e9 Processo de Desenvolvimento de Software"},{"location":"mds/notas/#2-o-que-e-modelo-de-processo-de-software","text":"\u00c9 uma representa\u00e7\u00e3o abstrata de um processo de software . Cada modelo representa um processo a partir de uma perspectiva particular. Modelos de processo de software s\u00e3o utilizados para explicar diferentes abordagens do desenvolvimento de software . Definem a sequ\u00eancia em que as atividades do processo ser\u00e3o realizadas. N\u00e3o s\u00e3o descri\u00e7\u00f5es definitivas de processo, mas sim abstra\u00e7\u00f5es \u00fateis, que podem ser usadas em diferentes abordagens.","title":"2. O que \u00e9 modelo de processo de software"},{"location":"mds/notas/#3-fases-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos: Define as funcionalidades e as necessidades do produto, resultando no escopo e no documento de vis\u00e3o. Podemos separar os requisitos em tr\u00eas categorias: Funcionais: S\u00e3o os requisitos relacionados \u00e0s funcionalidades do software ; N\u00e3o Funcionais: S\u00e3o os requisitos relacionados \u00e0s necessidades do software ; Inversos: S\u00e3o os requisitos que definem o que o software n\u00e3o pode fazer. O objetivo de levantar requisitos \u00e9 guiar o desenvolvimento para que o sistema correto seja feito. Para isso, \u00e9 necess\u00e1rio descrever as condi\u00e7\u00f5es e capacidades do sistema bem o suficiente, de forma a ter um acordo entre cliente e os desenvolvedores do sistema, no quesito do que o sistema deve ou n\u00e3o fazer. O grande desafio dessa etapa \u00e9 que o cliente, mesmo que n\u00e3o seja um especialista da \u00e1rea de computa\u00e7\u00e3o, deve ser capaz de ler e entender os resultados da captura de requisitos. O resultado do levantamento de requisitos tamb\u00e9m ajuda o gestor do projeto a planejar o cronograma do projeto (JACOBSON,2007). Design /Projeto: A atividade de design compreende todo o esfor\u00e7o de concep\u00e7\u00e3o e modelagem que t\u00eam por objetivo descrever como o software ser\u00e1 implementado. O design inclui: O design conceitual: Que envolve a elabora\u00e7\u00e3o das ideias e conceitos b\u00e1sicos que determinam os elementos fundamentais do software em quest\u00e3o. O design conceitual t\u00eam influ\u00eancia na interface do usu\u00e1rio e na arquitetura do software . O design da interface do usu\u00e1rio: Envolve a elabora\u00e7\u00e3o da maneira como o usu\u00e1rio pode interagir para realizar suas tarefas, a escolha dos objetos de interfaces , o layout de janelas e telas, etc. A interface deve garantir a boa usabilidade do software . O design da arquitetura do software : Deve elaborar uma vis\u00e3o macrosc\u00f3pica do software em termos de componentes que interagem entre si. Design dos algoritmos e estruturas de dados: Visa determinar, de maneira independente da linguagem de programa\u00e7\u00e3o adotada, as solu\u00e7\u00f5es algor\u00edtmicas e as estruturas de dados associadas. A fase de Design ou Projeto, \u00e9 a fase final do processo de planejamento e resulta no documento de arquitetura. Implementa\u00e7\u00e3o: Envolve as atividades de codifica\u00e7\u00e3o, compila\u00e7\u00e3o, integra\u00e7\u00e3o e testes. A codifica\u00e7\u00e3o visa traduzir o design em um programa, utilizando linguagens e ferramentas adequadas. A codifica\u00e7\u00e3o deve refletir a estrutura e o comportamento descrito no design . Os componentes arquiteturais devem ser codificados de forma independente e depois integrados. Os testes podem ser iniciados durante a fase de implementa\u00e7\u00e3o. A depura\u00e7\u00e3o de erros ocorre durante a programa\u00e7\u00e3o utilizando algumas t\u00e9cnicas e ferramentas. \u00c9 fundamental um controle e gerenciamento de vers\u00f5es para que se tenha um controle correto de tudo o que est\u00e1 sendo codificado. Verifica\u00e7\u00e3o e Valida\u00e7\u00e3o: Destinam-se a mostrar que o sistema est\u00e1 de acordo com a especifica\u00e7\u00e3o e que ele atende \u00e0s expectativas de clientes e usu\u00e1rios. A valida\u00e7\u00e3o visa assegurar se o programa est\u00e1 fazendo aquilo que foi definido na sua especifica\u00e7\u00e3o. A verifica\u00e7\u00e3o visa verificar se o programa est\u00e1 correto, isto \u00e9, n\u00e3o possui erros de execu\u00e7\u00e3o. Os testes s\u00e3o para corre\u00e7\u00e3o, desempenho e confiabilidade, garantindo a qualidade do software . Manuten\u00e7\u00e3o: A parte de manuten\u00e7\u00e3o envolve melhorar o software a demanda do(s) cliente(s), seja por falhas do programa ou simplesmente por melhorias que o cliente precisa.","title":"3. Fases do ciclo de vida de software"},{"location":"mds/notas/#31-objetivos-de-cada-fase-do-ciclo-de-vida-de-software","text":"Levantamento de Requisitos : Essa fase tem como objetivo unificar a vis\u00e3o do cliente e dos desenvolvedores. Para que isso aconte\u00e7a, s\u00e3o analisados diversos fatores, como por exemplo as funcionalidades que o produto deve possuir, al\u00e9m do objetivo final do produto. Essas an\u00e1lises s\u00e3o feitas de maneira que os desenvolvedores tenham uma vis\u00e3o detalhada do que deve ser produzido. Design Geral : Essa fase consiste no detalhamento de como o software ser\u00e1 desenvolvido, ou seja, a linguagem que ser\u00e1 utilizada, assim como a arquitetura que o projeto dever\u00e1 seguir. Feito isso, espera-se que todos os desenvolvedores tenham vis\u00f5es semelhantes do que deve ser produzido, assim como a maneira que essa produ\u00e7\u00e3o deve ocorrer. Essa etapa \u00e9 crucial, pois sem ela, \u00e9 poss\u00edvel que o projeto inteiro falhe por diverg\u00eancias de vis\u00f5es entre os desenvolvedores.","title":"3.1 Objetivos de cada fase do ciclo de vida de software"},{"location":"mds/notas/#4-estudo-de-caso-da-influencia-do-modelo-de-processo-no-sucesso-de-um-projeto","text":"Resumo do texto: (e podem sugerir outros casos) What Successful Project Managers Do. Atualmente, gerentes de projeto combinam m\u00e9todos tradicionais e \u00e1geis, visando mais flexibilidade e melhores resultados. Gerentes de projeto sempre enfrentar\u00e3o situa\u00e7\u00f5es inesperadas, mesmo tendo o melhor planejamento e gerenciamento de riscos poss\u00edvel. Situa\u00e7\u00f5es como por exemplo, falta de empregados, a fal\u00eancia de um fornecedor, ou mudan\u00e7as de requisitos por parte do cliente.","title":"4. Estudo de caso da influ\u00eancia do modelo de processo no sucesso de um projeto"},{"location":"mds/notas/#5-referencias","text":"Jacobson, I., Booch, G., Rumbaugh, J., Rumbaugh, J., Booch, G. The unified software development process . Reading: Addison-wesley, 2007.","title":"5. Refer\u00eancias"}]}